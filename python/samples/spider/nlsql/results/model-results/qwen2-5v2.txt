SELECT COUNT(*) FROM singer;
SELECT COUNT(*) AS Total_Singers FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1;
SELECT Song_Name, Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) FROM singer GROUP BY Country;
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT Stadium_ID, COUNT(concert_ID) AS Number_of_Concerts FROM concert GROUP BY Stadium_ID;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT Country FROM singer WHERE Age > 40 UNION SELECT Country FROM singer WHERE Age < 30;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers FROM concert c JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers FROM concert c JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(H.StuID) FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(H.StuID) FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(*) FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(*) FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'Dog';
SELECT COUNT(DISTINCT PetType) AS NumberOfDistinctPets FROM Pets;
SELECT COUNT(DISTINCT PetType) AS NumberOfDifferentPets FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';
SELECT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT S.Major, S.Age FROM Student S WHERE NOT EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID );
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' EXCEPT SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat';
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' EXCEPT SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat';
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;
SELECT PetType, weight FROM Pets WHERE PetID = ( SELECT PetID FROM Has_Pet WHERE StuID = ( SELECT StuID FROM Has_Pet ORDER BY pet_age ASC LIMIT 1 ) );
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT DISTINCT FName, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT StuID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT StuID, COUNT(PetID) AS Num_Pets FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 0;
SELECT StuID, COUNT(PetID) AS Num_Pets FROM Has_Pet GROUP BY StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT S.LName FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID JOIN Pets P ON H.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(s.Age) FROM Student s WHERE s.StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(S.Age) AS AverageAge FROM Student S WHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, con.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents con LEFT JOIN countries co ON con.ContId = co.Continent GROUP BY c.ContId, con.Continent;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.Id, cm.FullName, COUNT(DISTINCT ml.Model) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(DISTINCT ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT Model FROM model_list WHERE Id IN (SELECT MakeId FROM cars_data ORDER BY Horsepower ASC LIMIT 1);
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId ORDER BY T1.Horsepower LIMIT 1;
SELECT Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN cars_data cd ON ml.Model = cd.MakeId WHERE cd.Year = 1970;
SELECT Make, Year FROM cars_data WHERE Year = ( SELECT MIN(Year) FROM cars_data );
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = ( SELECT MIN(Year) FROM cars_data );
SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T1.Year > 1980;
SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T1.Year > 1980;
SELECT c.Continent, COUNT(cm.Id) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT COUNT(T2.Model), T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName;
SELECT cm.Id, cm.FullName, COUNT(DISTINCT ml.Model) AS NumModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)';
SELECT t4.Accelerate FROM model_list AS t1 JOIN car_makers AS t2 ON t1.Maker = t2.Id JOIN cars_data AS t4 ON t4.Id = t2.MakeId JOIN car_names AS t3 ON t3.MakeId = t4.Id WHERE t3.Model = 'amc hornet sportabout (sw)';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA';
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'United States';
SELECT AVG(CAST(REPLACE(T2.MPG, ',', '') AS REAL)) AS AverageMPG FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4;
SELECT AVG(CAST(REPLACE(T2.MPG, ',', '') AS REAL)) AS AverageMPG FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4;
SELECT MIN(cars_data.Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT MIN(cars_data.Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT DISTINCT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers);
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT Year, AVG(Weight) AS Average.Weight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN continents ct ON c.Continent = ct.ContId WHERE ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3 AND c.Continent = 'Europe';
SELECT MAX(T2.Horsepower), T1.Make FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T1.ModelId WHERE T1.Cylinders = 3 GROUP BY T1.Make;
SELECT cm.Make, MAX(ml.Horsepower) AS MaxHorsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Cylinders = 3 GROUP BY cm.Make;
SELECT ml.Model FROM model_list ml JOIN cars_data cd ON ml.Model = cd.Id ORDER BY cd.MPG DESC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId ORDER BY T1.MPG DESC LIMIT 1;
SELECT AVG(CAST(REPLACE(Horsepower, ',', '') AS INTEGER)) AS AverageHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Year < 1980;
SELECT AVG(CAST(REPLACE(Horsepower, ',', '') AS INTEGER)) AS AverageHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Year < 1980;
SELECT AVG(T2.Edispl) AS AverageEdisplacement FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T1.Make = 'volvo';
SELECT AVG(T2.Edispl) AS AverageEdisplacement FROM car_names AS T1 JOIN model_list AS T2 ON T1.Make = T2.Maker JOIN car_makers AS T3 ON T1.Make = T3.Id WHERE T3.Maker = 'Volvo';
SELECT Cylinders, MAX(Accelerate) AS Max.Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS Max.Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = (SELECT CountryId FROM countries WHERE CountryName = 'American Motor Company');
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3;
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON ml.Model = cd.MakeId WHERE (cm.FullName = 'General Motors' OR cd.Weight > 3500);
SELECT DISTINCT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id WHERE cm.FullName IN ('General Motors') OR (SELECT w.Weight FROM cars_data w WHERE w.Id = m.ModelId) > 3500;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 UNION SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;
SELECT T2.Horsepower FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId ORDER BY T1.Accelerate DESC LIMIT 1;
SELECT T2.Cylinders FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId JOIN car_names AS T3 ON T1.Id = T3.MakeId WHERE T3.Make = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1;
SELECT T2.Cylinders FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Horsepower FROM model_list WHERE Horsepower IS NOT NULL ORDER BY Horsepower DESC LIMIT 1);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Horsepower FROM cars_data ORDER BY ABS(CAST(Horsepower AS REAL)) DESC LIMIT 1 );
SELECT COUNT(DISTINCT c.CountryName) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 2;
SELECT COUNT(DISTINCT c.CountryName) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 2;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT ml.Model FROM model_list ml JOIN cars_data cd ON ml.Model = cd.Model WHERE ml.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT ml.Model FROM model_list ml JOIN cars_data cd ON ml.Model = cd.Model WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT cn.MakeId, cm.Make FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Horsepower > (SELECT MIN(Horsepower) FROM model_list) AND cn.MakeId NOT IN (SELECT Id FROM cars_data WHERE Cylinders > 3);
SELECT cn.MakeId, m.Model, m.Maker FROM car_names cn JOIN model_list m ON cn.Model = m.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders < 4 AND cd.Horsepower IS NOT NULL AND CAST(cd.Horsepower AS REAL) > (SELECT MIN(CAST(Horsepower AS REAL)) FROM cars_data WHERE Cylinders < 4);
SELECT MAX(T2.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 OR T1.Year < 1980;
SELECT MAX(T2.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 OR T1.Year < 1980;
SELECT DISTINCT m.Model FROM model_list m JOIN car_names cn ON m.Id = cn.MakeId WHERE m.Weight < 3500 AND cn.Make != 'Ford Motor Company';
SELECT DISTINCT m.Model FROM model_list m JOIN car_names cn ON m.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND m.Maker != (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company');
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT Id, Maker FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) >= 2 ) GROUP BY Id, Maker HAVING COUNT(*) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2 AND COUNT(DISTINCT cm.Id) > 3;
SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(*) > 3 ) OR EXISTS ( SELECT 1 FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = c.CountryId AND ml.Model = 'fiat' );
SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3 ) OR EXISTS ( SELECT 1 FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Make = 'Fiat' );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'ATO');
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE a.City = 'Aberdeen' AND d.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE airlines.Airline = 'United' AND dest_airport.AirportName = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Abbreviation = 'United' AND flights.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE a.Airline = 'United Airlines' AND dest.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Airline = 'United' AND p.City = 'Aberdeen';
SELECT A.City FROM flights F JOIN airports A ON F.DestAirport = A.AirportCode GROUP BY A.City ORDER BY COUNT(F.DestAirport) DESC LIMIT 1;
SELECT T2.City FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.DestAirport) DESC LIMIT 1;
SELECT City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode, COUNT(*) AS source_count FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) AS dest_count FROM flights GROUP BY DestAirport ) subquery GROUP BY AirportCode ORDER BY SUM(source_count + dest_count) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportName FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport FROM flights GROUP BY DestAirport ) GROUP BY AirportName ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY flight_count DESC LIMIT 1;
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY flight_count DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) as flight_count FROM flights GROUP BY Airline ORDER BY flight_count ASC LIMIT 1 ) f ON a.uid = f.Airline;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) as flight_count FROM flights GROUP BY Airline ORDER BY flight_count ASC LIMIT 1 ) f ON a.uid = f.Airline;
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT DISTINCT A.Airline, A.Airline, A.Abbreviation, A.Country FROM airlines A JOIN flights F1 ON A.uid = F1.Airline AND F1.SourceAirport = 'APG' JOIN flights F2 ON A.uid = F2.Airline AND F2.SourceAirport = 'CVO';
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT DISTINCT A.Airline, A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.uid = F.Airline WHERE F.SourceAirport = 'CVO' EXCEPT SELECT DISTINCT A.Airline, A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.uid = F.Airline WHERE F.SourceAirport = 'APG';
SELECT DISTINCT A.Airline, A.Abbreviation, A.Country FROM flights F JOIN airlines A ON F.Airline = A.uid WHERE F.SourceAirport = 'CVO' AND F.DestAirport != 'APG';
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United');
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'), (SELECT AirportCode FROM airports WHERE City = 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT AirportCode FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) AS Number_of_Employees FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District FROM shop WHERE Shop_ID = ( SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1 );
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM evaluation e JOIN employee emp ON e.Employee_ID = emp.Employee_ID GROUP BY e.Employee_ID, e.Year_awarded, emp.Name ORDER BY COUNT(e.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM evaluation e JOIN employee emp ON e.Employee_ID = emp.Employee_ID ORDER BY e.Bonus DESC LIMIT 1;
SELECT e.Name FROM evaluation e JOIN employee emp ON e.Employee_ID = emp.Employee_ID ORDER BY e.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees_Hired FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT h.Shop_ID, s.Name AS Shop_Name, e.Employee_ID, e.Name AS Employee_Name, h.Start_from, h.Is_full_time FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID JOIN employee e ON h.Employee_ID = e.Employee_ID;
SELECT District FROM shop GROUP BY District HAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000;
SELECT DISTINCT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products > 10000;
SELECT COUNT(DISTINCT Location) AS Different_Store_Locations FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) AS Document_Count FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) AS Number_of_Different_Templates FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT' );
SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT';
SELECT Template_ID, COUNT(*) AS Number_of_Documents FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;
SELECT t.Template_ID, rt.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d_Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY t.Template_ID, rt.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT t.Template_ID, rt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, rt.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DOCUMENT_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'CV';
SELECT Template_Type_Code, Version_Number FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT MIN(T.Version_Number) AS Min_Version, T.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code GROUP BY T.Template_Type_Code;
SELECT MIN(T.Version_Number) AS Lowest_Version, T.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code GROUP BY T.Template_Type_Code;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
SELECT DISTINCT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK' );
SELECT rt.Template_Type_Code, COUNT(d.Document_ID) AS Number_of_Documents FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code;
SELECT rt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code;
SELECT rt.Template_Type_Code FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_Type_Code FROM Templates );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT DISTINCT Template_Type_Code FROM Templates );
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT RT.Template_Type_Description FROM Ref_Template_Types RT JOIN Templates T ON RT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT DISTINCT t.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation');
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;
SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT p.Paragraph_ID, p.Paragraph_Text, d.Document_Name, t.Template_Type_Description, r.Template_Type_Code FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE p.Paragraph_Text LIKE '%Korea %';
SELECT p.Paragraph_ID, p.Paragraph_Text, d.Document_Name, t.Template_Type_Description, r.Template_Type_Code FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE p.Paragraph_Text LIKE '%Korea %';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews';
SELECT Document_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, COUNT(Paragraph_ID) AS Number_of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT Document_ID, Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID, Document_Name ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID, Document_Name FROM Documents JOIN ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) P ON Documents.Document_ID = P.Document_ID ORDER BY P.Paragraph_Count DESC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) = ( SELECT MIN(COUNT(*)) FROM Paragraphs GROUP BY Document_ID );
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT p.Document_ID, p.Paragraph_Text FROM Paragraphs p WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT DISTINCT d.Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) AS Total_Teachers FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
SELECT Name, Age, Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1;
SELECT T1.Hometown FROM teacher AS T1 JOIN course_arrange AS CA ON T1.Teacher_ID = CA.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(T1.Teacher_ID) > 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vis ON v.ID = vis.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vis.Museum_ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Total_spent DESC LIMIT 1;
SELECT M.Museum_ID, M.Name FROM museum M JOIN visit V ON M.Museum_ID = V.Museum_ID GROUP BY M.Museum_ID, M.Name ORDER BY COUNT(V.Num_of_Ticket) DESC LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT v.Name, v.Age FROM visitor v JOIN visit vis ON v.ID = vis.visitor_ID WHERE vis.Num_of_Ticket = ( SELECT MAX(Num_of_Ticket) FROM visit ) LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit;
SELECT SUM(Total_spent) AS Total_Expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1);
SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' OR m.Open_Year > '2011' GROUP BY v.Name HAVING COUNT(DISTINCT CASE WHEN m.Open_Year < '2009' THEN m.Museum_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN m.Open_Year > '2011' THEN m.Museum_ID ELSE NULL END) > 0;
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010'));
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(winner_rank) AS highest_loser_rank FROM matches;
SELECT MIN(winner_rank) AS best_loser_rank FROM matches;
SELECT COUNT(DISTINCT country_code) AS num_distinct_countries FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries_count FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE (winner_id IN ( SELECT player_id FROM rankings WHERE ranking_date BETWEEN '2013-01-01' AND '2013-12-31' ) AND winner_id IN ( SELECT player_id FROM rankings WHERE ranking_date BETWEEN '2016-01-01' AND '2016-12-31' ));
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN ( SELECT winner_id FROM matches WHERE tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2 ) m ON p.player_id = m.winner_id;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' GROUP BY winner_id HAVING COUNT(*) > 0 ) wc ON p.player_id = wc.winner_id JOIN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' GROUP BY winner_id HAVING COUNT(*) > 0 ) ao ON p.player_id = ao.winner_id;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1 ) r ON p.player_id = r.player_id;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1 ) r ON p.player_id = r.player_id;
SELECT YEAR(tourney_date) AS match_year FROM matches GROUP BY match_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT YEAR(tourney_date) AS match_year, COUNT(*) AS match_count FROM matches GROUP BY YEAR(tourney_date) ORDER BY match_count DESC LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 ) m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id;
SELECT p.winner_name, r.winning_rank_points FROM ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1 ) m JOIN players p ON m.winner_id = p.player_id LEFT JOIN ( SELECT player_id, SUM(ranking_points) AS winning_rank_points FROM rankings GROUP BY player_id ) r ON p.player_id = r.player_id;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT w.winner_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT l.loser_name AS loser_name, w.winner_name AS winner_name FROM matches m JOIN players p_winner ON m.winner_id = p_winner.player_id JOIN players p_loser ON m.loser_id = p_loser.player_id WHERE m.minutes = ( SELECT MAX(minutes) FROM matches );
SELECT p1.first_name AS winner_first_name, p1.last_name AS winner_last_name, p2.first_name AS loser_first_name, p2.last_name AS loser_last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id ORDER BY m.minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT YEAR(tourney_date), COUNT(*) FROM matches GROUP BY YEAR(tourney_date);
SELECT YEAR(tourney_date), COUNT(*) AS matches_played FROM matches GROUP BY YEAR(tourney_date);
SELECT p.first_name, p.last_name, p.player_id, r.ranking FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points IS NOT NULL ORDER BY m.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date = (SELECT MAX(ranking_date) FROM rankings WHERE player_id = p.player_id) ORDER BY p.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches );
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1 ) m ON p.player_id = m.winner_id;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MIN(killed) AS min_death_toll, MAX(killed) AS max_death_toll FROM death;
SELECT AVG(injured) AS average_injuries FROM death;
SELECT d.id, d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle JOIN death AS d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) AS distinct_results_count FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT b.name, b.date FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.location = 'English Channel');
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT address_id, line_1, line_2 FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name LIKE '%Math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT d.department_name, d.department_id FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT department_id, department_name FROM Departments WHERE department_id = ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1 );
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degrees FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2 );
SELECT course_id, course_name FROM Courses WHERE course_id NOT IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) >= 2 );
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT s.semester_name, s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT s.semester_name, s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name HAVING COUNT(se.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY semester_id ) subquery );
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT DISTINCT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE (SELECT COUNT(*) FROM Student_Enrolment se2 WHERE se2.student_id = s.student_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE ( SELECT COUNT(*) FROM Student_Enrolment se2 WHERE se2.student_id = s.student_id ) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.date_left IS NULL;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id OR s.permanent_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN ( SELECT student_id FROM Student_Enrolment );
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE student_id = ( SELECT student_id FROM Student_Enrolment WHERE semester_id = ( SELECT MIN(semester_id) FROM Student_Enrolment ) );
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_print_date FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date) AS earliest_transcript_release_date, COUNT(*) AS number_of_transcripts, AVG(transcript_date) AS average_transcript_release_date FROM Transcripts;
SELECT COUNT(*) AS number_of_transcripts_released FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT student_course_id, COUNT(*) AS transcript_count FROM Transcript_Contents GROUP BY student_course_id;
SELECT sc.student_enrolment_id, COUNT(tc.transcript_id) AS max_times_in_transcripts FROM Student_Enrolment_Courses sc JOIN Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.student_course_id, sc.student_enrolment_id ORDER BY max_times_in_transcripts DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN ( SELECT transcript_id, COUNT(*) as count FROM Transcript_Contents GROUP BY transcript_id ) tc ON t.transcript_id = tc.transcript_id ORDER BY tc.count ASC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE EXISTS ( SELECT 1 FROM Students st JOIN Student_Enrolment se2 ON st.student_id = se2.student_id WHERE se.degree_program_id IN ( SELECT dp.degree_program_id FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name LIKE '%Master%' ) ) AND EXISTS ( SELECT 1 FROM Students st JOIN Student_Enrolment se2 ON st.student_id = se2.student_id WHERE se.degree_program_id IN ( SELECT dp.degree_program_id FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name LIKE '%Bachelor%' ) );
SELECT s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE EXISTS ( SELECT 1 FROM Student_Enrolment se2 JOIN Degree_Programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp2.degree_summary_name IN ('Masters', 'Bachelors') AND s.semester_id = se2.semester_id ) GROUP BY s.semester_id;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses a JOIN Students s ON a.address_id IN (s.current_address_id, s.permanent_address_id);
SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC;
SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC;
It seems there might be a typo in your request. Could you please clarify what you mean by "Describe the section h."? If you want to retrieve specific information from a table or perform an operation, please provide more details so I can craft the correct SQL query for you.;
SELECT s.section_description FROM Sections s WHERE s.section_name = 'h';
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT DISTINCT s.first_name FROM Students s WHERE s.permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR s.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by, Original_air_date FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name, Content) AS num_series_and_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name, Content) AS number_of_series_and_contents FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels ASC LIMIT 1;
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle';
SELECT C.Title FROM Cartoon C JOIN TV_Channel TC ON C.Channel = TC.id WHERE TC.series_name = 'Sky Radio';
SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN("Share"), MAX("Share") FROM "TV_series";
SELECT MIN("Share") AS min_share, MAX("Share") AS max_share FROM "TV_series";
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT T2.Episode FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.Channel = T2.id JOIN TV_Channel AS T3 ON T1.Channel = T3.id WHERE T3.series_name = 'Sky Radio';
SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio';
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey';
SELECT DISTINCT T3.Country FROM Cartoon AS T1 JOIN TV_Channel AS T3 ON T1.Channel = T3.id WHERE T1.Written_by = 'Todd Casey';
SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' );
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE (T2Directed_by = 'Ben Jones' OR T2Directed_by = 'Michael Chang');
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT id FROM TV_Channel WHERE Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2 );
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY p.Name ORDER BY SUM(pp.Final_Table_Made) ASC;
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.Poker_Player_ID ORDER BY pp.Earnings ASC LIMIT 1;
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.Poker_Player_ID ORDER BY pp.Earnings ASC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT AVG(T1.Earnings) AS Average_Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200;
SELECT AVG(T1.Earnings) AS Average_Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Nationality_Count FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY Nationality ORDER BY Nationality_Count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities FROM people;
SELECT COUNT(DISTINCT Nationality) AS Number_of_Different_Nationalities FROM people;
SELECT COUNT(DISTINCT state) AS number_of_states FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c ORDER BY c.contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_vote_date FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(DISTINCT contestant_number) FROM VOTES;
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(T1.vote_id) DESC LIMIT 1;
SELECT v.created, v.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT a.area_code FROM VOTES v1 JOIN AREA_CODE_STATE a ON v1.state = a.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN VOTES v2 ON v1.phone_number = v2.phone_number AND v1.state = v2.state JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT c.Region FROM city AS ci JOIN country AS co ON ci.CountryCode = co.Code WHERE ci.Name = 'Kabul';
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS MaxGNP FROM country c WHERE c.Continent = 'Asia';
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS LargestGNP FROM country c WHERE c.Continent = 'Asia';
SELECT AVG(c LifeExpectancy) FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) AS Total_Population FROM city WHERE District = 'Gelderland';
SELECT SUM(T2.Population) AS TotalPopulation FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code WHERE T2.District = 'Gelderland';
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm LIKE '%US Territory%';
SELECT AVG(c.GNP) AS Mean_GNP, SUM(c.Population) AS Total_Population FROM country c WHERE c.Code IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ) OR c.Code IN ( SELECT cr.CountryCode FROM city cr WHERE cr.CountryCode = 'UMI' );
SELECT COUNT(DISTINCT Language) AS UniqueLanguagesCount FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code, c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.Code) FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'Dutch' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' INTERSECT SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese';
SELECT COUNT(DISTINCT T3.Continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN city AS T3 ON T2.Code = T3.CountryCode WHERE T1.Language = 'Chinese' AND T1.IsOfficial = 'T';
SELECT DISTINCT T2.Region FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE Continent = 'Asia' GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'F' AND Percentage = 100 AND CountryCode IN ( SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%' );
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN ( SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%' ) GROUP BY Language HAVING COUNT(CountryCode) = 1;
SELECT Name FROM city WHERE Population = ( SELECT MAX(Population) FROM city AS c INNER JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT c.Name AS CityName, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ORDER BY c.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT AVG(c LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT SUM(c.Population) FROM country AS c JOIN city AS ci ON c.Code = ci.CountryCode WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE CountryCode = c.Code AND Language = 'English' );
SELECT SUM(c.Population) FROM country AS c WHERE c.Code NOT IN ( SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 );
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 );
SELECT Code, Name, Continent FROM country WHERE Continent = 'Europe' INTO @europe_countries;
SELECT Code, Name, Continent FROM country WHERE Continent = 'Europe';
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia');
SELECT C1.Name FROM country AS C1 WHERE C1.Continent = 'Africa' AND C1.Population < ALL ( SELECT C2.Population FROM country AS C2 WHERE C2.Continent = 'Asia' );
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' OR IsOfficial = 'F';
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T';
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T';
SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' AND Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' );
SELECT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' ) AND GovernmentForm NOT LIKE '%Republic%';
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT c.Name, COUNT(cl.CountryCode) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.CountryCode) >= 3;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*) AS NumberOfCitiesAboveAverage FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.GovernmentForm HAVING AVG(c LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE IndepYear IS NOT NULL AND LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72;
SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AverageArea FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(c.Population) AS TotalPopulation, AVG(co.SurfaceArea) AS AverageSurfaceArea FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Region = 'North America' AND c.SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT cl.CountryCode, cl.Language, cl.Percentage FROM countrylanguage cl JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) max_cl ON cl.CountryCode = max_cl.CountryCode AND cl.Percentage = max_cl.MaxPercentage;
SELECT c.Code, cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' OR cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = cl.CountryCode) GROUP BY c.Code, cl.Language;
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' OR Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' );
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' OR Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT Code FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' ) AND Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'Spanish' ) );
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT MAX(t2.Share) AS Max_Share, MIN(t2.Share) AS Min_Share FROM performance AS t1 JOIN conductor AS t2 ON t1.Orchestra_ID = t2.Conductor_ID WHERE t1.Type != 'Live final';
SELECT MAX(t1.Share) AS Max_Share, MIN(t1.Share) AS Min_Share FROM performance AS t1 JOIN orchestra AS t2 ON t1.Orchestra_ID = t2.Orchestra_ID WHERE t1.Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name, Year_of_Work - (SELECT MIN(Year_of_Work) FROM conductor) AS Years_Worked FROM conductor ORDER BY Years_Worked DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT Name FROM conductor WHERE Conductor_ID IN ( SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Orchestra_ID) > 1 );
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1 );
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1 );
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT ID, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id GROUP BY h.ID, h.name ORDER BY COUNT(f.student_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 );
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT DISTINCT h1.ID FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.student_id;
SELECT ID FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend ) AND ID IN ( SELECT student_id FROM Likes );
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.student_id;
SELECT H.name FROM Highschooler H WHERE EXISTS ( SELECT 1 FROM Friend F WHERE F.student_id = H.ID ) AND EXISTS ( SELECT 1 FROM Likes L WHERE L.student_id = H.ID );
SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID;
SELECT H.name, COUNT(L.liked_id) AS like_count FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) >= 2;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) >= 2;
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend );
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend);
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals) GROUP BY state;
SELECT state FROM Owners GROUP BY state HAVING COUNT(*) > 0 INTERSECT SELECT state FROM Professionals GROUP BY state HAVING COUNT(*) > 0;
SELECT AVG(DATEDIFF(CAST(date_of_birth AS DATE), CAST(date_arrived AS DATE)) / 365) AS average_age FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );
SELECT AVG(DATEDIFF(CAST(date_of_birth AS DATE), CAST(date_arrived AS DATE)) / 365) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' UNION SELECT p.professional_id, p.last_name, p.cell_number FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' UNION SELECT p.professional_id, p.last_name, p.cell_number FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name, d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name, d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION ALL SELECT first_name FROM Professionals ) AS FirstNameList WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION ALL SELECT first_name FROM Professionals ) AS AllFirstNames WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2 );
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN ( SELECT dog_id, SUM(cost_of_treatment) as total_spent FROM Treatments GROUP BY dog_id ORDER BY total_spent DESC LIMIT 1 ) t ON o.owner_id = t.dog_id;
SELECT t.treatment_type_description FROM Treatment_Types t JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ) tc ON t.treatment_type_code = tc.treatment_type_code ORDER BY tc.total_cost ASC LIMIT 1;
SELECT t.treatment_type_description FROM Treatments tr JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code GROUP BY t.treatment_type_description ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT t.date_of_treatment, p.first_name AS operating_professional_first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code;
SELECT o.first_name, o.last_name, d.size_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT O.first_name, O.last_name, D.size_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = ( SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT o.first_name AS owner_first_name, d.name AS dog_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT DISTINCT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = ( SELECT MIN(date_of_birth) FROM Dogs );
SELECT DISTINCT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = ( SELECT MIN(date_of_birth) FROM Dogs );
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE CAST(REPLACE(age, ',', '') AS DECIMAL) < ( SELECT AVG(CAST(REPLACE(age, ',', '') AS DECIMAL)) FROM Dogs );
SELECT COUNT(*) FROM Dogs WHERE CAST(REPLACE(age, ',', '') AS INTEGER) < ( SELECT AVG(CAST(REPLACE(age, ',', '') AS INTEGER)) FROM Dogs );
SELECT MAX(cost_of_treatment) AS most_recent_treatment_cost FROM Treatments;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(CAST(REPLACE(age, 'years', '') AS INTEGER)) AS average_age FROM Dogs;
SELECT AVG(CAST(REPLACE(age, 'years', '') AS INTEGER)) AS average_age FROM Dogs;
SELECT MAX(date_arrived - date_of_birth) AS oldest_dog_age FROM Dogs;
SELECT MAX(date_arrived) - MIN(date_of_birth) AS age_difference, MAX(date_arrived) - MIN(date_of_birth) / 365 AS age_in_years FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT charge_amount FROM Charges WHERE charge_type = ( SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1 );
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT first_name, last_name, email_address, home_phone, cell_number FROM Professionals;
SELECT b.breed_name, s.size_description FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT p.first_name, t.treatment_type_description FROM Professionals p JOIN Treatments tr ON p.professional_id = tr.professional_id JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code;
SELECT p.first_name, t.treatment_type_description FROM Professionals p JOIN Treatments tr ON p.professional_id = tr.professional_id JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Citizenship_Count FROM singer GROUP BY Citizenship ORDER BY Citizenship_Count DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1 );
SELECT Name FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1 );
SELECT s.Name, SUM(sl.Sales) AS Total_Sales FROM singer s JOIN song sl ON s.Singer_ID = sl.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT COUNT(*) AS total_features FROM Other_Available_Features;
SELECT t2.feature_type_name FROM Other_Available_Features AS t1 JOIN Ref_Feature_Types AS t2 ON t1.feature_type_code = t2.feature_type_code WHERE t1.feature_name = 'AirCon';
SELECT p.property_type_code, r.property_type_description FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code;
SELECT property_name FROM Properties WHERE property_type_code IN ('APT', 'HSE') AND room_count > 1;
