SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS AverageAge, MIN(Age) AS MinAge, MAX(Age) AS MaxAge FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS AverageAge, MIN(Age) AS MinAge, MAX(Age) AS MaxAge FROM singer WHERE Country = 'France';
SELECT s.Song_Name, s.Song_release_year FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE (SELECT Age FROM singer WHERE Singer_ID = sic.Singer_ID) = (SELECT MIN(Age) FROM singer);
SELECT s.Song_Name, s.Song_release_year FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE (SELECT Age FROM singer WHERE Singer_ID = sic.Singer_ID) = (SELECT MIN(Age) FROM singer) ORDER BY s.Song_release_year;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT s.Country FROM singer s WHERE s.Age > 20;
SELECT s.Country, COUNT(*) as Num_Singers FROM singer s GROUP BY s.Country;
SELECT Country, COUNT(*) FROM singer GROUP BY Country;
SELECT s.Song_Name FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT s.Song_Name FROM singer s JOIN ( SELECT avg(Age) as AverageAge FROM singer ) avg_age ON s.Age > avg_age.AverageAge;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Avg_Capacity FROM stadium;
SELECT AVG(Capacity) AS Average, MAX(Capacity) AS Maximum FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT s.Name, COUNT(c.concert_ID) AS Num_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT Stadium_ID, COUNT(concert_ID) AS Num_Concerts FROM concert GROUP BY Stadium_ID;
SELECT s.Name, s.Capacity FROM stadium s JOIN ( SELECT Stadium_ID FROM concert WHERE Year >= '2014' ) c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, MAX(c.Capacity) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity;
SELECT Year, COUNT(*) as NumConcerts FROM concert GROUP BY Year ORDER BY NumConcerts DESC LIMIT 1;
SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert);
SELECT DISTINCT s.Country FROM singer s WHERE (s.Age > 40 OR s.Age < 30);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = '2014');
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Num_Singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID;
SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name, COUNT(c.concert_ID) AS Num_Concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID;
SELECT s.Name, COUNT(c.concert_ID) AS Concert_Count FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID;
SELECT s.Name FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE sic.concert_ID IN ( SELECT c.concert_ID FROM concert c WHERE c.Year = '2014' );
SELECT s.Name FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.concert_Name LIKE '%Hey%';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Song_Name LIKE '%Hey%';
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID;
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2;
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet ORDER BY PetAge ASC LIMIT 1);
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE PetType = 'dog' AND Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE PetType = 'dog' AND Sex = 'F';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog') LIMIT 1;
SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';
SELECT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID WHERE HP.PetID IS NULL AND S.Sex = 'M';
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID WHERE HP.PetID IS NULL AND S.Major IS NOT NULL;
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet WHERE PetType = 'cat');
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet WHERE PetType = 'cat');
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID LEFT JOIN Has_Pet HP2 ON S.StuID = HP2.StuID AND HP2.PetType = 'cat' WHERE HP1.PetType = 'dog' AND HP2.PetID IS NULL;
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT PetType, weight FROM Pets WHERE PetID IN (SELECT PetID FROM Has_Pet ORDER BY pet_age ASC LIMIT 1);
SELECT PetType, weight FROM Pets WHERE PetID = (SELECT PetID FROM Has_Pet JOIN Student ON StuID = Student.StuID ORDER BY Age ASC LIMIT 1);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT DISTINCT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT S.StuID, COUNT(P.PetID) AS NumPets FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID GROUP BY S.StuID;
SELECT S.StuID, COUNT(H.PetID) AS NumPets FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID GROUP BY S.StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3 ORDER BY S.LName DESC LIMIT 1;
SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3 ORDER BY StuID DESC LIMIT 1;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet);
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, continents.Continent, COUNT(countries.CountryId) AS NumCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId;
SELECT c.ContId AS ContinentID, c.Continent AS ContinentName, COUNT(co.CountryId) AS CountryCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.FullName AS MakerFullName, cm.Id AS MakerId, COUNT(ml.ModelId) AS ModelsCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id;
SELECT cm.Id AS MakerId, cm.Maker, cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id;
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY Horsepower ASC LIMIT 1;
SELECT Model FROM cars_data ORDER BY Horsepower ASC LIMIT 1;
SELECT Model FROM cars_data JOIN ( SELECT Id, AVG(Weight) AS AvgWeight FROM cars_data ) AS avg_weights ON cars_data.Id = avg_weights.Id WHERE Weight < avg_weights.AvgWeight;
SELECT Model FROM cars_data JOIN ( SELECT Id, AVG(Weight) AS avg_weight FROM cars_data ) AS avg_weights ON cars_data.Id = avg_weights.Id WHERE Weight < avg_weights.avg_weight;
SELECT Maker FROM car_makers WHERE Country IN (SELECT Country FROM countries WHERE Continent IN (SELECT Continent FROM continents)) AND Id IN (SELECT Maker FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE Year = 1970));
SELECT DISTINCT cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = 1970;
SELECT c.Make, cd.Year FROM car_names c JOIN cars_data cd ON c.MakeId = cd.Id ORDER BY cd.Year ASC LIMIT 1;
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id ORDER BY cd.Year ASC LIMIT 1;
SELECT DISTINCT Model FROM cars_data WHERE Year > 1980;
SELECT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Country IN ( SELECT CountryId FROM countries WHERE Continent IN ( SELECT ContId FROM continents ) ) ) AND Model IN ( SELECT Model FROM car_names WHERE Year > 1980 );
SELECT Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY Continent;
SELECT continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT c.CountryName, COUNT(*) as MakerCount FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY MakerCount DESC LIMIT 1;
SELECT c.CountryName FROM countries c JOIN ( SELECT Country, COUNT(*) AS maker_count FROM car_makers GROUP BY Country ORDER BY maker_count DESC LIMIT 1 ) cm ON c.CountryId = cm.Country;
SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT Accelerate FROM cars_data WHERE Id = ( SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout' AND Make = 'sw' );
SELECT Accelerate FROM cars_data WHERE Id = ( SELECT MakeId FROM car_names WHERE Model = 'AMC Hornet Sportabout' );
SELECT COUNT(*) FROM car_makers WHERE Country = 'France';
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France';
SELECT COUNT(DISTINCT Model) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = 'USA');
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN countries ON car_names.Make = countries.CountryName WHERE countries.Continent = ( SELECT ContId FROM continents WHERE Continent='North America' );
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT DISTINCT c.CountryName, cm.Country FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3 WHERE c.Continent IN (SELECT ContId FROM continents WHERE Continent='Europe');
SELECT DISTINCT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent IN ( SELECT ContId FROM continents WHERE Continent='Europe' ) GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3;
SELECT c.Model, MAX(c.Horsepower) AS MaxHorsepower FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id WHERE c.Cylinders = 3 GROUP BY c.Model;
SELECT c.Maker, MAX(cd.Horsepower) AS MaxHorsepower FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Cylinders = 3 GROUP BY cm.Maker;
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Edispl) FROM cars_data JOIN car_names ON Id = MakeId WHERE Model = 'volvo';
SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'Volvo');
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT Model, COUNT(*) as VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT Model, COUNT(*) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company');
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) > 3 ) ml ON cm.Id = ml.Maker;
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(ModelId) > 3);
SELECT DISTINCT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE FullName = 'General Motors' ) OR Model IN ( SELECT Model FROM cars_data WHERE Weight > 3500 );
SELECT DISTINCT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500);
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Weight > 3000;
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;
SELECT Cylinders FROM cars_data WHERE Model = 'volvo' ORDER BY Accelerate ASC LIMIT 1;
SELECT Cylinders FROM cars_data WHERE Model = 'Volvo' AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Model = 'Volvo');
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) );
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data );
SELECT COUNT(*) FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2 );
SELECT COUNT(*) FROM countries WHERE CountryId IN ( SELECT CountryId FROM car_makers GROUP BY CountryId HAVING COUNT(*) > 2 );
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 4 GROUP BY Model ORDER BY Horsepower DESC LIMIT 1;
SELECT MakeId, Make FROM car_names WHERE Id IN ( SELECT MakeId FROM cars_data WHERE Horsepower > ( SELECT MIN(Horsepower) FROM cars_data ) AND Cylinders <= 3 );
SELECT MakeId, Make FROM car_names WHERE Id NOT IN ( SELECT Id FROM cars_data WHERE Horsepower = ( SELECT MIN(Horsepower) FROM cars_data ) ) AND Id IN ( SELECT MakeId FROM cars_data WHERE Cylinders < 4 );
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.Model = model_list.Model WHERE Weight < 3500 AND Maker != (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company');
SELECT Model FROM model_list WHERE Id NOT IN (SELECT Maker FROM car_makers WHERE Maker = 'Ford Motor Company') AND Weight < 3500;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;
SELECT COUNTRIES.CountryName FROM COUNTRIES LEFT JOIN CAR_MAKERS ON COUNTRIES.CountryId = CAR_MAKERS.Country WHERE CAR_MAKERS.Id IS NULL;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(ModelId) >= 2 ) ml ON cm.Id = ml.Maker GROUP BY cm.Id HAVING COUNT(DISTINCT ml.Maker) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) >= 2 ) ml ON cm.Id = ml.Maker JOIN ( SELECT MakeId FROM car_names GROUP BY MakeId HAVING COUNT(*) > 3 ) cn ON cm.Id = cn.MakeId;
SELECT c.CountryId, c.CountryName FROM countries c JOIN ( SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(DISTINCT cm.Id) > 3 UNION ALL SELECT cl.Maker FROM model_list cl JOIN cars_data cd ON cl.ModelId = cd.Id WHERE cd.Model = 'fiat' ) AS makers_or_fiat ON c.CountryName = makers_or_fiat.Country;
SELECT c.CountryId, c.CountryName FROM countries c JOIN ( SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(*) > 3 ) AS cm ON c.CountryName = cm.Country UNION ALL SELECT c.CountryId, c.CountryName FROM countries c JOIN model_list ml ON c.CountryId = ml.Maker AND ml.Model = 'Fiat';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT a.City, a.Country FROM airports AS a WHERE AirportName = 'Alton';
SELECT a.City, a.Country FROM airports AS a WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ';
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ' AND DestAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Ashley' );
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASH';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = ( SELECT uid FROM airlines WHERE Abbreviation = 'UA' );
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA') AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');
SELECT City, COUNT(*) as ArrivingFlights FROM ( SELECT DestAirport FROM flights ) JOIN airports ON airports.AirportCode = DestAirport GROUP BY City ORDER BY ArrivingFlights DESC LIMIT 1;
SELECT a.City, COUNT(f.DestAirport) as Freq FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY Freq DESC LIMIT 1;
SELECT City, COUNT(*) as Departures FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY Departures DESC LIMIT 1;
SELECT City, COUNT(*) as Frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY Frequency DESC LIMIT 1;
SELECT AirportCode FROM ( SELECT DestAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY DestAirport ORDER BY NumFlights DESC LIMIT 1);
SELECT AirportCode FROM ( SELECT DestAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY DestAirport ORDER BY NumFlights DESC LIMIT 1 );
SELECT AirportCode FROM ( SELECT DestAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY DestAirport ORDER BY NumFlights ASC LIMIT 1 ) AS SubQuery;
SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode, COUNT(*) AS NumFlights FROM flights GROUP BY SourceAirport ) ORDER BY NumFlights ASC LIMIT 1;
SELECT Airline, COUNT(*) as NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;
SELECT Airline, COUNT(*) as TotalFlights FROM flights GROUP BY Airline ORDER BY TotalFlights DESC LIMIT 1;
SELECT A.Abbreviation, A.Country FROM airlines A JOIN ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 ) F ON A.uid = F.Airline;
SELECT Abbreviation, Country FROM ( SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY flight_count ASC LIMIT 1 ) AS least_flights JOIN airlines ON least_flights.Airline = airlines.uid;
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' AND f.DestAirport = 'CVO';
SELECT DISTINCT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO');
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights f2 WHERE f2.Airline = a.uid AND f2.SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights f2 WHERE f2.Airline = f.Airline AND f2.SourceAirport = 'APG' );
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ';
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ';
SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ';
SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ';
SELECT COUNT(*) FROM flights WHERE DestAirport IN ( SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene') );
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI');
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT AirportCode FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION ALL SELECT DestAirport FROM flights );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT e.City, COUNT(*) AS NumEmployees FROM employee e GROUP BY e.City;
SELECT e.City, COUNT(*) AS EmployeeCount FROM employee e GROUP BY e.City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Shop.Name, COUNT(*) FROM shop GROUP BY Shop.Location;
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location;
SELECT s.Manager_name, s.District FROM shop s WHERE (SELECT MAX(Number_products) FROM shop) = s.Number_products;
SELECT s.Manager_name, s.District FROM shop s ORDER BY s.Number_products DESC LIMIT 1;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT s.Name FROM shop s WHERE s.Number_products > ( SELECT AVG(Number_products) FROM shop );
SELECT e.Name FROM employee e JOIN ( SELECT Employee_ID, COUNT(*) as AwardCount FROM evaluation GROUP BY Employee_ID ORDER BY AwardCount DESC LIMIT 1 ) ev ON e.Employee_ID = ev.Employee_ID;
SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT e.Name FROM evaluation AS ev JOIN employee AS e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM evaluation);
SELECT s.Name FROM shop s JOIN ( SELECT Shop_ID, COUNT(Employee_ID) AS num_employees FROM hiring GROUP BY Shop_ID ORDER BY num_employees DESC LIMIT 1 ) h ON s.Shop_ID = h.Shop_ID;
SELECT s.Name FROM shop s JOIN (SELECT Shop_ID, COUNT(*) as cnt FROM hiring GROUP BY Shop_ID ORDER BY cnt DESC LIMIT 1) h ON s.Shop_ID = h.Shop_ID;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name, COUNT(h.Employee_ID) AS NumEmployees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Num_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT D.District FROM shop AS S1 JOIN shop AS S2 ON S1.District = S2.District WHERE S1.Number_products < 3000 AND S2.Number_products > 10000;
SELECT DISTINCT s.District FROM shop AS s WHERE (s.Number_products < 3000 OR s.Number_products > 10000);
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT D.Document_ID, T.Template_ID, D.Document_Description FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE D.Document_Name = 'Robbin CV';
SELECT D.Document_ID, T.Template_ID, D.Document_Description FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE D.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_Type_Code) FROM Templates WHERE Document_ID IS NOT NULL;
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');
SELECT COUNT(*) FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT' );
SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT Templates.Template_ID AS TemplateID, COUNT(Documents.Document_ID) AS UsageCount FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN ( SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(Document_ID) DESC LIMIT 1 ) D ON T.Template_ID = D.Template_ID;
SELECT T.Template_ID, T.Template_Type_Code FROM Templates T JOIN ( SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1 ) D ON T.Template_ID = D.Template_ID;
SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1;
SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Docuemnt_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) as Num_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Num_Templates DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Version_Number, Template_Type_Code FROM Templates ORDER BY Version_Number ASC LIMIT 1;
SELECT t.Template_Type_Code, MIN(t.Version_Number) AS Lowest_Version FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code GROUP BY t.Template_Type_Code;
SELECT Template_Type_Code FROM Templates WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Data base');
SELECT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base';
SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK' );
SELECT Template_Type_Code, COUNT(DISTINCT Document_ID) AS Num_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Document_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) as Document_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY Document_Count DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates WHERE Document_ID IN ( SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) >= ( SELECT COUNT(*) FROM Documents GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1 ) ) GROUP BY Template_Type_Code HAVING COUNT(*) >= ALL ( SELECT COUNT(*) FROM Templates t2 WHERE t2.Document_ID IN ( SELECT Document_ID FROM Documents GROUP BY Document_ID ) AND t2.Template_Type_Code <> Template_Type_Code );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Document_ID IS NOT NULL);
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates);
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Templates WHERE Template_ID IN ( SELECT Document_ID FROM Documents ) );
SELECT DISTINCT T.Template_Type_Description FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show' );
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show' );
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY' );
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' );
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' );
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT Document_ID FROM Documents WHERE EXISTS ( SELECT 1 FROM Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2 );
SELECT Document_ID FROM Documents WHERE Paragraph_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2 );
SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID = ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1 );
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN ( SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Paragraph_Count DESC LIMIT 1 ) p ON d.Document_ID = p.Document_ID;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM ( SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) ORDER BY Paragraph_Count ASC LIMIT 1;
SELECT Document_ID FROM Documents WHERE EXISTS ( SELECT 1 FROM Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID LIMIT 2 );
SELECT Document_ID FROM Documents WHERE EXISTS ( SELECT 1 FROM Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID LIMIT 2 OFFSET 0 );
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%';
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT t.Name, t.Age, t.Hometown FROM teacher AS t;
SELECT t.Name, t.Age, t.Hometown FROM teacher AS t;
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE t.Age IN (32, 33);
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE t.Age IN ('32', '33');
SELECT t.Hometown FROM teacher t WHERE t.Age = ( SELECT MIN(t2.Age) FROM teacher t2 );
SELECT Name, Age FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT t.Hometown, COUNT(*) as Num_Teachers FROM teacher t GROUP BY t.Hometown;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) as NumTeachers FROM teacher GROUP BY Hometown ORDER BY NumTeachers DESC LIMIT 1;
SELECT Hometown, COUNT(*) as NumTeachers FROM teacher GROUP BY Hometown ORDER BY NumTeachers DESC LIMIT 1;
SELECT t.Hometown FROM teacher t JOIN ( SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2 ) ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Hometown HAVING COUNT(t.Teacher_ID) >= 2;
SELECT t.Hometown FROM teacher t GROUP BY t.Hometown HAVING COUNT(t.Teacher_ID) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name, COUNT(ca.Course_ID) AS NumCourses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name, COUNT(ca.Course_ID) AS NumCourses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN ( SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2 ) ca ON t.Teacher_ID = ca.Teacher_ID;
SELECT t.Name FROM teacher t JOIN ( SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2 ) ca ON t.Teacher_ID = ca.Teacher_ID;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange);
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT v.Name FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT v.Name, v.Level_of_membership FROM visitor AS v WHERE v.Level_of_membership > 4 ORDER BY v.Age ASC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(m.Num_of_Staff) FROM museum m WHERE strftime('%Y', m.Open_Year) < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010' );
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN ( SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1 ) AS v2 ON v.ID = v2.visitor_ID;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN ( SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY SUM(Total_spent) DESC LIMIT 1 ) AS max_spender ON v.ID = max_spender.visitor_ID;
SELECT M.Museum_ID, M.Name FROM museum M JOIN ( SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1 ) V ON M.Museum_ID = V.Museum_ID;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit);
SELECT v.Name, v.Age FROM visitor v JOIN ( SELECT visitor_ID, MAX(Num_of_Ticket) AS MaxTickets FROM visit ) vt ON v.ID = vt.visitor_ID WHERE vt.MaxTickets = ( SELECT MAX(Num_of_Ticket) FROM visit );
SELECT AVG(Num_of_Ticket) AS Average, MAX(Num_of_Ticket) AS Maximum FROM visit;
SELECT SUM(Num_of_Ticket * Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;
SELECT v.Name FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID JOIN museum m ON vt.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND EXISTS ( SELECT 1 FROM visit vt2 JOIN museum m2 ON vt2.Museum_ID = m2.Museum_ID WHERE v.ID = vt2.visitor_ID AND m2.Open_Year > '2011' );
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE Open_Year <= '2010' );
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT p.first_name, p.birth_date FROM players p WHERE p.country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(r.ranking) AS avg_rank FROM rankings r JOIN players p ON r.player_id = p.player_id WHERE p.player_id IN (SELECT winner_id FROM matches);
SELECT AVG(r.ranking) AS avg_rank FROM rankings r JOIN matches m ON r.player_id = m.winner_id;
SELECT MAX(r.ranking) FROM rankings r JOIN players p ON r.player_id = p.player_id WHERE p.player_id IN (SELECT loser_id FROM matches);
SELECT MIN(winner_rank) FROM matches WHERE loser_id IS NOT NULL;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016);
SELECT DISTINCT p.first_name || ' ' || p.last_name AS player_name FROM players p JOIN matches m_won_2013 ON p.player_id = m_won_2013.winner_id AND m_won_2013.year = 2013 JOIN matches m_won_2016 ON p.player_id = m_won_2016.winner_id AND m_won_2016.year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id;
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p ORDER BY p.birth_date;
SELECT p.first_name || ' ' || p.last_name AS full_name FROM players p ORDER BY p.birth_date;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand IN ('L', 'Left') ORDER BY p.birth_date;
SELECT p.first_name || ' ' || p.last_name AS full_name FROM players p JOIN matches m ON p.player_id = m.loser_id OR p.player_id = m.winner_id WHERE p.hand = 'left' GROUP BY p.player_id ORDER BY p.birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, COUNT(DISTINCT tourney_id) AS num_tours FROM matches GROUP BY player_id ORDER BY num_tours DESC LIMIT 1 ) m ON p.player_id = m.player_id;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, MAX(tours) AS max_tours FROM rankings ) r ON p.player_id = r.player_id WHERE r.max_tours = ( SELECT MAX(tours) FROM rankings );
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, SUM(winner_rank_points) as total_rank_points FROM matches GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT w.winner_name, SUM(r.ranking_points) AS total_rank_points FROM matches m JOIN players w ON m.winner_id = w.player_id LEFT JOIN rankings r ON w.player_id = r.player_id AND r.ranking_date = ( SELECT MAX(ranking_date) FROM rankings WHERE player_id = w.player_id ) GROUP BY w.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open');
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' GROUP BY winner_name ORDER BY SUM(winner_rank_points) DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, MAX(winner_rank_points) as max_rank_points FROM rankings ) r ON p.player_id = r.winner_id;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, SUM(winner_rank_points) AS total_winner_rank_points FROM matches GROUP BY winner_id ORDER BY total_winner_rank_points DESC LIMIT 1 ) m ON p.player_id = m.winner_id;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT b.id AS battle_id, MIN(d.killed) AS min_deaths, MAX(d.killed) AS max_deaths FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle LEFT JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id;
SELECT AVG(injured) FROM death;
SELECT d.note, d.killed, d.injured FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT b.name, b.result FROM battle AS b WHERE b.bulgarian_commander <> 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle AND s1.name = 'Lettice' JOIN ship s2 ON b.id = s2.lost_in_battle AND s2.name = 'HMS Atalanta';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.id IS NULL AND b.date LIKE '%English Channel%';
SELECT note FROM death WHERE note LIKE '%East%';
SELECT A.line_1, A.line_2 FROM Addresses AS A;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT c.course_description FROM Courses c JOIN Sections s ON c.course_id = s.course_id WHERE s.section_name LIKE 'Math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT d.department_name, COUNT(dp.degree_program_id) AS degree_count FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY degree_count DESC LIMIT 1;
SELECT d.department_name, COUNT(dp.degree_program_id) AS degree_count FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY degree_count DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT s.section_name, s.section_description FROM Sections s;
SELECT s.section_name, s.section_description FROM Sections s;
SELECT c.course_id, c.course_name FROM Courses c WHERE c.course_id NOT IN ( SELECT sc.course_id FROM Sections sc GROUP BY sc.course_id HAVING COUNT(*) > 2 );
SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN ( SELECT sem_id FROM Student_Enrolment GROUP BY sem_id ORDER BY COUNT(*) DESC LIMIT 1 ) se ON s.semester_id = se.sem_id;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN ( SELECT se.student_enrolment_id, COUNT(*) as student_count FROM Student_Enrolment se GROUP BY se.student_enrolment_id ORDER BY student_count DESC LIMIT 1 ) se ON s.semester_id = se.student_enrolment_id;
SELECT d.department_description FROM Departments d WHERE d.department_name LIKE '%the computer%';
SELECT d.department_description FROM Departments d WHERE d.department_name LIKE '%computer%';
SELECT S.first_name, S.middle_name, S.last_name, SE.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id WHERE ( SELECT COUNT(*) FROM Degree_Programs DP JOIN Student_Enrolment SE2 ON DP.degree_program_id = SE2.degree_program_id WHERE SE2.semester_id = SE.semester_id AND SE2.student_id = SE.student_id ) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.semester_id IN ( SELECT semester_id FROM Degree_Programs dp1 JOIN Student_Enrolment se1 ON dp1.degree_program_id = se1.degree_program_id WHERE dp1.degree_program_id != ALL ( SELECT degree_program_id FROM Degree_Programs dp2 JOIN Student_Enrolment se2 ON dp2.degree_program_id = se2.degree_program_id WHERE se2.semester_id = se1.semester_id ) );
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE 'Bachelor%';
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE 'Bachelors';
SELECT dp.degree_summary_name, COUNT(*) as student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.department_id = se.student_enrolment_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name, dp.degree_summary_description FROM Degree_Programs dp JOIN ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 ) se ON dp.degree_program_id = se.degree_program_id;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.last_name FROM Students s LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE s.current_address_id IN ( SELECT a.address_id FROM Addresses a WHERE a.state_province_county = 'North Carolina' ) AND se.student_enrolment_id IS NULL;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_enrolment_id IS NULL;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN ( SELECT tc.student_course_id FROM Transcript_Contents tc GROUP BY tc.student_course_id HAVING COUNT(*) >= 2 ) sc ON t.transcript_id = sc.transcript_id;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN ( SELECT tc.student_course_id FROM Transcript_Contents tc GROUP BY tc.student_course_id HAVING COUNT(*) >= 2 ) AS subquery ON t.transcript_id = subquery.student_course_id;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN ( SELECT student_id FROM Student_Enrolment ORDER BY semester_id ASC LIMIT 1 ) se ON s.student_id = se.student_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id LEFT JOIN Semesters sem ON se.semester_id = sem.semester_id ORDER BY sem.semester_description ASC LIMIT 1;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT S.first_name FROM Students AS S WHERE S.permanent_address_id != S.current_address_id LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN ( SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 ) s ON a.address_id = s.current_address_id;
SELECT AVG(t.transcript_date) AS average_transcript_date FROM Transcripts t;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT COUNT(*) AS max_transcripts, sc.student_enrolment_id FROM Student_Enrolment_Courses sc JOIN Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.course_id, sc.student_course_id, COUNT(*) AS max_transcripts FROM Transcript_Contents tc JOIN Student_Enrolment_Courses sc ON tc.student_course_id = sc.student_course_id JOIN Courses c ON sc.course_id = c.course_id GROUP BY sc.student_course_id ORDER BY max_transcripts DESC LIMIT 1;
SELECT t.transcript_id, MIN(tc.*) FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN ( SELECT student_course_id FROM Transcript_Contents ) tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) LIMIT 1;
SELECT s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id;
SELECT s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors');
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses AS A JOIN Students AS S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT s.first_name FROM Students s WHERE (s.permanent_address_id IN ( SELECT a.address_id FROM Addresses a WHERE a.country = 'Haiti' ) OR s.cell_mobile_number = '09700166582');
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_series WHERE Episode = 'Sky Radio';
SELECT "Package_Option" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio';
SELECT "Package_Option" FROM "TV_Channel" WHERE "series_name" = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;
SELECT TC.series_name FROM Cartoon C JOIN TV_Channel TC ON C.Channel = TC.id WHERE C.Title = 'The Rise of the Blue Beetle!';
SELECT s.series_name FROM TV_series s JOIN Cartoon c ON s.id = c.Channel WHERE c.Title = 'The Rise of the Blue Beetle';
SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Episode FROM TV_series ORDER BY Rating DESC;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC;
SELECT t.id, t.Episode, t.Rating FROM TV_series t ORDER BY t.Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT TC.series_name FROM TV_series TS JOIN TV_Channel TC ON TS.Channel = TC.id WHERE TS.Episode = 'A Love of a Lifetime';
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT C.Production_code, TC.series_name FROM Cartoon AS C JOIN TV_series AS TS ON C.id = TS.id JOIN TV_Channel AS TC ON TS.Channel = TC.id ORDER BY TS.Air_Date DESC LIMIT 1;
SELECT C.Production_code, TC.id AS Channel FROM Cartoon C JOIN TV_series TS ON C.id = TS.id JOIN TV_Channel TC ON TS.Channel = TC.id ORDER BY TS.Air_Date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT `Package_Option`, `series_name` FROM `TV_Channel` WHERE `Hight_definition_TV` = 'Yes';
SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey';
SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Directed_by LIKE '%Ben Jones%' AND Directed_by LIKE '%Michael Chang%';
SELECT t.series_name, t.Country FROM TV_Channel t JOIN Cartoon c1 ON t.id = c1.Channel AND c1.Directed_by = 'Ben Jones' JOIN Cartoon c2 ON t.id = c2.Channel AND c2.Directed_by = 'Michael Chang';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TC.id FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by != 'Ben Jones' AND C.id IS NULL;
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' AND Cartoon.id IS NULL;
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY p.Name ORDER BY COUNT(pp.Final_Table_Made) ASC;
SELECT Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings ASC LIMIT 1;
SELECT Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings ASC LIMIT 1;
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1);
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1;
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Num FROM people GROUP BY Nationality ORDER BY Num DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people WHERE People_ID IN ( SELECT People_ID FROM poker_player GROUP BY People_ID HAVING COUNT(*) >= 2 );
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality != 'Russia';
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT DISTINCT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c WHERE EXISTS ( SELECT 1 FROM VOTES v WHERE v.contestant_number = c.contestant_number GROUP BY v.contestant_number HAVING COUNT(*) >= 2 );
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c WHERE c.contestant_number NOT IN ( SELECT v.contestant_number FROM VOTES v ) ORDER BY c.contestant_number ASC LIMIT 1;
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES);
SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = ( SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' );
SELECT DISTINCT v.state FROM VOTES v JOIN CONTESTANTS c1 ON v.contestant_number = c1.contestant_number AND c1.contestant_name = 'Tabatha Gehling' JOIN CONTESTANTS c2 ON v.contestant_number = c2.contestant_number AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Carribean';
SELECT Continent FROM country WHERE Code = 'AI';
SELECT Continent FROM country WHERE Code = 'AI';
SELECT District FROM city WHERE Name = 'Kabul';
SELECT Region FROM country WHERE Capital = (SELECT ID FROM city WHERE Name = 'Kabul');
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';
SELECT c.Population AS Population, MAX(c.LifeExpectancy) AS LifeExpectancy FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Brazil' GROUP BY c.Population;
SELECT c.Population, c.LifeExpectancy FROM country c WHERE c.Name = 'Brazil';
SELECT c.Region, MAX(c.Population) FROM country AS c WHERE c.Code = 'AGO';
SELECT Region, Population FROM country WHERE Code = 'AGO';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%republic%';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%republic%';
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT Population FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP), SUM(Population) FROM country WHERE Code2 = 'US';
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT SUM(IsOfficial = 'T') FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) AS lang_count FROM countrylanguage GROUP BY CountryCode ORDER BY lang_count DESC LIMIT 1 ) l ON c.Code = l.CountryCode;
SELECT Name FROM country WHERE Code = ( SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(Language) DESC LIMIT 1 );
SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT Continent FROM country WHERE Continent = ( SELECT Continent FROM country AS c2 JOIN countrylanguage AS cl ON c2.Code = cl.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1 );
SELECT COUNT(DISTINCT c.Code) FROM country AS c JOIN countrylanguage AS l1 ON c.Code = l1.CountryCode AND l1.Language = 'English' JOIN countrylanguage AS l2 ON c.Code = l2.CountryCode AND l2.Language = 'Dutch';
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch');
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS l1 ON c.Code = l1.CountryCode AND l1.Language = 'English' JOIN countrylanguage AS l2 ON c.Code = l2.CountryCode AND l2.Language = 'French';
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS l1 ON c.Code = l1.CountryCode AND l1.Language = 'English' JOIN countrylanguage AS l2 ON c.Code = l2.CountryCode AND l2.Language = 'French';
SELECT c.Name FROM country AS c JOIN countrylanguage AS l1 ON c.Code = l1.CountryCode AND l1.Language = 'English' JOIN countrylanguage AS l2 ON c.Code = l2.CountryCode AND l2.Language = 'French' WHERE l1.IsOfficial = 'T' AND l2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' AND cl.IsOfficial = 'T') OR (cl.Language = 'French' AND cl.IsOfficial = 'T');
SELECT COUNT(DISTINCT Continent) FROM country WHERE Name = 'China';
SELECT COUNT(DISTINCT Continent) FROM country WHERE Name = 'China';
SELECT Region FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') );
SELECT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' AND cl.IsOfficial = 'T') OR (cl.Language = 'Dutch' AND cl.IsOfficial = 'T');
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY Percentage DESC LIMIT 1;
SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE GovernmentForm = 'Republic' ) AND Language NOT IN ( SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) > 1 );
SELECT DISTINCT l.Language FROM countrylanguage l JOIN country c ON l.CountryCode = c.Code WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage l2 JOIN country c2 ON l2.CountryCode = c2.Code WHERE l2.Language = l.Language AND c2.GovernmentForm != 'Republic' ) AND c.GovernmentForm = 'Republic';
SELECT Name FROM city WHERE Population = (SELECT MAX(Population) FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'));
SELECT Name FROM city WHERE Population = ( SELECT MAX(Population) FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE Language = 'English' );
SELECT c.Name AS CountryName, MAX(c.SurfaceArea) AS LargestArea, MAX(c.Population) AS Population, MAX(c.LifeExpectancy) AS LifeExpectancy FROM country c WHERE Continent = 'Asia' GROUP BY Name;
SELECT c.Name AS CountryName, MAX(c.SurfaceArea) AS LargestSurfaceArea FROM country c WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 );
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 AND IsOfficial = 'T' );
SELECT c.Name FROM country c WHERE c.SurfaceArea > ( SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe' );
SELECT c.Name FROM country c WHERE SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' );
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Africa' AND c.Population < ( SELECT MIN(p.Population) FROM country p WHERE p.Continent = 'Asia' );
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(population) FROM country WHERE Continent = 'Asia');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND cl.Language NOT IN (SELECT l.Language FROM country af JOIN countrylanguage l ON af.Code = l.CountryCode WHERE af.Continent = 'Africa') AND Population > ANY(SELECT MAX(population) FROM country WHERE Continent = 'Africa');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(p.Population) FROM country p WHERE p.Continent = 'Africa');
SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'F';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English' GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 1;
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic' AND cl.IsOfficial IS NULL OR cl.IsOfficial = 'F';
SELECT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND NOT c.GovernmentForm LIKE '%Republic%';
SELECT c.Name AS City FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English' WHERE co.Continent = 'Europe' AND cl.IsOfficial IS NULL OR cl.IsOfficial != 'T';
SELECT Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name AS CountryName, COUNT(cl.Language) AS LanguagesSpoken FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(cl.Language) >= 3;
SELECT c.Name AS CountryName, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING LanguageCount > 2;
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*) AS NumCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population >= 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT c.Population, AVG(c.SurfaceArea) AS AverageSurfaceArea FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT c.Name AS Country, cl.Language, MAX(cl.Percentage) AS MaxPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name, cl.Language;
SELECT c.Code AS CountryCode, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = ( SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = c.Code );
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' );
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language != 'Spanish' );
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT DISTINCT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Orchestra_ID) > 1);
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT DISTINCT Conductor_ID FROM orchestra);
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS NumOfOrchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT COUNT(*), Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;
SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Record_Company, COUNT(Orchestra_ID) as NumOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumOrchestras DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT DISTINCT o.Record_Company FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE (o.Year_of_Founded < 2003 OR o.Year_of_Founded > 2003) AND p.Type NOT LIKE 'Cancelled%';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1 );
SELECT o.Year_of_Founded FROM orchestra o JOIN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1 ) p ON o.Orchestra_ID = p.Orchestra_ID;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT h.ID AS student_id, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT s1.ID, COUNT(f.friend_id) AS friend_count FROM Highschooler s1 LEFT JOIN Friend f ON s1.ID = f.student_id GROUP BY s1.ID;
SELECT h1.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h1 LEFT JOIN Friend f ON h1.ID = f.student_id GROUP BY h1.ID;
SELECT h.name, COUNT(f.friend_id) AS friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1 );
SELECT name FROM Highschooler WHERE ID = ( SELECT friend_id FROM Friend GROUP BY friend_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 );
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 );
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id WHERE f.friend_id = ( SELECT ID FROM Highschooler WHERE name='Kyle' );
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON h2.ID = f.friend_id WHERE h1.name = 'Kyle';
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend );
SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend );
SELECT DISTINCT h1.ID FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.liked_id;
SELECT DISTINCT s1.ID FROM Highschooler s1 JOIN Friend f ON s1.ID = f.student_id JOIN Likes l ON s1.ID = l.student_id;
SELECT DISTINCT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.student_id;
SELECT DISTINCT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.student_id;
SELECT student_id, COUNT(liked_id) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id;
SELECT h1.name, COUNT(l.liked_id) AS num_likes FROM Likes l JOIN Highschooler h1 ON l.student_id = h1.ID GROUP BY h1.name;
SELECT H1.name, COUNT(L.student_id) AS num_likes FROM Likes L JOIN Highschooler H1 ON L.liked_id = H1.ID GROUP BY H1.name;
SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1 );
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2 );
SELECT DISTINCT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 );
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 );
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(g.grade) FROM Highschooler g JOIN Friend f ON g.ID = f.student_id;
SELECT AVG(grade) FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend );
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT O.state, P.state FROM Owners AS O JOIN Professionals AS P ON TRUE;
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' OR ( SELECT COUNT(*) FROM Treatments t WHERE t.professional_id = p.professional_id ) > 2;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE (state = 'Indiana' OR ( SELECT COUNT(*) FROM Treatments t2 WHERE t2.professional_id = Professionals.professional_id ) > 2);
SELECT D.name FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING SUM(T.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT professional_id, role_code, email_address FROM Professionals WHERE NOT EXISTS ( SELECT 1 FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id );
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 ) d ON o.owner_id = d.owner_id;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 ) d ON o.owner_id = d.owner_id;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2 );
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN ( SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id ) t ON o.owner_id = t.dog_id ORDER BY total_cost DESC LIMIT 1;
SELECT t.treatment_type_description FROM Treatment_Types t JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ORDER BY total_cost ASC LIMIT 1 ) tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.treatment_type_description FROM Treatment_Types t JOIN ( SELECT treatment_type_code, MIN(cost_of_treatment) AS min_cost FROM Treatments GROUP BY treatment_type_code ) tt ON t.treatment_type_code = tt.treatment_type_code AND t.treatment_type_description = tt.min_cost;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN ( SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id ) t ON o.owner_id = t.dog_id ORDER BY total_cost DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN ( SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY dog_id ) t ON o.owner_id = t.dog_id ORDER BY total_cost DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(t2.cost_of_treatment) FROM Treatments t2) GROUP BY p.professional_id;
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name AS professional_first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments AS T JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;
SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT O.first_name AS owner_first_name, D.name AS dog_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;
SELECT D.dog_id, D.name, T.date_of_treatment FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE D.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = ( SELECT COUNT(DISTINCT breed_code) FROM Dogs ) );
SELECT D.dog_id, D.name, T.date_of_treatment FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE D.breed_code NOT IN ( SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) > 1 ) ORDER BY T.date_of_treatment DESC;
SELECT D.Owner_id, O.First_Name, D.Name FROM Dogs AS D JOIN Owners AS O ON D.Owner_id = O.Owner_id WHERE O.State = 'Virginia';
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia' AND O.first_name IS NOT NULL AND D.name IS NOT NULL;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = ( SELECT MIN(d2.age) FROM Dogs d2 );
SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.age = (SELECT MIN(D2.age) FROM Dogs D2);
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT dog_id, date_arrived AS arrival_date, date_departed AS departure_date FROM Dogs;
SELECT dog_id, date_arrived AS Arrival_Date, date_departed AS Departure_Date FROM Dogs;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT p.role_code AS Role, p.street AS Street, p.city AS City, p.state AS State FROM Professionals p WHERE p.city LIKE '%West%';
SELECT p.role_code, p.street, p.city, p.state FROM Professionals AS p WHERE p.city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs );
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT MAX(cost_of_treatment) FROM Treatments;
SELECT MAX(cost_of_treatment) FROM Treatments;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);
SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM Treatments );
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM Treatments );
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = '1';
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT `first_name`, `last_name`, `email_address`, `cell_number`, `home_phone` FROM Professionals;
SELECT DISTINCT b.breed_code, s.size_code FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) as NumSingers FROM singer GROUP BY Citizenship ORDER BY NumSingers DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as NumSingers FROM singer GROUP BY Citizenship ORDER BY NumSingers DESC LIMIT 1;
SELECT s.Citizenship, MAX(s.Net_Worth_Millions) AS Max_Net_Worth FROM singer s GROUP BY s.Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT s.Title, Singers.Name FROM song AS s JOIN singer AS Singers ON s.Singer_ID = Singers.Singer_ID;
SELECT s.Title, si.Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID;
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT DISTINCT Singer_ID FROM song WHERE Sales > 300000);
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1);
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1);
SELECT s.Name, SUM(t.Sales) as Total_Sales FROM singer s JOIN song t ON s.Singer_ID = t.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(t.Sales) as Total_Sales FROM Singer s JOIN Song t ON s.Singer_ID = t.Singer_ID GROUP BY s.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year BETWEEN 1945 AND 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year BETWEEN 1945 AND 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT "feature_type_name" FROM "Ref_Feature_Types" WHERE "feature_type_code" = (SELECT "feature_type_code" FROM "Other_Available_Features" WHERE "feature_name" = 'AirCon');
SELECT pt.property_type_description FROM Ref_Property_Types pt JOIN Properties p ON pt.property_type_code = p.property_type_code;
SELECT p.property_name FROM Properties p WHERE (p.property_type_code = 'HSE' OR p.property_type_code = 'APT') AND p.room_count > 1;
