SELECT COUNT(*) AS NumberOfSingers FROM singer;
SELECT COUNT(*) AS Total_Singers FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(s.Age) AS Average_Age, MIN(s.Age) AS Minimum_Age, MAX(s.Age) AS Maximum_Age FROM singer s WHERE s.Country = 'France';
SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = ( SELECT MIN(Age) FROM singer );
SELECT Song_Name, Song_release_year FROM singer WHERE Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;
SELECT MAX(Capacity) AS max_capacity, AVG(Capacity) AS avg_capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*) AS number_of_concerts FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) AS number_of_concerts FROM concert WHERE Year IN ('2014', '2015');
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT s.Name AS Stadium_Name, s.Capacity AS Stadium_Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s JOIN ( SELECT Stadium_ID, COUNT(*) AS ConcertCount FROM concert WHERE Year > '2013' GROUP BY Stadium_ID ) c ON s.Stadium_ID = c.Stadium_ID ORDER BY c.ConcertCount DESC LIMIT 1;
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1;
SELECT "Year" FROM concert GROUP BY "Year" ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2014' WHERE c.concert_ID IS NULL;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2014' WHERE c.concert_ID IS NULL;
SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers FROM concert c LEFT JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(sc.Singer_ID) AS Number_of_Singers FROM concert c JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name AS Singer_Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT s.Name AS Singer_Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name AS Singer_Name, s.Country AS Nation FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Song_Name LIKE '%Hey%';
SELECT s.Name AS Singer_Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN "singer" s2 ON c.Stadium_ID = s2.Stadium_ID WHERE s2.Song_Name LIKE '%Hey%';
SELECT s.Name AS Stadium_Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID, s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT COUNT(*) AS Number_of_Concerts FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );
SELECT COUNT(*) AS Number_of_Concerts FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );
SELECT COUNT(*) AS num_heavy_pets FROM Pets WHERE weight > 10;
SELECT COUNT(*) AS number_of_heavy_pets FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = ( SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog' );
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(H.StuID) AS NumberOfPets FROM Student S JOIN Has_Pet H ON S.StuID = H.StuID WHERE S.Age > 20;
SELECT COUNT(H.StuID) FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(*) AS NumberOfDogPets FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(*) FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS NumberOfDistinctPetTypes FROM Pets;
SELECT COUNT(DISTINCT PetType) AS NumberOfPetTypes FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT s.Fname FROM Student s JOIN Has_Pet hp_cat ON s.StuID = hp_cat.StuID JOIN Pets p_cat ON hp_cat.PetID = p_cat.PetID JOIN Has_Pet hp_dog ON s.StuID = hp_dog.StuID JOIN Pets p_dog ON hp_dog.PetID = p_dog.PetID WHERE p_cat.PetType = 'cat' AND p_dog.PetType = 'dog';
SELECT s.Fname FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Pets p1 ON hp1.PetID = p1.PetID JOIN Has_Pet hp2 ON s.StuID = hp2.StuID JOIN Pets p2 ON hp2.PetID = p2.PetID WHERE p1.PetType = 'cat' AND p2.PetType = 'dog';
SELECT S.Major, S.Age FROM Student S WHERE NOT EXISTS ( SELECT 1 FROM Has_Pet HP INNER JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'cat' );
SELECT S.Major, S.Age FROM Student S WHERE NOT EXISTS ( SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'cat' );
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetID IS NULL;
SELECT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetID IS NULL;
SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' );
SELECT s.Fname FROM Student s WHERE EXISTS ( SELECT 1 FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE hp.StuID = s.StuID AND p.PetType = 'dog' ) AND NOT EXISTS ( SELECT 1 FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE hp.StuID = s.StuID AND p.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROM Pets );
SELECT PetType, weight FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROM Pets );
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaximumAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT S.Fname, S.Age FROM Student S INNER JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT DISTINCT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT p.PetID FROM Has_Pet h JOIN Student s ON h.StuID = s.StuID JOIN Pets p ON h.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT StuID, COUNT(PetID) AS Num_Pets FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 0;
SELECT StuID, COUNT(PetID) AS NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1 ) HP ON S.StuID = HP.StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(s.Age) AS AverageAge FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT AVG(s.Age) AS AverageAge FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.StuID IS NULL;
SELECT COUNT(*) AS NumberOfContinents FROM continents;
SELECT COUNT(*) AS NumberOfContinents FROM continents;
SELECT c.ContId AS ContinentId, c.Continent AS ContinentName, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) AS NumberOfCountries FROM countries;
SELECT cm.Id AS MakerId, cm.FullName AS MakerFullName, COUNT(ml.Model) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT ml.Model AS CarModel, cd.Horsepower AS HorsepowerValue FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower::numeric > 0 -- Ensure we only consider non-zero horsepower values ORDER BY cd.Horsepower::numeric ASC LIMIT 1;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Horsepower IS NOT NULL ORDER BY cd.Horsepower ASC LIMIT 1;
SELECT m.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
WITH avg_weight AS ( SELECT AVG(Weight) AS avg_weight FROM cars_data ), lightest_car AS ( SELECT Id, ModelId, Weight FROM cars_data WHERE Weight < (SELECT avg_weight FROM avg_weight) LIMIT 1 ) SELECT car_names.Model FROM lightest_car JOIN car_names ON lightest_car.Id = car_names.MakeId;
SELECT DISTINCT cm.Maker FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = 1970;
SELECT c.Maker, cd.Year AS ProductionTime FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year = ( SELECT MIN(Year) FROM cars_data );
SELECT c.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers c ON ml.Maker = c.Id WHERE cd.Year = ( SELECT MIN(Year) FROM cars_data );
SELECT DISTINCT m.Model FROM model_list m JOIN cars_data cd ON m.Model = cd.MakeId WHERE cd.Year > 1980;
SELECT DISTINCT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT c.Continent, COUNT(cm.Id) AS CarMakerCount FROM car_makers cm JOIN countries co ON cm.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Id) AS NumberOfCarMakers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName;
SELECT cm.Id AS MakerId, cm.FullName, COUNT(ml.Model) AS NumberOfModelsProduced FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cd.Accelerate FROM cars_data cd JOIN car_names cn ON cd.MakeId = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'amc' AND ml.Model = 'hornet sportabout (sw)';
SELECT cd.Accelerate FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Model = 'amc hornet sportabout (sw)';
SELECT COUNT(*) AS NumberOfCarMakersInFrance FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France';
SELECT COUNT(DISTINCT m.Model) FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA';
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'United States';
SELECT AVG("MPG") AS AverageMPG FROM cars_data WHERE Cylinders = 4;
SELECT AVG(CAST(MPG AS REAL)) AS AverageMPG FROM cars_data WHERE Cylinders = 4;
SELECT MIN(weight) AS smallest_weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(cars_data.Weight) AS MinWeight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT Maker, Model FROM model_list;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN ( SELECT Country FROM car_makers );
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT c.CountryName, COUNT(cm.Id) AS ManufacturerCount FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3;
SELECT c.Make, cd.Horsepower FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Cylinders = 3 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT ml.Model, cd.MPG FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.MPG DESC LIMIT 1;
SELECT m.Model AS Car_Model, cd.MPG AS MPG FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id ORDER BY cd.MPG DESC LIMIT 1;
SELECT AVG(CAST(Horsepower AS REAL)) AS AverageHorsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(CAST(Horsepower AS REAL)) AS AverageHorsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl) AS Average_Edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo');
SELECT AVG(cars_data.Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'VOLVO';
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT m.Model, COUNT(c.MakeId) AS VersionCount FROM car_names cn JOIN model_list m ON cn.Model = m.Model JOIN cars_data c ON cn.MakeId = c.Id GROUP BY m.Model ORDER BY VersionCount DESC LIMIT 1;
SELECT Model, COUNT(*) AS VersionCount FROM model_list GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Year = 1980;
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'American Motor Company';
SELECT COUNT(DISTINCT m.Model) FROM model_list m JOIN car_names cn ON m.Model = cn.Model WHERE cn.Make = 'American Motor Company';
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) > 3;
SELECT DISTINCT ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN cars_data cd ON ml.Model = cd.MakeId WHERE (cm.FullName = 'General Motors' OR cd.Weight > 3500);
SELECT DISTINCT ml.Model FROM model_list ml JOIN cars_data cd ON ml.Model = cd.Model WHERE (ml.Maker = (SELECT Id FROM car_makers WHERE Maker = 'General Motors') OR cd.Weight > 3500);
SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT t1.Year FROM cars_data t1 JOIN ( SELECT Year FROM cars_data WHERE Weight < 4000 UNION ALL SELECT Year FROM cars_data WHERE Weight > 3000 ) t2 ON t1.Year = t2.Year;
SELECT cd.Horsepower FROM cars_data cd WHERE cd.Accelerate = ( SELECT MAX(ac.Accelerate) FROM cars_data ac );
SELECT cd.Horsepower FROM cars_data cd WHERE cd.Accelerate = ( SELECT MAX(ac.Accelerate) FROM cars_data ac );
SELECT cd.Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE ml.Model = 'volvo' ORDER BY cd.Accelerate ASC LIMIT 1;
SELECT cd.Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo' ORDER BY cd.Accelerate ASC LIMIT 1;
WITH fastest_horsepower_car AS ( SELECT Id, Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1 ) SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM fastest_horsepower_car);
SELECT COUNT(*) FROM cars_data cd WHERE cd.Accelerate > ( SELECT MAX(Horsepower::numeric) FROM cars_data );
SELECT COUNT(DISTINCT c.CountryId) AS CountryCount FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2;
SELECT COUNT(DISTINCT c.CountryName) AS NumberOfCountries FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) > 2;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;
SELECT c.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT m.Model, c.Horsepower FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 GROUP BY m.Model, c.Horsepower ORDER BY MAX(c.Horsepower) DESC LIMIT 1;
SELECT cn.MakeId, cm.Maker AS MakeName FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN cars_data cd ON ml.Id = cd.Id JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower::INT > (SELECT MIN(Horsepower::INT) FROM cars_data) AND cd.Cylinders <= 3;
SELECT cm.Id AS MakeId, cm.FullName AS MakeName FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower::INT < (SELECT MIN(Horsepower::INT) FROM cars_data) AND cd.Cylinders < 4;
SELECT MAX("MPG") AS max_mpg FROM "cars_data" WHERE "Cylinders" = 8 OR "Year" < 1980;
SELECT MAX("MPG") AS max_mpg FROM "cars_data" WHERE "Cylinders" = 8 OR "Year" < 1980;
SELECT DISTINCT m.Model FROM model_list m JOIN cars_data cd ON m.ModelId = cd.Id WHERE cd.Weight < 3500 AND NOT EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.Id = m.Maker AND cm.Maker = 'Ford Motor Company' );
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id LEFT JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker != 'Ford';
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Id) = 0;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2 AND COUNT(DISTINCT cm.Id) > 3;
SELECT c.CountryId, c.CountryName FROM countries c WHERE ( (SELECT COUNT(*) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR EXISTS ( SELECT 1 FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = c.CountryId AND ml.Model = 'fiat' ) );
SELECT c.CountryId, c.CountryName FROM countries c WHERE ( -- Countries with more than 3 car makers (SELECT COUNT(*) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR -- Countries that produce a Fiat model EXISTS ( SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Country = c.CountryId AND ml.Model = 'Fiat' ) );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) AS NumberOfAirlines FROM airlines;
SELECT COUNT(*) AS TotalAirlines FROM airlines;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline, Airline AS AirlineName FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) AS NumberOfAirlinesInUSA FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' );
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlightsArrivingInAberdeen FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS sources ON flights.SourceAirport = sources.AirportCode JOIN airports AS destinations ON flights.DestAirport = destinations.AirportCode WHERE sources.City = 'Aberdeen' AND destinations.City = 'Ashley';
SELECT COUNT(*) FROM flights JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE source_airport.City = 'Aberdeen' AND dest_airport.City = 'Ashley';
SELECT COUNT(*) AS NumberOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Abbreviation = 'JB';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportName = 'ASY';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Abbreviation = 'UAL' AND ap.AirportName = 'ASY Airport';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Abbreviation = 'UAL' AND flights.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.Abbreviation = 'UAL' AND p.AirportName = 'AHD Airport';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports dest_airport ON f.DestAirport = dest_airport.AirportCode WHERE a.Abbreviation = 'UAL' AND dest_airport.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports p ON f.DestAirport = p.AirportCode WHERE a.Abbreviation = 'UAL' AND p.City = 'Aberdeen';
SELECT a.City FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY COUNT(f.DestAirport) DESC LIMIT 1;
SELECT a.City, COUNT(f.DestAirport) AS Frequency FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY Frequency DESC LIMIT 1;
SELECT a.City FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY COUNT(f.FlightNo) DESC LIMIT 1;
SELECT a.City FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY COUNT(f.SourceAirport) DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM ( SELECT SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport ) AS FlightCounts ORDER BY FlightCount DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM ( SELECT SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport, COUNT(*) AS FlightCount FROM flights GROUP BY DestAirport ) AS TotalFlightsPerAirport ORDER BY FlightCount DESC LIMIT 1;
SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode, COUNT(*) OVER (PARTITION BY SourceAirport) AS flight_count FROM flights UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) OVER (PARTITION BY DestAirport) AS flight_count FROM flights ) subquery GROUP BY AirportCode, flight_count ORDER BY flight_count ASC LIMIT 1;
SELECT AirportCode FROM ( SELECT SourceAirport AS AirportCode, COUNT(*) OVER (PARTITION BY SourceAirport) AS FlightCount FROM flights UNION ALL SELECT DestAirport AS AirportCode, COUNT(*) OVER (PARTITION BY DestAirport) AS FlightCount FROM flights ) subquery ORDER BY FlightCount ASC LIMIT 1;
SELECT a.Airline, COUNT(f.Airline) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT a.Airline, a.Abbreviation, COUNT(f.Airline) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline, a.Abbreviation ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ) f ON a.uid = f.Airline WHERE f.num_flights = ( SELECT MIN(num_flights) FROM ( SELECT COUNT(*) AS num_flights FROM flights GROUP BY Airline ) flt_counts );
SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) AS flight_count FROM flights f GROUP BY Airline ORDER BY flight_count ASC LIMIT 1 ) f ON a.uid = f.Airline;
SELECT DISTINCT a.Airline, a.Airline AS AirlineName FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT f.Airline, a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline, a.Airline AS AirlineName FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline, a.Airline AS AirlineName FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD';
SELECT f.Airline, a.Airline AS AirlineName FROM flights f JOIN airports apg ON f.SourceAirport = apg.AirportCode AND apg.AirportCode = 'APG' JOIN airports cvo ON f.SourceAirport = cvo.AirportCode AND cvo.AirportCode = 'CVO' GROUP BY f.Airline, a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2;
SELECT f.Airline, a.Airline AS AirlineName FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY f.Airline, a.AirlineName HAVING COUNT(DISTINCT CASE WHEN SourceAirport = 'APG' THEN Airline ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN SourceAirport = 'CVO' THEN Airline ELSE NULL END) > 0;
SELECT DISTINCT a.Airline, a.Abbreviation, a.Country FROM airlines a WHERE EXISTS ( SELECT 1 FROM flights f WHERE f.SourceAirport = 'CVO' AND f.Airline = a.uid ) AND NOT EXISTS ( SELECT 1 FROM flights f WHERE f.SourceAirport = 'APG' AND f.Airline = a.uid );
SELECT DISTINCT a.Airline, a.Airline AS AirlineName FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights f2 WHERE f2.Airline = f.Airline AND f2.SourceAirport = 'APG' );
SELECT a.Airline, a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline HAVING COUNT(*) >= 10) f ON a.uid = f.Airline;
SELECT f.Airline, a.Airline AS AirlineName, COUNT(f.FlightNo) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline, a.Airline HAVING COUNT(f.FlightNo) >= 10;
SELECT a.Airline, a.Abbreviation, a.Country FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.Airline = a.uid) < 200;
SELECT A.Airline, COUNT(F.Airline) AS NumberOfFlights FROM airlines A LEFT JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.Airline) < 200;
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Abbreviation = 'UAL';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights );
SELECT AirportCode, AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT COUNT(*) AS number_of_employees FROM employee;
SELECT COUNT(*) AS Number_of_Employees FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Employee_Count FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT MIN(Number_products) AS Min_Number_of_Products, MAX(Number_products) AS Max_Number_of_Products FROM shop;
SELECT MIN(Number_products) AS MinProducts, MAX(Number_products) AS MaxProducts FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM evaluation e JOIN employee emp ON e.Employee_ID = emp.Employee_ID GROUP BY e.Employee_ID, emp.Name ORDER BY COUNT(e.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM ( SELECT Employee_ID, COUNT(*) AS award_count FROM evaluation GROUP BY Employee_ID ORDER BY award_count DESC LIMIT 1 ) subquery JOIN employee e ON subquery.Employee_ID = e.Employee_ID;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = ( SELECT MAX(Bonus) FROM evaluation );
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = ( SELECT MAX(Bonus) FROM evaluation );
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name AS Shop_Name FROM shop s JOIN ( SELECT Shop_ID, COUNT(*) AS Employee_Count FROM hiring GROUP BY Shop_ID ) h ON s.Shop_ID = h.Shop_ID ORDER BY h.Employee_Count DESC LIMIT 1;
SELECT s.Name AS Shop_Name FROM shop s JOIN ( SELECT Shop_ID, COUNT(Employee_ID) AS Employee_Count FROM hiring GROUP BY Shop_ID ) h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_Count = ( SELECT MAX(Employee_Count) FROM ( SELECT Shop_ID, COUNT(Employee_ID) AS Employee_Count FROM hiring GROUP BY Shop_ID ) subquery );
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name AS Shop_Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees_Hired FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT district FROM shop WHERE district IN ( SELECT district FROM shop WHERE number_products < 3000 ) AND district IN ( SELECT district FROM shop WHERE number_products > 10000 );
SELECT DISTINCT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT district FROM shop WHERE Number_products > 10000;
SELECT COUNT(DISTINCT Location) AS NumberOfDifferentLocations FROM shop;
SELECT COUNT(DISTINCT Location) AS NumberOfDistinctLocations FROM shop;
SELECT COUNT(*) AS Document_Count FROM Documents;
SELECT COUNT(*) AS Document_Count FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d_Template_ID = t.Template_ID WHERE d.Document_Description LIKE '%w%';
SELECT d.Document_Name, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description LIKE '%w%';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d_Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, d.Template_ID, t.Template_Details AS Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT CASE WHEN COUNT(DISTINCT Template_Type_Code) = (SELECT COUNT(DISTINCT Template_ID) FROM Documents) THEN COUNT(DISTINCT Template_Type_Code) ELSE 0 END AS Number_of_Different_Templates_Use_By_All_Documents FROM Templates;
SELECT COUNT(DISTINCT Template_ID) AS NumberOfDifferentTemplatesUsed FROM Documents;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'PPT';
SELECT t.Template_ID, COUNT(d.Document_ID) AS Number_of_Documents FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;
SELECT t.Template_ID, rt.Template_Type_Code, rt.Template_Type_Description FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE t.Template_ID = ( SELECT Template_ID FROM Documents d GROUP BY d.Template_ID ORDER BY COUNT(d.Document_ID) DESC LIMIT 1 );
SELECT t.Template_ID, tt.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE (t.Template_ID, COUNT(d.Document_ID)) IN ( SELECT Template_ID, COUNT(Document_ID) AS Document_Count FROM Documents GROUP BY Template_ID ORDER BY Document_Count DESC LIMIT 1 );
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DOCUMENT_ID) > 1;
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;
SELECT COUNT(*) AS Template_Count FROM Templates;
SELECT COUNT(*) AS Template_Count FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Code = 'CV';
SELECT COUNT(Template_ID) FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'CV';
SELECT t.Version_Number, tt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Version_Number, tt.Template_Type_Code FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE t.Version_Number > 5;
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Number_of_Templates FROM Ref_Template_Types t JOIN Templates te ON t.Template_Type_Code = te.Template_Type_Code GROUP BY t.Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3 );
SELECT t.Template_Type_Code, MIN(t.Version_Number) AS Smallest_Version_Number FROM Templates t GROUP BY t.Template_Type_Code;
SELECT tt.Template_Type_Code, MIN(t.Version_Number) AS Lowest_Version_Number FROM Templates t JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code GROUP BY tt.Template_Type_Code;
SELECT tt.Template_Type_Code FROM Documents d JOIN Templates t ON d_Template_ID = t.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE d.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Ref_Template_Types t JOIN Templates tem ON t.Template_Type_Code = tem.Template_Type_Code JOIN Documents doc ON tem.Template_ID = doc.Template_ID WHERE doc.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS Number_of_Documents FROM Ref_Template_Types t LEFT JOIN Templates tm ON t.Template_Type_Code = tm.Template_Type_Code LEFT JOIN Documents d ON tm.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code;
SELECT r.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY r.Template_Type_Code;
SELECT rt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code ORDER BY Document_Count DESC LIMIT 1;
SELECT Template_Type_Code FROM ( SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ) AS TypeUsage ORDER BY Document_Count DESC LIMIT 1;
SELECT tt.Template_Type_Code FROM Ref_Template_Types tt LEFT JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT tt.Template_Type_Code FROM Ref_Template_Types tt LEFT JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT ttd.Template_Type_Description FROM Ref_Template_Types ttd JOIN Templates t ON ttd.Template_Type_Code = t.Template_Type_Code;
SELECT DISTINCT t.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code;
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;
SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs;
SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.Paragraph_ID, p.Document_ID, p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text = 'Korea ';
SELECT p.Paragraph_ID, p.Paragraph_Text, d.Document_Name, d.Document_Description, d.Other_Details FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Korea %';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID) p ON d.Document_ID = p.Document_ID ORDER BY p.Paragraph_Count DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID) p ON d.Document_ID = p.Document_ID ORDER BY p.Paragraph_Count DESC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM ( SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) AS Document_Paragraph_Count WHERE Paragraph_Count BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%' GROUP BY d.Document_ID HAVING COUNT(*) >= 2;
SELECT COUNT(*) AS number_of_teachers FROM teacher;
SELECT COUNT(*) AS Total_Teachers FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );
SELECT T2.Hometown FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.Hometown FROM teacher t1 JOIN teacher t2 ON t1.Hometown = t2.Hometown AND t1.Teacher_ID < t2.Teacher_ID GROUP BY t1.Hometown HAVING COUNT(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name AS Teacher_Name, c.Course AS Course_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course co ON ca.Course_ID = co.Course_ID;
SELECT t.Name AS Teacher_Name, c.Course AS Course_Name FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name AS Teacher_Name, c.Course AS Course_Name FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_Courses_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(t2.Age) AS Average_Age FROM visit t1 JOIN visitor t2 ON t1.visitor_ID = t2.ID WHERE t2.Level_of_membership <= 4;
SELECT v.Name, v.Level_of_membership FROM visitor v WHERE v.Level_of_membership > 4 ORDER BY v.Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = ( SELECT MAX(Num_of_Staff) FROM museum );
SELECT AVG(Num_of_Staff) AS Average_staff_count FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010' );
SELECT v.ID, v.Name, v.Age FROM visitor v WHERE v.ID IN ( SELECT visitor_ID FROM visit GROUP BY visitor_ID HAVING COUNT(Museum_ID) > 1 );
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN ( SELECT visitor_ID, SUM(Total_spent) AS Total_Spent FROM visit GROUP BY visitor_ID ORDER BY Total_Spent DESC LIMIT 1 ) subq ON v.ID = subq.visitor_ID;
SELECT m.Museum_ID, m.Name FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Num_of_Ticket) DESC LIMIT 1;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;
SELECT v.Name, v.Age FROM visitor v JOIN ( SELECT visitor_ID, MAX(Num_of_Ticket) AS max_tickets FROM visit GROUP BY visitor_ID ) subq ON v.ID = subq.visitor_ID WHERE subq.max_tickets = ( SELECT MAX(Num_of_Ticket) FROM visit );
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit;
SELECT SUM(v.Total_spent) AS Total_ticket_expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;
WITH RelevantMuseums AS ( SELECT Museum_ID FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE "Open_Year" < '2009' ) ), RelevantVisitors AS ( SELECT visitor_ID FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE "Open_Year" > '2011' ) ) SELECT v.Name FROM visitor v JOIN RelevantMuseums rm ON v.ID = rm.visitor_ID JOIN RelevantVisitors rv ON v.ID = rv.visitor_ID;
SELECT COUNT(DISTINCT v.ID) AS num_of_visitors FROM visitor v LEFT JOIN ( SELECT Museum_ID, visitor_ID FROM visit WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE "Open_Year" > '2010' ) ) v_museum ON v.ID = v_museum.visitor_ID WHERE v_museum.Museum_ID IS NULL;
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*) AS player_count FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(loser_rank) AS best_losing_rank FROM matches;
SELECT COUNT(DISTINCT country_code) AS num_distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS number_of_distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS num_distinct_losers FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016);
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE EXTRACT(YEAR FROM tourney_date) IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (m.tourney_name = 'tourney WTA Championships' OR m.tourney_name = 'Australian Open') GROUP BY p.player_id, p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (m.tourney_name = 'WTA Championships' AND m.round IN ('Final', 'F')) OR (m.tourney_name = 'Australian Open' AND m.round IN ('Final', 'F'));
SELECT first_name, country_code FROM players WHERE birth_date = ( SELECT MIN(birth_date) FROM players );
SELECT first_name, country_code FROM players WHERE birth_date = ( SELECT MIN(birth_date) FROM players );
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = ( SELECT MAX(tours) FROM rankings );
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1 ) r ON p.player_id = r.player_id;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT tourney_date::DATE::YEAR AS year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT w.winner_name, w.winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id AS winner_table JOIN ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1 ) subq ON w.winner_id = subq.winner_id;
WITH MostWins AS ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1 ) SELECT p.first_name, p.last_name, r.ranking_points FROM MostWins mw JOIN players p ON mw.winner_id = p.player_id JOIN rankings r ON mw.winner_id = r.player_id;
SELECT p.first_name || ' ' || p.last_name AS player_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT l.loser_name AS loser_name, w.winner_name AS winner_name FROM matches m JOIN players l ON m.loser_id = l.player_id JOIN players w ON m.winner_id = w.player_id WHERE m.minutes = ( SELECT MAX(minutes) FROM matches );
SELECT (SELECT first_name || ' ' || last_name AS winner_name FROM players WHERE player_id = matches.winner_id) AS winner_name, (SELECT first_name || ' ' || last_name AS loser_name FROM players WHERE player_id = matches.loser_id) AS loser_name FROM matches WHERE matches.minutes = ( SELECT MAX(minutes) FROM matches );
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, COALESCE(SUM(r.ranking_points), 0) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS number_of_players FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT EXTRACT(YEAR FROM tourney_date) AS match_year, COUNT(*) AS num_matches FROM matches GROUP BY EXTRACT(YEAR FROM tourney_date) ORDER BY match_year;
SELECT COUNT(*), year FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN ( SELECT winner_id FROM matches ORDER BY winner_age ASC LIMIT 3 ) m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id;
SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN ( SELECT winner_id FROM matches ORDER BY winner_age ASC LIMIT 3 ) m ON p.player_id = m.winner_id LEFT JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'left' AND round ILIKE '%WTA Championships%';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_level = 'WTA' AND players.hand = 'left';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_points FROM matches GROUP BY winner_id ) m ON p.player_id = m.winner_id WHERE p.player_id = m.winner_id AND p.winner_rank_points = m.max_points;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id AS player_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1 ) m ON p.player_id = m.player_id;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*) AS captured_ships_count FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT b.id AS battle_id, MAX(d.killed) OVER (PARTITION BY d.caused_by_ship_id) AS max_death_toll, MIN(d.killed) OVER (PARTITION BY d.caused_by_ship_id) AS min_death_toll FROM death d JOIN ship s ON d.caused_by_ship_id = s.id JOIN battle b ON s.lost_in_battle = b.id;
SELECT AVG(injured) AS average_injuries_per_battle FROM death;
SELECT d.id AS death_id, d.killed AS killed_count, d.injured AS injured_count FROM "ship" s JOIN "death" d ON s.id = d.caused_by_ship_id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id AS battle_id, b.name AS battle_name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id AS ship_id, s.name AS ship_name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(b.id) AS number_of_battles FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage != '225' OR s.tonnage IS NULL;
SELECT b.name AS battle_name, b.date AS battle_date FROM "battle" b JOIN "ship" s1 ON b.id = s1.lost_in_battle AND s1.name = 'Lettice' JOIN "ship" s2 ON b.id = s2.lost_in_battle AND s2.name = 'HMS Atalanta';
SELECT b.name AS battle_name, b.result, b.bulgarian_commander FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.location = 'English Channel' GROUP BY b.id, b.name, b.result, b.bulgarian_commander HAVING COUNT(s.id) = 0;
SELECT d.note FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE d.note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(*) AS number_of_courses FROM Courses;
SELECT course_description FROM Courses WHERE course_name ILIKE '%math%';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) AS number_of_departments_offering_degrees FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS number_of_degree_names FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT COUNT(*) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT c.course_id, c.course_name FROM Courses c WHERE (SELECT COUNT(*) FROM Sections s WHERE s.course_id = c.course_id) <= 2;
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT s.semester_id, s.semester_name FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
WITH SemesterEnrollmentCounts AS ( SELECT s.semester_id, s.semester_name, COUNT(se.student_id) AS student_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ), MaxEnrollmentCount AS ( SELECT MAX(student_count) AS max_student_count FROM SemesterEnrollmentCounts ) SELECT sec.semester_id, sec.semester_name FROM Semesters sec JOIN (SELECT semester_id FROM SemesterEnrollmentCounts WHERE student_count = (SELECT max_student_count FROM MaxEnrollmentCount)) max_sems ON sec.semester_id = max_sems.semester_id;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(dp.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN ( SELECT student_id, semester_id, COUNT(degree_program_id) AS num_enrollments FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2 ) se ON s.student_id = se.student_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%';
SELECT dp.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
WITH EnrolledStudentsCount AS ( SELECT dp.degree_summary_name, COUNT(se.student_id) AS student_count FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ) SELECT degree_summary_name FROM EnrolledStudentsCount ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name AS summary FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name AS summary FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_of_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL GROUP BY s.semester_name;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id WHERE sec.student_enrolment_id IS NOT NULL;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND NOT EXISTS ( SELECT 1 FROM Student_Enrolment se WHERE se.student_id = s.student_id );
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN ( SELECT student_id FROM Student_Enrolment );
SELECT t.transcript_id, t.transcript_date FROM Transcripts t WHERE EXISTS ( SELECT 1 FROM Transcript_Contents tc WHERE tc.transcript_id = t.transcript_id GROUP BY tc.transcript_id HAVING COUNT(tc.student_course_id) >= 2 );
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM Students );
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN ( SELECT student_id, MAX(date_left) AS latest_graduation_date FROM Student_Enrolment se WHERE se.student_id = s.student_id AND se.date_left IS NOT NULL GROUP BY student_id ) subq ON s.student_id = subq.student_id WHERE subq.latest_graduation_date IS NOT NULL;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_left IS NOT NULL ORDER BY s.date_left ASC LIMIT 1;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_print_date FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT t.transcript_date, t.other_details FROM Transcripts t ORDER BY t.transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details, COUNT(*) AS number_of_transcripts FROM Transcripts GROUP BY other_details;
SELECT COUNT(*) AS number_of_transcripts_released FROM Transcripts;
SELECT COUNT(*) AS number_of_transcripts FROM Transcripts;
SELECT MAX(transcript_date) AS latest_transcript_release_date FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT sc.student_course_id, COUNT(tc.transcript_id) AS max_times_in_transcripts FROM Transcript_Contents tc JOIN Student_Enrolment_Courses sc ON tc.student_course_id = sc.student_course_id GROUP BY sc.student_course_id ORDER BY max_times_in_transcripts DESC;
WITH CourseFrequency AS ( SELECT sc.course_id, COUNT(DISTINCT tc.transcript_id) AS transcript_count FROM Student_Enrolment_Courses sc JOIN Transcript_Contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.course_id ) SELECT course_id, MAX(transcript_count) AS max_transcripts FROM CourseFrequency GROUP BY course_id ORDER BY max_transcripts DESC;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN ( SELECT transcript_id, COUNT(student_course_id) AS result_count FROM Transcript_Contents GROUP BY transcript_id ) tc ON t.transcript_id = tc.transcript_id ORDER BY tc.result_count ASC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN ( SELECT transcript_id, COUNT(*) AS content_count FROM Transcript_Contents GROUP BY transcript_id ) tc ON t.transcript_id = tc.transcript_id ORDER BY tc.content_count ASC LIMIT 1;
SELECT s.semester_name, COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Master%' THEN se.student_id END) AS master_students_count, COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Bachelor%' THEN se.student_id END) AS bachelor_students_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Students st ON se.student_id = st.student_id WHERE d.degree_summary_name LIKE '%Master%' OR d.degree_summary_name LIKE '%Bachelor%' GROUP BY s.semester_name HAVING COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Master%' THEN se.student_id END) > 0 AND COUNT(DISTINCT CASE WHEN d.degree_summary_name LIKE '%Bachelor%' THEN se.student_id END) > 0;
SELECT s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY s.semester_id HAVING COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Masters' THEN se.student_id END) > 0 AND COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Bachelors' THEN se.student_id END) > 0;
SELECT COUNT(DISTINCT current_address_id) AS number_of_unique_addresses FROM Students;
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN ( SELECT current_address_id FROM Students );
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT student_id, first_name, middle_name, last_name, current_address_id, permanent_address_id, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students WHERE country = 'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT id, Title, Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by, Original_air_date FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(id) AS Number_of_TV_Channels FROM "TV_Channel" GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name, Content) AS number_of_different_series_and_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name, Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(id) AS NumTVChannels FROM TV_Channel GROUP BY Language ORDER BY NumTVChannels ASC LIMIT 1;
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(id) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT tc.series_name FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.Title = 'The Rise of the Blue Beetle!';
SELECT tc.series_name FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.Title = 'The Rise of the Blue Beetle';
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN("Share") AS Minimum_Share, MAX("Share") AS Maximum_Share FROM "TV_series";
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT tc.series_name FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE ts.Episode = 'A Love of a Lifetime';
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';
SELECT ts.Episode FROM TV_series ts JOIN TV_Channel tc ON ts.Channel = tc.id WHERE tc.series_name = 'Sky Radio';
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT c.Production_code, c.Channel FROM Cartoon c JOIN ( SELECT Channel, MAX(Air_Date) AS Latest_Air_Date FROM TV_series WHERE Channel IN (SELECT Channel FROM Cartoon) GROUP BY Channel ) ts ON c.Channel = ts.Channel AND c.Air_Date = ts.Latest_Air_Date;
SELECT c.Production_code, tc.Channel FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE c.Air_Date = ( SELECT MAX(T2.Air_Date) FROM Cartoon T2 );
SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'Yes';
SELECT tc.Package_Option, ts.series_name FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE tc.Hight_definition_TV = 'Yes';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by != 'Todd Casey' OR T2.Written_by IS NULL;
SELECT DISTINCT Country FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE NOT EXISTS ( SELECT 1 FROM Cartoon WHERE Written_by = 'Todd Casey' );
SELECT DISTINCT tvc.series_name, tvc.Country FROM TV_Channel tvc JOIN Cartoon c ON tvc.id = c.Channel WHERE cDirected_by IN ('Ben Jones', 'Michael Chang');
SELECT tc.series_name, tc.Country FROM "TV_Channel" tc JOIN "Cartoon" c1 ON tc.id = c1.Channel AND c1Directed_by = 'Ben Jones' JOIN "Cartoon" c2 ON tc.id = c2.Channel AND c2Directed_by = 'Michael Chang' GROUP BY tc.series_name, tc.Country HAVING COUNT(DISTINCT c1.id) > 0 AND COUNT(DISTINCT c2.id) > 0;
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT DISTINCT tc.id FROM TV_Channel tc WHERE tc.Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2 );
SELECT tc.id FROM "TV_Channel" tc WHERE EXISTS ( SELECT 1 FROM ( SELECT Channel AS channel_id FROM "TV_series" UNION ALL SELECT Channel AS channel_id FROM "Cartoon" ) subquery WHERE subquery.channel_id = tc.id GROUP BY subquery.channel_id HAVING COUNT(subquery.channel_id) > 2 );
SELECT tc.id FROM "TV_Channel" tc LEFT JOIN "Cartoon" c ON tc.id = c.Channel WHERE cDirected_by IS NULL;
SELECT tc.id FROM "TV_Channel" tc LEFT JOIN "Cartoon" c ON tc.id = c.Channel WHERE cDirected_by IS NULL;
SELECT DISTINCT tc.Package_Option FROM TV_Channel tc LEFT JOIN Cartoon c ON tc.id = c.Channel WHERE cDirected_by IS NULL;
SELECT DISTINCT tc.Package_Option FROM TV_Channel tc LEFT JOIN Cartoon c ON tc.id = c.Channel WHERE c.Channel IS NULL;
SELECT COUNT(*) AS NumberOfPokerPlayers FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT Money_Rank FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT MAX(Final_Table_Made) AS Max_Final_Tables_Made FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) AS Max_Final_Tables_Made FROM poker_player WHERE Earnings < 200000;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT p.Name FROM people p;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.Poker_Player_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.Poker_Player_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = ( SELECT MAX(Height) FROM people );
SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1;
SELECT AVG(p.Earnings) AS Average_Earnings FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;
SELECT AVG(pp.Earnings) AS Average_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Nationality, COUNT(*) AS Number_of_People FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY p.Nationality;
SELECT p.Nationality, COUNT(*) AS Number_of_People FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality;
SELECT p.Nationality FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality ORDER BY COUNT(p.Nationality) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p1.Nationality FROM people p1 JOIN people p2 ON p1.Nationality = p2.Nationality AND p1.People_ID < p2.People_ID GROUP BY p1.Nationality HAVING COUNT(*) >= 2;
SELECT p.Nationality FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Nationality HAVING COUNT(pp.Poker_Player_ID) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) AS NumberOfDistinctNationalities FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) AS number_of_states FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_created_date FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN ( SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2 ) v ON c.contestant_number = v.contestant_number;
SELECT c.contestant_number, c.contestant_name FROM ( SELECT contestant_number, COUNT(*) AS vote_count, ROW_NUMBER() OVER (ORDER BY COUNT(*) ASC) as row_num FROM VOTES GROUP BY contestant_number ) subq JOIN CONTESTANTS c ON subq.contestant_number = c.contestant_number WHERE subq.row_num = 1;
SELECT state, COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA') GROUP BY state;
SELECT COUNT(c.contestant_number) AS number_of_unvoted_contestants FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.vote_id IS NULL;
SELECT area_code FROM ( SELECT ac.area_code, COUNT(v.vote_id) AS vote_count, RANK() OVER (ORDER BY COUNT(v.vote_id) DESC) as rank FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state GROUP BY ac.area_code ) subquery WHERE rank = 1;
SELECT v.created, v.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling';
SELECT ac.area_code FROM VOTES v1 JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN AREA_CODE_STATE ac ON v1.state = ac.state WHERE c1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT ac.area_code FROM VOTES v2 JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number JOIN AREA_CODE_STATE ac ON v2.state = ac.state WHERE c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'North America' AND Region = 'Caribbean';
SELECT c.Continent FROM city AS ci JOIN country AS co ON ci.CountryCode = co.Code WHERE ci.Name = 'Anguilla';
SELECT c.Continent FROM country AS c JOIN city AS ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Anguilla';
SELECT c.Region FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';
SELECT c.Region FROM city AS ci JOIN country AS c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT c.Region, c.Population FROM country c WHERE c.Name = 'Angola';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND Region = 'Central';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT SUM(population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT (SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')) AS Population_in_Asia, (SELECT MAX(GNP) FROM country WHERE Continent = 'Asia') AS Largest_GNP;
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(city.Population) AS TotalPopulation FROM city WHERE city.District = 'Gelderland';
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP) AS mean_gnp, SUM(Population) AS total_population FROM country WHERE Code IN ('VI', 'AS', 'MP', 'PR', 'GU') -- Example codes for U.S. territories;
SELECT COUNT(DISTINCT Language) AS UniqueLanguagesCount FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(*) AS language_count FROM countrylanguage GROUP BY CountryCode ORDER BY language_count DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode;
SELECT c.Name AS NationName, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT c.Continent, SUM(lang_count) AS TotalLanguages FROM ( SELECT CountryCode, COUNT(Language) AS lang_count FROM countrylanguage GROUP BY CountryCode ) cl JOIN country c ON cl.CountryCode = c.Code GROUP BY c.Continent ORDER BY TotalLanguages DESC LIMIT 1;
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT cl.Language, COUNT(DISTINCT c.Code) AS NationCount FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY NationCount DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT c.Name AS CityName, cl.Language, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name AS CityName, cl.Language, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT c.Name AS CountryName, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' AND c.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia' );
SELECT AVG(country.LifeExpectancy) AS AverageLifeExpectancy FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F';
SELECT AVG(c LifeExpectancy) AS MeanLifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT SUM(c.Population) AS TotalPopulation FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE NOT EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT SUM(c.Population) AS TotalPopulation FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' GROUP BY c.Code HAVING COUNT(cl.CountryCode) = 0;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 );
SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < ALL ( SELECT c2.Population FROM country AS c2 WHERE c2.Continent = 'Asia' );
SELECT c1.Name AS African_Country FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < ALL ( SELECT c2.Population FROM country c2 WHERE c2.Continent = 'Asia' );
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > ( SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa' );
SELECT DISTINCT c.Code AS CountryCode FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND NOT cl.IsOfficial = 'T';
SELECT DISTINCT c.Code AS CountryCode FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English';
SELECT DISTINCT c.Code FROM country c JOIN city ci ON c.Code = ci.CountryCode JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English';
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm NOT LIKE '%Republic%' AND cl.Language != 'English' AND cl.IsOfficial = 'T';
SELECT c.Name AS CityName FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT c.Name AS CityName FROM city c JOIN countrylanuage cl ON c.CountryCode = cl.CountryCode JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT DISTINCT c.Name AS CityName FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name AS CityName FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = ( SELECT MIN(Population) FROM country );
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = ( SELECT MIN(Population) FROM country );
SELECT c1.Population, c1.Name, c1.HeadOfState AS Leader FROM country c1 WHERE c1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country c2 );
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT c.Name AS CountryName, COUNT(cl.Language) AS NumberOfLanguagesSpoken FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;
SELECT c.Name AS CountryName, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS NumberOfCitiesAboveAveragePopulation FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*) AS NumberOfCitiesAboveAverage FROM ( SELECT District FROM city WHERE Population > (SELECT AVG(Population) FROM city) ) AS AboveAverageCities GROUP BY District;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, SurfaceArea AS Area FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT c.Name FROM country c ORDER BY c.Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT c.Name FROM country c WHERE c.Continent = 'Europe' AND c.Population = 80000;
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Europe' AND ci.Population = 80000;
SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population) AS TotalPopulation, AVG(surfacearea) AS AverageSurfaceArea FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT Name, Population FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(*) AS NumberOfCountries FROM countrylanguage GROUP BY Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT Language, COUNT(CountryCode) AS NumberOfCountries FROM countrylanguage GROUP BY Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT c.Name AS Country, cl.Language AS Language, cl.Percentage AS Percentage FROM countrylanguage cl JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) max_cl ON cl.CountryCode = max_cl.CountryCode AND cl.Percentage = max_cl.MaxPercentage;
SELECT c.Code AS CountryCode, cl.Language, cl.Percentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = cl.CountryCode );
SELECT COUNT(DISTINCT c.Code) FROM ( SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = ( SELECT MAX(Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = cl1.CountryCode ) ) AS max_spanish_percentage JOIN country c ON max_spanish_percentage.CountryCode = c.Code;
SELECT COUNT(*) AS NumberOfSpanishSpeakingCountries FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' OR cl.Language = 'Spanish/ Castilian' GROUP BY cl.CountryCode ORDER BY MAX(cl.Percentage) DESC LIMIT 1;
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT COUNT(*) AS NumberOfConductors FROM conductor;
SELECT COUNT(*) AS NumberOfConductors FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT MAX(CAST(share AS REAL)) AS max_share, MIN(CAST(share AS REAL)) AS min_share FROM performance WHERE type != 'Live final';
SELECT MIN(CAST(Share AS REAL)) AS Min_Share, MAX(CAST(Share AS REAL)) AS Max_Share FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS NumberOfDifferentNationalities FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name, EXTRACT(YEAR FROM AGE(CURRENT_DATE, Year_of_Work)) AS Years_Worked FROM conductor ORDER BY Years_Worked DESC;
SELECT Name FROM conductor WHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM conductor );
SELECT c.Name FROM conductor c ORDER BY (c.Year_of_Work - c.Age) DESC LIMIT 1;
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS NumberOfOrchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras_Managed FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS Format_Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Format_Count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003 GROUP BY Record_Company HAVING COUNT(CASE WHEN Year_of_Founded < 2003 THEN 1 END) > 0 AND COUNT(CASE WHEN Year_of_Founded > 2003 THEN 1 END) > 0;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT COUNT(*) AS number_of_highschoolers FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT h.ID, COUNT(f.friend_id) AS num_of_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT h.ID, h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id ) f ON h.ID = f.student_id ORDER BY f.num_friends DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id ) f ON h.ID = f.student_id ORDER BY f.num_friends DESC LIMIT 1;
SELECT h.name FROM Highschooler h WHERE h.ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 );
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT f.friend_id AS friend_name FROM Friend f JOIN Highschooler h ON f.friend_id = h.ID WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT f2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler f2 ON f.friend_id = f2.ID WHERE h1.name = 'Kyle';
SELECT COUNT(friend_id) AS number_of_friends FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(friend_id) AS num_friends FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT h.ID FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.friend_id IS NULL;
SELECT hs.ID FROM Highschooler hs LEFT JOIN Friend f ON hs.ID = f.student_id WHERE f.friend_id IS NULL;
SELECT h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;
SELECT h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;
SELECT hs.ID FROM Highschooler hs WHERE EXISTS ( -- Check if the high schooler has any friends SELECT 1 FROM Friend f WHERE f.student_id = hs.ID OR f.friend_id = hs.ID ) AND EXISTS ( -- Check if the high schooler is liked by someone else SELECT 1 FROM Likes l WHERE l.liked_id = hs.ID AND l.student_id != hs.ID );
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name HAVING COUNT(F.friend_id) > 0 AND COUNT(L.liked_id) > 0;
SELECT h.name FROM Highschooler h WHERE EXISTS ( SELECT 1 FROM Friend f WHERE f.student_id = h.ID ) AND EXISTS ( SELECT 1 FROM Likes l WHERE l.student_id = h.ID );
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id;
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.name HAVING COUNT(l.student_id) > 0;
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id ORDER BY like_count DESC LIMIT 1 ) l ON h.ID = l.student_id;
SELECT h.name FROM Highschooler h JOIN ( SELECT liked_id, COUNT(*) AS like_count FROM Likes GROUP BY liked_id ORDER BY like_count DESC LIMIT 1 ) l ON h.ID = l.liked_id;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(*) AS like_count FROM Likes L JOIN Highschooler H ON L.liked_id = H.ID WHERE H.name = 'Kyle';
SELECT COUNT(*) AS like_count FROM Likes L JOIN Highschooler H ON L.student_id = H.ID WHERE H.name = 'Kyle';
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT MIN(h.grade) AS min_grade FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f);
SELECT MIN(H.grade) AS lowest_grade FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id WHERE F.friend_id IS NULL;
SELECT o.state AS state_with_owners_and_professionals FROM Owners o JOIN Professionals p ON o.state = p.state GROUP BY o.state HAVING COUNT(o.owner_id) > 0 AND COUNT(p.professional_id) > 0;
SELECT o.state AS owner_state FROM Owners o JOIN Professionals p ON o.state = p.state GROUP BY o.state;
SELECT AVG(D.age::numeric) AS average_age FROM Dogs D WHERE D.dog_id IN ( SELECT T.dog_id FROM Treatments T );
SELECT AVG(DATEDIFF('now', date_of_birth)) AS average_age_in_days FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM ( SELECT professional_id, COUNT(*) AS treatment_count FROM Treatments GROUP BY professional_id ) AS TreatmentCounts WHERE treatment_count > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE (p.state = 'Indiana' OR (p.professional_id IN ( SELECT professional_id FROM Treatments t GROUP BY professional_id HAVING COUNT(t.treatment_id) > 2 )) );
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS names WHERE first_name NOT IN ( SELECT name FROM Dogs );
SELECT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS combined_names EXCEPT SELECT name FROM Dogs;
SELECT p.professional_id, p.role_code AS role, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id AND t.dog_id IS NOT NULL WHERE t.treatment_id IS NULL;
SELECT p.professional_id, p.role_code AS role, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id AND t.dog_id IS NOT NULL WHERE t.treatment_id IS NULL;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN ( SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) d ON o.owner_id = d.owner_id;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p WHERE (SELECT COUNT(*) FROM Treatments t WHERE t.professional_id = p.professional_id) >= 2;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ) t ON tt.treatment_type_code = t.treatment_type_code ORDER BY t.total_cost ASC LIMIT 1;
SELECT ttd.treatment_type_description FROM Treatment_Types ttd JOIN ( SELECT treatment_type_code, MIN(cost_of_treatment) AS min_cost FROM Treatments GROUP BY treatment_type_code ) t ON ttd.treatment_type_code = t.treatment_type_code WHERE t.min_cost = (SELECT MIN(cost_of_treatment) FROM Treatments);
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN ( SELECT t.dog_id, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t GROUP BY t.dog_id ORDER BY total_cost DESC LIMIT 1 ) subq ON d.dog_id = subq.dog_id;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN ( SELECT dog_id, SUM(charge_amount) AS total_spent FROM Charges c GROUP BY dog_id ORDER BY total_spent DESC LIMIT 1 ) ch ON d.dog_id = ch.dog_id;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) > 1;
WITH AverageCost AS ( SELECT AVG(cost_of_treatment) AS avg_cost FROM Treatments ) SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT avg_cost FROM AverageCost);
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.date_of_treatment, p.first_name AS operating_professional_first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT o.first_name, o.last_name, d.size_code AS "size_of_dog" FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, o.last_name, d.size_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name AS owner_first_name, d.name AS dog_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name AS owner_first_name, d.name AS dog_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
WITH RareBreed AS ( SELECT b.breed_name, COUNT(d.dog_id) AS dog_count FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY dog_count ASC LIMIT 1 ) SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN RareBreed rb ON d.breed_code = rb.breed_name;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT o.first_name AS owner_first_name, d.name AS dog_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT o.first_name AS owner_first_name, d.name AS dog_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = ( SELECT MIN(age) FROM Dogs );
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = ( SELECT MIN(age) FROM Dogs );
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived AS arrival_date, date_departed AS departure_date FROM Dogs;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_with_treatment FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_with_treatment FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) AS number_of_dogs_below_average_age FROM Dogs WHERE CAST(age AS DECIMAL) < ( SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs );
SELECT COUNT(*) AS number_of_dogs_below_average_age FROM Dogs WHERE CAST(age AS INTEGER) < ( SELECT AVG(CAST(age AS INTEGER)) FROM Dogs );
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = ( SELECT MAX(date_of_treatment) FROM Treatments );
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = ( SELECT MAX(date_of_treatment) FROM Treatments );
SELECT COUNT(dog_id) AS number_of_dogs_without_treatment FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT COUNT(dog_id) AS number_of_dogs_without_treatment FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT COUNT(*) AS number_of_owners_temporarily_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id AND d.date_departed IS NULL WHERE d.dog_id IS NULL;
SELECT COUNT(*) AS num_owners_without_dogs FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.dog_id IS NULL;
SELECT COUNT(professional_id) FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.treatment_id IS NULL;
SELECT COUNT(*) AS num_professionals_without_treatments FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.treatment_id IS NULL;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(age::numeric) AS average_age FROM Dogs;
SELECT AVG(CAST(age AS INTEGER)) AS average_age FROM Dogs;
SELECT MAX(age) AS oldest_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT first_name, last_name, email_address, home_phone, cell_number FROM Professionals;
SELECT b.breed_name, s.size_description FROM Breeds b JOIN Sizes s ON 1=1;
SELECT DISTINCT d.breed_code, s.size_code FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT p.first_name, t.treatment_type_description FROM Professionals p JOIN Treatments tr ON p.professional_id = tr.professional_id JOIN Treatment_Types tt ON tr.treatment_type_code = tt.treatment_type_code;
SELECT p.first_name AS professional_first_name, tt.treatment_type_description AS treatment_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(*) AS Number_of_Singers FROM singer;
SELECT COUNT(*) AS singer_count FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer WHERE Net_Worth_Millions = ( SELECT MAX(Net_Worth_Millions) FROM singer );
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer s WHERE s.Singer_ID IN ( SELECT Song_ID FROM song WHERE Sales > 300000 );
SELECT DISTINCT s.Name FROM singer s JOIN ( SELECT Singer_ID, SUM(Sales) as Total_Sales FROM song GROUP BY Singer_ID HAVING SUM(Sales) > 300000 ) subq ON s.Singer_ID = subq.Singer_ID;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name HAVING COUNT(sg.Title) > 1;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name HAVING COUNT(sg.Title) > 1;
SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(song.Sales) AS Total_Sales FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Singer_ID IS NULL;
SELECT s.Name AS sname FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1;
SELECT COUNT(*) AS total_features FROM Other_Available_Features;
SELECT rft.feature_type_name FROM Ref_Feature_Types rft JOIN Other_Available_Features oaf ON rft.feature_type_code = oaf.feature_type_code WHERE oaf.feature_name = 'AirCon';
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'code';
SELECT p.property_name FROM Properties p JOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code WHERE (rpt.property_type_description IN ('apartment', 'house')) AND p.room_count > 1;
