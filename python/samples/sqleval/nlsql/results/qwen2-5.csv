question,query,db_name,query_category,instructions,db_type,generated_query,reason,error_msg,exact_match,correct,error_query_gen,error_db_exec,timeout,latency_seconds,tokens_used,k_shot_prompt,glossary,table_metadata_string,table_aliases,prev_invalid_sql,prev_error_msg,question_0,query_0,question_1,query_1,cot_instructions,cot_pregen,cost_in_cents
What is the average number of citations received by publications in each year?,"SELECT publication.year, AVG(publication.citation_num) AS average_citations FROM publication GROUP BY publication.year ORDER BY publication.year NULLS LAST;",academic,group_by,,postgres,"SELECT YEAR,
       AVG(citation_num) AS average_citations_per_year
FROM publication
GROUP BY YEAR;",,,0,1,0,0,0,4.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the average number of references cited by publications in each domain name?,"SELECT {domain.name,domain.did}, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY {};",academic,group_by,,postgres,"SELECT d.name AS domain_name,
       AVG(p.reference_num) AS avg_references_per_publication
FROM publication p
JOIN domain_publication dp ON p.pid = dp.pid
JOIN DOMAIN d ON dp.did = d.did
GROUP BY d.name;",,,0,1,0,0,0,6.24,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of citations received by each author?,"SELECT {author.name, author.aid}, sum(publication.citation_num) AS total_citations FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid GROUP BY {} ORDER BY total_citations DESC NULLS LAST;SELECT {a.aid, a.name}, COUNT(c.cited) AS total_citations FROM author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN cite c ON p.pid = c.cited GROUP BY {} ORDER BY total_citations DESC;SELECT {a.aid, a.name}, COALESCE(SUM(p.citation_num), 0) AS total_citations FROM author a LEFT JOIN writes w ON a.aid = w.aid LEFT JOIN publication p ON w.pid = p.pid GROUP BY {};SELECT {a.aid, a.name}, COALESCE(SUM(p.citation_num), 0) AS total_citations FROM author a LEFT JOIN writes w ON a.aid = w.aid LEFT JOIN publication p ON w.pid = p.pid GROUP BY {};",academic,group_by,,postgres,"SELECT a.name AS author_name,
       SUM(p.citation_num) AS total_citations
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN publication p ON w.pid = p.pid
GROUP BY a.name;",,,0,1,0,0,0,5.64,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of publications published in each year?,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS total_publications FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS num_publications
FROM publication
GROUP BY YEAR;",,,0,1,0,0,0,4.17,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"Which authors have written publications in both the domain ""Machine Learning"" and the domain ""Data Science""?","SELECT {author.name,author.aid} FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science') ) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);",academic,group_by,,postgres,"SELECT DISTINCT w.author_id
FROM
  (SELECT da.author_id,
          d.name AS domain_name
   FROM domain_author da
   JOIN DOMAIN d ON da.domain_id = d.id
   WHERE d.name IN ('Machine Learning',
                    'Data Science')) AS author_domain_pairs
JOIN writes w ON author_domain_pairs.author_id = w.author_id
GROUP BY w.author_id
HAVING COUNT(DISTINCT author_domain_pairs.domain_name) = 2;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column da.domain_id does not exist
LINE 6:    JOIN DOMAIN d ON da.domain_id = d.id
                            ^

[SQL: SELECT DISTINCT w.author_id
FROM
  (SELECT da.author_id,
          d.name AS domain_name
   FROM domain_author da
   JOIN DOMAIN d ON da.domain_id = d.id
   WHERE d.name IN ('Machine Learning',
                    'Data Science')) AS author_domain_pairs
JOIN writes w ON author_domain_pairs.author_id = w.author_id
GROUP BY w.author_id
HAVING COUNT(DISTINCT author_domain_pairs.domain_name) = 2;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.51,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What are the names of the authors who have written publications in the domain ""Computer Science""?",SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name ilike '%computer%science%';,academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
You must also filter names using ILIKE.
",postgres,"SELECT DISTINCT a.name
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN domain_author da ON a.aid = da.aid
JOIN DOMAIN d ON da.did = d.did
WHERE d.name = 'Computer Science';",,,0,1,0,0,0,5.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?,"SELECT DISTINCT {publication.title, publication.pid} FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE domain.name ILIKE '%Sociology%' AND publication.year = 2020 AND publication.cid = domain_conference.cid;",academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
Finally, to see which ones were presented at conferences, you must join the domain table with the domain_conference table.
You must also filter names using ILIKE.
",postgres,"SELECT p.title,
       p.year,
       c.name AS conference_name
FROM publication p
JOIN conference c ON p.cid = c.cid
JOIN domain_publication dp ON p.pid = dp.pid
JOIN domain_author da ON da.aid =
  (SELECT aid
   FROM writes
   WHERE pid = p.pid)
JOIN DOMAIN d ON da.did = d.did
WHERE d.name = 'Sociology'
  AND p.year = 2020;",,INCORRECT RESULTS,0,0,0,0,0,7.34,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which authors are not part of any organization?,"SELECT DISTINCT {name, aid} FROM author WHERE oid IS NULL",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT a.name
FROM author a
LEFT JOIN
ORGANIZATION o ON a.oid = o.oid
WHERE o.oid IS NULL;",,,0,1,0,0,0,5.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which authors belong to the same domain as Martin?,"SELECT DISTINCT {a2.name, a2.aid} FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%';SELECT DISTINCT a2.name, a2.aid FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%' AND a2.name NOT ILIKE '%martin%';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE with percent sign wildcards
",postgres,"SELECT a.name
FROM author a
JOIN domain_author da ON a.aid = da.aid
WHERE da.did =
    (SELECT did
     FROM author a
     JOIN domain_author da ON a.aid = da.aid
     WHERE a.name = 'Martin');",,INCORRECT RESULTS,0,0,0,0,0,5.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"Which organizations have authors who have written publications in the domain ""Machine Learning""?","SELECT DISTINCT {organization.name, organization.oid} FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using an exact match
",postgres,"SELECT DISTINCT o.name AS organization_name
FROM
ORGANIZATION o
JOIN author a ON o.oid = a.oid
JOIN writes w ON a.aid = w.aid
JOIN domain_author da ON a.aid = da.aid
JOIN DOMAIN d ON da.did = d.did
WHERE d.name = 'Machine Learning';",,,0,1,0,0,0,6.62,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the titles of all publications ordered alphabetically?,SELECT DISTINCT publication.title FROM publication ORDER BY publication.title ASC NULLS LAST;,academic,order_by,,postgres,"SELECT title
FROM publication
ORDER BY title ASC;",,,0,1,0,0,0,3.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the top 3 publications with the highest number of citations?,"SELECT {publication.title, publication.pid}, publication.citation_num FROM publication ORDER BY publication.citation_num DESC LIMIT 3;",academic,order_by,,postgres,"SELECT p.title,
       p.citation_num
FROM publication p
ORDER BY p.citation_num DESC
LIMIT 3;",,,0,1,0,0,0,4.55,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?",SELECT publication.title FROM publication ORDER BY publication.reference_num DESC LIMIT 3;,academic,order_by,,postgres,"SELECT p.title
FROM publication p
ORDER BY p.reference_num DESC
LIMIT 3;",,,0,1,0,0,0,4.81,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the top 5 domains with the highest number of authors associated with them?,"SELECT {d.name, d.did}, COUNT(DISTINCT a.aid) AS author_count FROM author a JOIN domain_author da ON a.aid = da.aid JOIN domain d ON da.did = d.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;SELECT {d.name, d.did}, COUNT(da.aid) AS author_count FROM DOMAIN AS d JOIN domain_author AS da ON d.did = da.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;",academic,order_by,,postgres,"SELECT d.name AS domain_name,
       COUNT(da.aid) AS author_count
FROM DOMAIN d
JOIN domain_author da ON d.did = da.did
GROUP BY d.name
ORDER BY author_count DESC
LIMIT 5;",,,0,1,0,0,0,6.20,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the title of the publication that has received the highest number of citations?,SELECT publication.title FROM publication ORDER BY publication.citation_num DESC NULLS LAST LIMIT 1;,academic,order_by,,postgres,"SELECT title
FROM publication
WHERE citation_num =
    (SELECT MAX(citation_num)
     FROM publication);",,,0,1,0,0,0,4.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How does the ratio of authors to organizations differ by continent?,"SELECT organization.continent, COUNT(DISTINCT author.aid)::float / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC NULLS LAST;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;",academic,ratio,,postgres,"SELECT o.continent,
       COUNT(DISTINCT a.aid) / COUNT(DISTINCT o.oid) AS author_to_organization_ratio
FROM author a
JOIN
ORGANIZATION o ON a.oid = o.oid
GROUP BY o.continent;",,INCORRECT RESULTS,0,0,0,0,0,5.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,ratio,,postgres,"SELECT p.year AS publication_year,
       COUNT(p.pid) AS num_publications,
       COUNT(j.jid) AS num_journals,
       (COUNT(p.pid) * 1.0 / COUNT(j.jid))::numeric(10, 2) AS ratio_publications_to_journals
FROM publication p
LEFT JOIN journal j ON p.jid = j.jid
GROUP BY p.year
ORDER BY p.year;",,INCORRECT RESULTS,0,0,0,0,0,6.57,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of publications presented in conferences to publications published in journals?,"SELECT CAST(COUNT(DISTINCT CASE WHEN cid IS NOT NULL THEN pid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN jid IS NOT NULL THEN pid END), 0) AS ratio FROM publication;",academic,ratio,,postgres,"SELECT (SUM(CASE
                WHEN p.cid IS NOT NULL THEN 1
                ELSE 0
            END) * 1.0 / SUM(CASE
                                 WHEN p.jid IS NOT NULL THEN 1
                                 ELSE 0
                             END)) AS conference_to_journal_ratio
FROM publication p;",,,0,1,0,0,0,5.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of publications to authors in the database?,"SELECT CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;",academic,ratio,,postgres,"SELECT
  (SELECT COUNT(DISTINCT pid)
   FROM publication) AS num_publications,

  (SELECT COUNT(DISTINCT aid)
   FROM writes) AS num_authors,

  (SELECT COUNT(DISTINCT pid)
   FROM publication) / NULLIF(
                                (SELECT COUNT(DISTINCT aid)
                                 FROM writes), 0) AS ratio
FROM generate_series(1, 1);",,,0,1,0,0,0,5.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.,"SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_publication LEFT JOIN domain_keyword ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_keyword LEFT JOIN domain_publication ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT d.did, COALESCE(CAST(COUNT(DISTINCT dp.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT dk.kid), 0), 0) AS publication_to_keyword_ratio FROM domain d LEFT JOIN domain_publication dp ON d.did = dp.did LEFT JOIN domain_keyword dk ON d.did = dk.did GROUP BY d.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;",academic,ratio,,postgres,"SELECT d.did,
       COUNT(DISTINCT p.pid) AS total_publications,
       COUNT(DISTINCT dk.kid) AS total_keywords,
       COUNT(DISTINCT p.pid) / COUNT(DISTINCT dk.kid) AS publication_keyword_ratio
FROM DOMAIN d
JOIN domain_publication dp ON d.did = dp.did
JOIN publication p ON dp.pid = p.pid
LEFT JOIN domain_keyword dk ON d.did = dk.did
GROUP BY d.did;",,"EXECUTION ERROR: (psycopg2.errors.DivisionByZero) division by zero

[SQL: SELECT d.did,
       COUNT(DISTINCT p.pid) AS total_publications,
       COUNT(DISTINCT dk.kid) AS total_keywords,
       COUNT(DISTINCT p.pid) / COUNT(DISTINCT dk.kid) AS publication_keyword_ratio
FROM DOMAIN d
JOIN domain_publication dp ON d.did = dp.did
JOIN publication p ON dp.pid = p.pid
LEFT JOIN domain_keyword dk ON d.did = dk.did
GROUP BY d.did;]
(Background on this error at: https://sqlalche.me/e/20/9h9h)",0,0,0,1,0,6.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.","SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid=conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC NULLS LAST;",academic,table_join,,postgres,"SELECT c.name AS conference_name,
       COUNT(p.pid) AS num_publications
FROM publication p
JOIN conference c ON p.cid = c.cid
GROUP BY c.name
ORDER BY num_publications DESC;",,,0,1,0,0,0,5.02,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"How many publications were published in journals whose names start with the letter ""J""?",SELECT count(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name ilike 'J%';,academic,table_join,,postgres,"SELECT COUNT(*) AS publication_count
FROM publication p
JOIN journal j ON p.jid = j.jid
WHERE j.name LIKE 'J%';",,,0,1,0,0,0,4.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What is the total number of publications in each journal, ordered by the number of publications in descending order?","SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid=journal.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid=publication.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;",academic,table_join,,postgres,"SELECT j.jid AS journal_id,
       COUNT(p.pid) AS publication_count
FROM journal j
LEFT JOIN publication p ON j.jid = p.jid
GROUP BY j.jid
ORDER BY publication_count DESC;",,,0,1,0,0,0,7.35,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of publications presented in each conference?,"SELECT {conference.name, conference.cid}, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY {} ORDER BY total_publications DESC;",academic,table_join,,postgres,"SELECT cid,
       COUNT(*) AS num_publications
FROM publication
GROUP BY cid;",,,0,1,0,0,0,4.36,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which author had the most publications in the year 2021 and how many publications did he/she have that year?,"SELECT {author.name, author.aid}, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY {} ORDER BY publication_count DESC NULLS LAST LIMIT 1;",academic,table_join,,postgres,"SELECT w.author_name,
       COUNT(p.pid) AS publication_count
FROM writes w
JOIN publication p ON w.pid = p.pid
WHERE p.year = 2021
GROUP BY w.author_name
ORDER BY publication_count DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column w.author_name does not exist
LINE 1: SELECT w.author_name,
               ^

[SQL: SELECT w.author_name,
       COUNT(p.pid) AS publication_count
FROM writes w
JOIN publication p ON w.pid = p.pid
WHERE p.year = 2021
GROUP BY w.author_name
ORDER BY publication_count DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How long has it been in days since the last admitted student? Give the answer as an integer.,SELECT CURRENT_DATE - max(admit_term) AS duration_since_last_admitted_student FROM student;,advising,date_functions,,postgres,"SELECT EXTRACT(DAY
               FROM AGE(MAX(admit_term), CURRENT_DATE)) AS days_since_last_admission
FROM student;",,INCORRECT RESULTS,0,0,0,0,0,5.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many students were predicted to graduate in the last 10 years?,"SELECT count(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_TRUNC('year', CURRENT_DATE) - interval '10 year';",advising,date_functions,,postgres,"SELECT COUNT(*) AS number_of_students_predicted_to Graduate
FROM student
WHERE predicted_graduation_semester >= NOW() - INTERVAL '10 years';",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at or near ""Graduate""
LINE 1: SELECT COUNT(*) AS number_of_students_predicted_to Graduate
                                                           ^

[SQL: SELECT COUNT(*) AS number_of_students_predicted_to Graduate
FROM student
WHERE predicted_graduation_semester >= NOW() - INTERVAL '10 years';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday,SELECT DISTINCT co.course_id FROM course_offering co JOIN offering_instructor oi ON co.offering_id = oi.offering_id WHERE (co.semester = 1 OR co.semester = 2) AND co.end_time < '13:00:00' AND co.thursday IS NOT NULL;,advising,date_functions,,postgres,"SELECT DISTINCT co.course_id
FROM course_offering co
JOIN semester s ON co.semester = s.semester_id
JOIN instructor_in_course ic ON co.offering_id = ic.offering_id
WHERE (s.year,
       s.semester) IN (('2023',
                        '1'), ('2023',
                               '2'))
  AND co.end_time < '13:00:00'
  AND ic.thursday IS NOT NULL;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) relation ""instructor_in_course"" does not exist
LINE 4: JOIN instructor_in_course ic ON co.offering_id = ic.offering...
             ^

[SQL: SELECT DISTINCT co.course_id
FROM course_offering co
JOIN semester s ON co.semester = s.semester_id
JOIN instructor_in_course ic ON co.offering_id = ic.offering_id
WHERE (s.year,
       s.semester) IN (('2023',
                        '1'), ('2023',
                               '2'))
  AND co.end_time < '13:00:00'
  AND ic.thursday IS NOT NULL;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What month were most students admitted? Return the no. of students and the month as a date,"SELECT date_trunc('month', s.admit_term) AS month, COUNT(*) AS total_students FROM student s GROUP BY MONTH ORDER BY total_students DESC LIMIT 1;SELECT TO_CHAR(DATE_TRUNC('month', s.admit_term), 'YYYY-MM') AS month, COUNT(*) AS total_students FROM student s GROUP BY month ORDER BY total_students DESC LIMIT 1;SELECT date_trunc('month', admit_term)::date AS MONTH, COUNT(*) AS num_students FROM student GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1;",advising,date_functions,,postgres,"SELECT COUNT(*) AS num_students,
       TO_DATE(SUBSTR(admit_term, 1, 7), 'YYYY-MM') AS admission_month
FROM student
GROUP BY TO_DATE(SUBSTR(admit_term, 1, 7), 'YYYY-MM')
ORDER BY COUNT(*) DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function substr(date, integer, integer) does not exist
LINE 2:        TO_DATE(SUBSTR(admit_term, 1, 7), 'YYYY-MM') AS admis...
                       ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT COUNT(*) AS num_students,
       TO_DATE(SUBSTR(admit_term, 1, 7), 'YYYY-MM') AS admission_month
FROM student
GROUP BY TO_DATE(SUBSTR(admit_term, 1, 7), 'YYYY-MM')
ORDER BY COUNT(*) DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What's the average predicted time to graduation since admission in no. of days?,SELECT avg(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;,advising,date_functions,,postgres,"SELECT AVG(julianday(predicted_graduation_semester) - julianday(admit_term)) AS avg_days_to_graduate
FROM student;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function julianday(date) does not exist
LINE 1: SELECT AVG(julianday(predicted_graduation_semester) - julian...
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT AVG(julianday(predicted_graduation_semester) - julianday(admit_term)) AS avg_days_to_graduate
FROM student;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many course offerings have a final exam and how many do not?,"SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering co;",advising,group_by,,postgres,"SELECT SUM(CASE
               WHEN has_final_exam THEN 1
               ELSE 0
           END) AS courses_with_final_exam,
       SUM(CASE
               WHEN NOT has_final_exam THEN 1
               ELSE 0
           END) AS courses_without_final_exam
FROM course_offering;",,,0,1,0,0,0,4.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many courses are offered for each semester id?,"SELECT course_offering.semester, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM course_offering GROUP BY course_offering.semester ORDER BY course_offering.semester;SELECT semester.semester_id, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM semester LEFT JOIN course_offering ON semester.semester_id = course_offering.semester GROUP BY semester.semester_id;",advising,group_by,,postgres,"SELECT s.semester_id,
       COUNT(co.course_id) AS num_courses
FROM course_offering co
JOIN semester s ON co.semester = s.semester_id
GROUP BY s.semester_id;",,,0,1,0,0,0,6.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many courses does each department offer?,"SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC NULLS LAST;",advising,group_by,,postgres,"SELECT department,
       COUNT(DISTINCT course_id) AS num_courses
FROM course
GROUP BY department;",,,0,1,0,0,0,4.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the average clarity score for each instructor who taught a course?,"SELECT {i.name, i.instructor_id}, AVG(c.clarity_score) FROM course c JOIN course_offering co ON c.course_id = co.course_id JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id GROUP BY {};",advising,group_by,,postgres,"SELECT i.instructor_id,
       i.name,
       AVG(c.clarity_score) AS average_clarity_score
FROM course c
JOIN course_offering co ON c.course_id = co.course_id
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN comment_instructor ci ON oi.instructor_id = ci.instructor_id
AND c.course_id = ci.course_id
JOIN instructor i ON ci.instructor_id = i.instructor_id
GROUP BY i.instructor_id,
         i.name;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ci.course_id does not exist
LINE 8: AND c.course_id = ci.course_id
                          ^
HINT:  Perhaps you meant to reference the column ""c.course_id"" or the column ""co.course_id"".

[SQL: SELECT i.instructor_id,
       i.name,
       AVG(c.clarity_score) AS average_clarity_score
FROM course c
JOIN course_offering co ON c.course_id = co.course_id
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN comment_instructor ci ON oi.instructor_id = ci.instructor_id
AND c.course_id = ci.course_id
JOIN instructor i ON ci.instructor_id = i.instructor_id
GROUP BY i.instructor_id,
         i.name;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of students who found the instructor to be hilarious per course id?,"SELECT course_tags_count.course_id, SUM(course_tags_count.hilarious) AS total_hilarious FROM course_tags_count GROUP BY course_tags_count.course_id;",advising,group_by,,postgres,"SELECT c.course_id,
       SUM(ctc.hilarious) AS total_hilarious_students
FROM course_tags_count ctc
JOIN course_offering co ON ctc.course_id = co.course_id
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
GROUP BY c.course_id;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""c""
LINE 1: SELECT c.course_id,
               ^

[SQL: SELECT c.course_id,
       SUM(ctc.hilarious) AS total_hilarious_students
FROM course_tags_count ctc
JOIN course_offering co ON ctc.course_id = co.course_id
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
GROUP BY c.course_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.50,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Return the student IDs who have taken an in-person course and have gotten a grade of A or C.,"SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');",advising,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match.
When asked for specific students or courses, do not return duplicates.
",postgres,"SELECT sr.student_id
FROM student_record sr
WHERE sr.how = 'in-person'
  AND (sr.grade = 'A'
       OR sr.grade = 'C');",,,0,1,0,0,0,5.76,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What are the easiness scores for courses in the ""Computer Science"" department? Show both courses and scores.","SELECT {course.name, course.course_id, course.number}, course.easiness_score FROM course WHERE course.department = 'Computer Science';",advising,instruct,"
Follow the instructions below to generate the query:
Always filter names using exact string matching
",postgres,"SELECT c.name AS course_name,
       ce.easiness_score
FROM course c
JOIN program_course pc ON c.course_id = pc.course_id
JOIN program p ON pc.program_id = p.program_id
JOIN course_offering co ON c.course_id = co.course_id
JOIN course ce ON c.course_id = ce.course_id
WHERE p.name = 'Computer Science';",,INCORRECT RESULTS,0,0,0,0,0,6.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What are the names of all the courses offered by the department of Computer Science?,SELECT course.name FROM course WHERE course.department ILIKE '%Computer Science%' ORDER BY course.name ASC NULLS LAST;,advising,instruct,"
Follow the instructions below to generate the query:
Filter strings using ILIKE.
Use the student_record table for all information relating to students' choices and their course.
",postgres,"SELECT name
FROM course
WHERE department = 'Computer Science';",,,0,1,0,0,0,4.47,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the average GPA of students in the program mathematics?,SELECT AVG(student.total_gpa) FROM student JOIN program ON student.program_id = program.program_id WHERE LOWER(program.name) = 'mathematics';,advising,instruct,"
Follow the instructions below to generate the query:
Match strings case-insensitively
",postgres,"SELECT AVG(total_gpa) AS average_gpa
FROM student
JOIN program_course ON student.program_id = program_course.program_id
JOIN program ON program_course.program_id = program.program_id
WHERE program.name = 'Mathematics';",,,0,1,0,0,0,4.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.,"SELECT student.firstname, student.lastname FROM student WHERE student.minor IS NOT NULL ORDER BY student.lastname NULLS LAST;",advising,instruct,"
Follow the instructions below to generate the query:
student.declare_major is null for students who have not declared their major.
student.minor is null for students who have not declared a minor program.
",postgres,"SELECT s.firstname,
       s.lastname
FROM student s
WHERE s.minor IS NOT NULL
ORDER BY s.lastname;",,,0,1,0,0,0,5.51,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the name of the instructor who has taught the most courses, and how many courses have they taught?","SELECT instructor.name, count(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY num_courses DESC LIMIT 1;",advising,order_by,,postgres,"SELECT i.name AS instructor_name,
       COUNT(co.course_id) AS number_of_courses_taught
FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN instructor i ON oi.instructor_id = i.instructor_id
GROUP BY i.name
ORDER BY number_of_courses_taught DESC
LIMIT 1;",,,0,1,0,0,0,6.64,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.","SELECT student.student_id, student.total_credit FROM student ORDER BY student.total_credit DESC NULLS LAST;",advising,order_by,,postgres,"SELECT student_id,
       SUM(total_credit) AS total_credits
FROM student
GROUP BY student_id
ORDER BY total_credits DESC;",,,0,1,0,0,0,5.76,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of students enrolled in each course, ordered from highest to lowest?","SELECT {course.course_id, course.name, course.number}, SUM(course.num_enrolled) AS total_students FROM course GROUP BY {} ORDER BY total_students DESC NULLS LAST;",advising,order_by,,postgres,"SELECT c.name AS course_name,
       SUM(sr.earn_credit::int) AS total_students_enrolled
FROM student_record sr
JOIN course c ON sr.course_id = c.course_id
WHERE sr.earn_credit = 'Yes'
GROUP BY c.name
ORDER BY total_students_enrolled DESC;",,"EXECUTION ERROR: (psycopg2.errors.InvalidTextRepresentation) invalid input syntax for type integer: ""Yes""

[SQL: SELECT c.name AS course_name,
       SUM(sr.earn_credit::int) AS total_students_enrolled
FROM student_record sr
JOIN course c ON sr.course_id = c.course_id
WHERE sr.earn_credit = 'Yes'
GROUP BY c.name
ORDER BY total_students_enrolled DESC;]
(Background on this error at: https://sqlalche.me/e/20/9h9h)",0,0,0,1,0,6.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?","SELECT course_tags_count.course_id, course_tags_count.participation FROM course_tags_count ORDER BY course_tags_count.participation DESC NULLS LAST;",advising,order_by,,postgres,"SELECT course_id,
       SUM(participation) AS total_participants
FROM course_tags_count
GROUP BY course_id
ORDER BY total_participants DESC;",,,0,1,0,0,0,6.11,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"Which course has the highest number of enrolled students, and what is the enrollment number?","SELECT {course.name, course.course_id, course.number}, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC NULLS LAST LIMIT 1;",advising,order_by,,postgres,"SELECT name,
       num_enrolled
FROM course
WHERE num_enrolled =
    (SELECT MAX(num_enrolled)
     FROM course);",,,0,1,0,0,0,5.42,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How does the ratio of enrolled students to the number of reviews vary across different courses?,"SELECT {course.course_id, course.name, course.number}, CAST(course.num_enrolled AS FLOAT) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY student_review_ratio NULLS LAST;",advising,ratio,,postgres,"SELECT c.name AS course_name,
       (c.num_enrolled::numeric / COALESCE(c.num_reviews, 1)) AS student_review_ratio
FROM course c;",,,0,1,0,0,0,5.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of helpfulness scores to clarity scores for each course ID?,"SELECT course.course_id, CAST(course.helpfulness_score AS FLOAT) / NULLIF(course.clarity_score, 0) AS ratio FROM course;",advising,ratio,,postgres,"SELECT course_id,
       AVG(helpfulness_score) / AVG(clarity_score) AS helpfulness_to_clarity_ratio
FROM course
GROUP BY course_id;",,,0,1,0,0,0,4.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?,"SELECT course_offering.semester, CAST(SUM(CASE WHEN course.has_projects THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN course.has_exams THEN 1 ELSE 0 END), 0) AS ratio FROM course JOIN course_offering ON course.course_id = course_offering.course_id GROUP BY course_offering.semester ORDER BY course_offering.semester NULLS LAST;",advising,ratio,,postgres,"SELECT s.semester_id,
       COUNT(DISTINCT CASE
                          WHEN c.has_projects THEN c.course_id
                          ELSE NULL
                      END) AS num_courses_with_projects,
       COUNT(DISTINCT CASE
                          WHEN c.has_exams THEN c.course_id
                          ELSE NULL
                      END) AS num_courses_with_exams,
       COUNT(DISTINCT CASE
                          WHEN c.has_projects THEN c.course_id
                          ELSE NULL
                      END) / COUNT(DISTINCT CASE
                                                WHEN c.has_exams THEN c.course_id
                                                ELSE NULL
                                            END) AS ratio
FROM semester s
JOIN course_offering co ON s.semester_id = co.semester
JOIN course c ON co.course_id = c.course_id
GROUP BY s.semester_id;",,INCORRECT RESULTS,0,0,0,0,0,7.40,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?,"SELECT course_tags_count.course_id, CAST(course_tags_count.clear_grading AS FLOAT) / NULLIF(course_tags_count.good_feedback, 0) AS ratio FROM course_tags_count ORDER BY course_tags_count.course_id NULLS LAST;",advising,ratio,,postgres,"SELECT course_id,
       (clear_grading::float / COALESCE(good_feedback, 1)) AS ratio
FROM course_tags_count;",,,0,1,0,0,0,6.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?,SELECT SUM(CASE WHEN c.has_exams THEN c.num_enrolled ELSE 0 END)::FLOAT / SUM(CASE WHEN NOT c.has_exams THEN c.num_enrolled ELSE 0 END) AS ratio FROM course c;,advising,ratio,,postgres,"WITH exam_courses AS
  (SELECT c.course_id,
          SUM(s.num_enrolled) OVER (PARTITION BY c.course_id) AS total_students_with_exams
   FROM course c
   JOIN student_record sr ON c.course_id = sr.course_id
   WHERE c.has_exams = TRUE),
     no_exam_courses AS
  (SELECT c.course_id,
          SUM(s.num_enrolled) OVER (PARTITION BY c.course_id) AS total_students_without_exams
   FROM course c
   JOIN student_record sr ON c.course_id = sr.course_id
   WHERE c.has_exams = FALSE)
SELECT COALESCE(SUM(total_students_with_exams), 0) / SUM(COALESCE(total_students_without_exams, 0)) AS ratio
FROM exam_courses
UNION ALL
SELECT 0::numeric -- In case there are no courses without exams FROM no_exam_courses;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""s""
LINE 3:           SUM(s.num_enrolled) OVER (PARTITION BY c.course_id...
                      ^

[SQL: WITH exam_courses AS
  (SELECT c.course_id,
          SUM(s.num_enrolled) OVER (PARTITION BY c.course_id) AS total_students_with_exams
   FROM course c
   JOIN student_record sr ON c.course_id = sr.course_id
   WHERE c.has_exams = TRUE),
     no_exam_courses AS
  (SELECT c.course_id,
          SUM(s.num_enrolled) OVER (PARTITION BY c.course_id) AS total_students_without_exams
   FROM course c
   JOIN student_record sr ON c.course_id = sr.course_id
   WHERE c.has_exams = FALSE)
SELECT COALESCE(SUM(total_students_with_exams), 0) / SUM(COALESCE(total_students_without_exams, 0)) AS ratio
FROM exam_courses
UNION ALL
SELECT 0::numeric -- In case there are no courses without exams FROM no_exam_courses;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,8.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many students have declared a major in each program?,"SELECT {program.name, program.program_id}, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE student.declare_major IS NOT NULL GROUP BY {} ORDER BY number_of_students DESC;",advising,table_join,,postgres,"SELECT p.name AS program_name,
       COUNT(s.student_id) AS student_count
FROM program p
JOIN student s ON p.program_id = s.program_id
GROUP BY p.name;",,,0,1,0,0,0,5.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of credits earned by students in each program?,"SELECT {program.name, program.program_id}, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY {};",advising,table_join,,postgres,"SELECT p.name AS program_name,
       SUM(s.total_credit) AS total_credits_earned
FROM student s
JOIN program_course pc ON s.program_id = pc.program_id
JOIN program p ON s.program_id = p.program_id
GROUP BY p.name;",,INCORRECT RESULTS,0,0,0,0,0,7.19,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of students who have taken a course with a final project or exam?,SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = true OR course_offering.has_final_exam = true;,advising,table_join,,postgres,"SELECT COUNT(DISTINCT s.student_id) AS total_students
FROM student_record sr
JOIN course_offering co ON sr.course_id = co.course_id
AND sr.semester = co.semester
WHERE (co.has_final_project
       OR co.has_final_exam);",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""s""
LINE 1: SELECT COUNT(DISTINCT s.student_id) AS total_students
                              ^

[SQL: SELECT COUNT(DISTINCT s.student_id) AS total_students
FROM student_record sr
JOIN course_offering co ON sr.course_id = co.course_id
AND sr.semester = co.semester
WHERE (co.has_final_project
       OR co.has_final_exam);]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.11,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which courses have a final project and a final exam?,"SELECT DISTINCT {course.name, course.course_id, course.number} FROM course_offering JOIN course ON course_offering.course_id = course.course_id WHERE course_offering.has_final_project = true AND course_offering.has_final_exam = true;",advising,table_join,,postgres,"SELECT name,
       department, number
FROM course
WHERE has_final_project = TRUE
  AND has_final_exam = TRUE;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""has_final_project"" does not exist
LINE 4: WHERE has_final_project = TRUE
              ^

[SQL: SELECT name,
       department, number
FROM course
WHERE has_final_project = TRUE
  AND has_final_exam = TRUE;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.62,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which courses have been taken by students in the Computer Science program?,"SELECT DISTINCT {course.name, course.course_id, course.number} AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE program.name ILIKE '%Computer Science%';",advising,table_join,,postgres,"SELECT DISTINCT c.name,
                c.department,
                c.number
FROM student s
JOIN program p ON s.program_id = p.program_id
JOIN student_record sr ON s.student_id = sr.student_id
JOIN course c ON sr.course_id = c.course_id
WHERE p.name = 'Computer Science';",,,0,1,0,0,0,6.18,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Count the number of flight departures for each month?,"SELECT month.month_name, count(*) AS departure_count FROM flight JOIN month ON extract(MONTH FROM to_timestamp(flight.departure_time)) = month.month_number GROUP BY month.month_name, month.month_number ORDER BY month.month_number;SELECT date_trunc('month', to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY MONTH ORDER BY MONTH;SELECT EXTRACT(MONTH FROM to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;SELECT TO_CHAR(TO_TIMESTAMP(flight.departure_time), 'YYYY-MM') AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;",atis,date_functions,,postgres,"SELECT m.month_name,
       COUNT(f.flight_id) AS departure_count
FROM flight f
JOIN MONTH m ON DATE_TRUNC('month', f.departure_time) = m.month_number::date
GROUP BY m.month_name;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function date_trunc(unknown, bigint) does not exist
LINE 4: JOIN MONTH m ON DATE_TRUNC('month', f.departure_time) = m.mo...
                        ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT m.month_name,
       COUNT(f.flight_id) AS departure_count
FROM flight f
JOIN MONTH m ON DATE_TRUNC('month', f.departure_time) = m.month_number::date
GROUP BY m.month_name;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.04,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.,"SELECT date_part('day', CURRENT_DATE - to_timestamp(departure_time)) AS difference_in_days FROM flight ORDER BY departure_time LIMIT 1;SELECT (CURRENT_DATE - TO_TIMESTAMP(MIN(f.departure_time))) AS days_difference FROM flight f;SELECT CAST(ABS((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) - EXTRACT(EPOCH FROM TO_TIMESTAMP(MIN(departure_time)))) / 86400) AS INTEGER) AS diff_in_days FROM flight;",atis,date_functions,,postgres,"SELECT EXTRACT(DAY
               FROM AGE(NOW(), MIN(departure_time))) AS days_difference
FROM flight;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function age(timestamp with time zone, bigint) does not exist
LINE 2:                FROM AGE(NOW(), MIN(departure_time))) AS days...
                            ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT EXTRACT(DAY
               FROM AGE(NOW(), MIN(departure_time))) AS days_difference
FROM flight;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes",SELECT avg(to_timestamp(arrival_time) - to_timestamp(departure_time) - interval '34 minutes') AS average_duration FROM flight;SELECT AVG(arrival_time - departure_time)/60 - 34 AS average_duration FROM flight;,atis,date_functions,,postgres,"SELECT AVG((t.arrival_time - t.departure_time) / 60 - 34) AS avg_duration_minus_34_minutes
FROM
  (SELECT departure_time,
          arrival_time
   FROM flight) t;",,INCORRECT RESULTS,0,0,0,0,0,6.86,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What's the earliest flight departure time in the day in HH:MM?,"SELECT to_char(to_timestamp(departure_time)::TIME, 'HH24:MI') AS earliest_departure_time FROM flight ORDER BY earliest_departure_time LIMIT 1;",atis,date_functions,,postgres,"SELECT TO_CHAR(TIMESTAMP 'epoch' + MIN(departure_time) * INTERVAL '1 second', 'HH24:MI') AS earliest_departure_time
FROM flight;",,,0,1,0,0,0,6.26,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.,"SELECT {flight.flight_number, flight.flight_id}, (arrival_time - departure_time) / 60 AS duration_minutes FROM flight ORDER BY duration_minutes LIMIT 1;",atis,date_functions,,postgres,"SELECT f.flight_id,
       f.departure_time,
       f.arrival_time,
       EXTRACT(EPOCH
               FROM (f.arrival_time - f.departure_time)) / 60 AS duration_minutes
FROM flight f
ORDER BY duration_minutes ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, bigint) does not exist
LINE 4:        EXTRACT(EPOCH
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT f.flight_id,
       f.departure_time,
       f.arrival_time,
       EXTRACT(EPOCH
               FROM (f.arrival_time - f.departure_time)) / 60 AS duration_minutes
FROM flight f
ORDER BY duration_minutes ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"How many flights depart from each airport code, excluding departures with connections?","SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport LEFT JOIN flight ON airport.airport_code = flight.from_airport AND flight.connections=0 GROUP BY airport.airport_code;SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport JOIN flight ON airport.airport_code = flight.from_airport WHERE flight.connections=0 GROUP BY airport.airport_code;",atis,group_by,,postgres,"SELECT f.from_airport AS airport_code,
       COUNT(f.flight_id) AS number_of_departures
FROM flight f
WHERE f.stops = 0
  AND f.connections = 0
GROUP BY f.from_airport;",,,0,1,0,0,0,6.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"How many meals are served in each compartment, sorted by the number of meals in descending order?","SELECT food_service.compartment, COUNT(food_service.meal_number) AS number_of_meals FROM food_service GROUP BY food_service.compartment ORDER BY number_of_meals DESC NULLS LAST;",atis,group_by,,postgres,"SELECT compartment,
       COUNT(meal_number) AS meal_count
FROM food_service
GROUP BY compartment
ORDER BY meal_count DESC;",,,0,1,0,0,0,6.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the average cost of a one-way trip for each airport pair in the fare table?,"SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare f GROUP BY f.from_airport, f.to_airport ORDER BY f.from_airport, f.to_airport NULLS LAST;",atis,group_by,,postgres,"SELECT from_airport,
       to_airport,
       AVG(one_direction_cost) AS average_one_way_cost
FROM fare
GROUP BY from_airport,
         to_airport;",,,0,1,0,0,0,5.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?","SELECT fare.fare_airline, AVG(fare.round_trip_cost) AS average_cost FROM fare WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY fare.fare_airline ORDER BY average_cost DESC NULLS LAST;SELECT airline.airline_name, AVG(fare.round_trip_cost) AS avg_round_trip_cost FROM fare JOIN airline ON fare.fare_airline = airline.airline_code WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY airline.airline_name ORDER BY avg_round_trip_cost DESC;",atis,group_by,,postgres,"SELECT fare.fare_airline AS airline_code,
       AVG(fare.round_trip_cost) AS average_round_trip_cost
FROM fare
JOIN airport AS from_airport ON fare.from_airport = from_airport.airport_code
JOIN airport AS to_airport ON fare.to_airport = to_airport.airport_code
WHERE from_airport.city_name = 'Los Angeles'
  AND from_airport.airport_code = 'LAX'
  AND to_airport.city_name = 'Chicago'
  AND to_airport.airport_code = 'ORD'
GROUP BY fare.fare_airline
ORDER BY average_round_trip_cost DESC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column from_airport.city_name does not exist
LINE 6: WHERE from_airport.city_name = 'Los Angeles'
              ^

[SQL: SELECT fare.fare_airline AS airline_code,
       AVG(fare.round_trip_cost) AS average_round_trip_cost
FROM fare
JOIN airport AS from_airport ON fare.from_airport = from_airport.airport_code
JOIN airport AS to_airport ON fare.to_airport = to_airport.airport_code
WHERE from_airport.city_name = 'Los Angeles'
  AND from_airport.airport_code = 'LAX'
  AND to_airport.city_name = 'Chicago'
  AND to_airport.airport_code = 'ORD'
GROUP BY fare.fare_airline
ORDER BY average_round_trip_cost DESC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.31,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the total cost of round-trip fares for each airline code?,"SELECT fare.fare_airline, SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare GROUP BY fare.fare_airline ORDER BY total_round_trip_cost DESC;",atis,group_by,,postgres,"SELECT fare.fare_airline AS airline_code,
       SUM(fare.round_trip_cost) AS total_round_trip_cost
FROM fare
GROUP BY fare.fare_airline;",,,0,1,0,0,0,5.86,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
How many flights require a round-trip to purchase the fare?,SELECT COUNT(DISTINCT flight_fare.flight_id) FROM flight_fare JOIN fare ON flight_fare.fare_id = fare.fare_id WHERE fare.round_trip_required = 'Yes';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,"SELECT COUNT(*) AS round_trip_fares_count
FROM fare
WHERE round_trip_required = 'Yes';",,,0,1,0,0,0,5.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the minimum amount of time required for a connecting flight at JFK Airport?,SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,"SELECT minimum_connect_time
FROM airport
WHERE airport_code = 'JFK';",,,0,1,0,0,0,5.11,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?,SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
fare.round_trip_required is not needed when getting the round trip cost.
",postgres,"SELECT SUM(f.round_trip_cost) AS total_round_trip_cost
FROM fare f
JOIN flight fl ON f.fare_id = fl.flight_fare_id
JOIN airport a1 ON fl.from_airport = a1.airport_code
JOIN airport a2 ON fl.to_airport = a2.airport_code
WHERE a1.city_code = 'JFK'
  AND a2.city_code = 'LAX';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column fl.flight_fare_id does not exist
LINE 3: JOIN flight fl ON f.fare_id = fl.flight_fare_id
                                      ^

[SQL: SELECT SUM(f.round_trip_cost) AS total_round_trip_cost
FROM fare f
JOIN flight fl ON f.fare_id = fl.flight_fare_id
JOIN airport a1 ON fl.from_airport = a1.airport_code
JOIN airport a2 ON fl.to_airport = a2.airport_code
WHERE a1.city_code = 'JFK'
  AND a2.city_code = 'LAX';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers,"SELECT {flight.flight_number, flight.flight_id} FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';",atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE for each of the days separately, since they are not necessarily ordered.
",postgres,"SELECT DISTINCT f.flight_number
FROM flight f
WHERE f.flight_days LIKE '%mon,%'
  OR f.flight_days LIKE '%wed,%';",,,0,1,0,0,0,5.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which state code is Orlando International Airport in?,SELECT state_code FROM airport WHERE airport_name ILIKE '%Orlando International Airport%';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE and wildcards for each of the days separately, since they are not necessarily ordered.
",postgres,"SELECT a.state_code
FROM airport a
JOIN city c ON a.airport_location = c.city_name
WHERE a.airport_name = 'Orlando International Airport';",,,0,1,0,0,0,6.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.,SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY aircraft.aircraft_code ASC NULLS LAST;,atis,order_by,,postgres,"SELECT aircraft_code
FROM aircraft
WHERE cruising_speed > 200
ORDER BY aircraft_code ASC;",,,0,1,0,0,0,4.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What are the top 2 airlines with the most flights?,"SELECT {airline.airline_name, airline.airline_code}, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY {} ORDER BY number_of_flights DESC NULLS LAST LIMIT 2;",atis,order_by,,postgres,"SELECT a.airline_name,
       COUNT(f.flight_id) AS flight_count
FROM airline a
JOIN flight f ON a.airline_code = f.airline_code
GROUP BY a.airline_name
ORDER BY flight_count DESC
LIMIT 2;",,,0,1,0,0,0,6.56,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which aircraft code can carry the highest weight of cargo that any aircraft can carry?,SELECT aircraft.aircraft_code FROM aircraft ORDER BY pay_load DESC NULLS LAST LIMIT 1;,atis,order_by,,postgres,"SELECT aircraft_code
FROM aircraft
ORDER BY pay_load DESC
LIMIT 1;",,,0,1,0,0,0,5.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.","SELECT {airport.airport_name, airport.airport_code}, airport.minimum_connect_time FROM airport ORDER BY airport.minimum_connect_time ASC NULLS LAST;",atis,order_by,,postgres,"SELECT airport_code,
       minimum_connect_time
FROM airport
ORDER BY minimum_connect_time ASC
LIMIT 1;",,INCORRECT RESULTS,0,0,0,0,0,6.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?","SELECT flight.flight_id, (flight.arrival_time - flight.departure_time) AS duration FROM flight WHERE to_airport = 'ORD' ORDER BY duration ASC NULLS LAST;",atis,order_by,,postgres,"SELECT f.flight_id,
       f.departure_time,
       f.arrival_time,
       EXTRACT(EPOCH
               FROM f.arrival_time - f.departure_time) AS duration_seconds
FROM flight f
JOIN airport a ON f.to_airport = a.airport_code
WHERE a.airport_name = 'Chicago'
  AND a.airport_code = 'ORD'
ORDER BY EXTRACT(EPOCH
                 FROM f.arrival_time - f.departure_time) DESC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, bigint) does not exist
LINE 4:        EXTRACT(EPOCH
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT f.flight_id,
       f.departure_time,
       f.arrival_time,
       EXTRACT(EPOCH
               FROM f.arrival_time - f.departure_time) AS duration_seconds
FROM flight f
JOIN airport a ON f.to_airport = a.airport_code
WHERE a.airport_name = 'Chicago'
  AND a.airport_code = 'ORD'
ORDER BY EXTRACT(EPOCH
                 FROM f.arrival_time - f.departure_time) DESC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,9.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Calculate the ratio of the maximum range to the maximum payload for each aircraft,"SELECT aircraft.range_miles::float / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;",atis,ratio,,postgres,"SELECT aircraft_code,
       MAX(range_miles) / MAX(pay_load) AS range_payload_ratio
FROM aircraft
GROUP BY aircraft_code;",,INCORRECT RESULTS,0,0,0,0,0,5.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?,"SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS FLOAT) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC NULLS LAST;",atis,ratio,,postgres,"SELECT a.manufacturer,
       AVG(a.cruising_speed::numeric / a.pay_load) AS avg_speed_to_payload_ratio
FROM aircraft a
GROUP BY a.manufacturer;",,,0,1,0,0,0,5.82,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the proportion of flights with stops out of all flights for each airline code?,"SELECT flight.airline_code, CAST(SUM(CASE WHEN flight.stops > 0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS ratio FROM flight GROUP BY flight.airline_code;",atis,ratio,,postgres,"SELECT f.airline_code,
       COUNT(f.flight_id) AS total_flights,
       SUM(CASE
               WHEN f.stops > 0 THEN 1
               ELSE 0
           END) AS flights_with_stops,
       (SUM(CASE
                WHEN f.stops > 0 THEN 1
                ELSE 0
            END) * 1.0 / COUNT(f.flight_id))::numeric(10, 2) AS proportion
FROM flight f
GROUP BY f.airline_code;",,INCORRECT RESULTS,0,0,0,0,0,7.15,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the ratio of aircraft capacity to its range in miles for each aircraft code?,"SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS FLOAT) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;",atis,ratio,,postgres,"SELECT a.aircraft_code,
       a.capacity::numeric / a.range_miles AS capacity_to_range_ratio
FROM aircraft a;",,,0,1,0,0,0,5.90,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the ratio of one-way trip costs to round-trip costs for each fare?,"SELECT fare.fare_id, fare.one_direction_cost::float / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY cost_ratio;",atis,ratio,,postgres,"SELECT fare_id,
       one_direction_cost,
       round_trip_cost,
       (one_direction_cost::numeric / round_trip_cost) AS ratio_one_way_to_round_trip
FROM fare;",,,0,1,0,0,0,6.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?","SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM airline WHERE airline.airline_code NOT IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);",atis,table_join,,postgres,"SELECT DISTINCT a.airline_code,
                a.airline_name
FROM airline a
WHERE NOT EXISTS ( -- Check if there are any flights departing from or arriving at JFK SELECT 1 FROM flight f JOIN airport ap ON f.from_airport = ap.airport_code OR f.to_airport = ap.airport_code WHERE ap.airport_name = 'JFK' ) AND NOT EXISTS ( -- Check if there are any flights with one or more stops SELECT 1 FROM flight f JOIN flight_stop fs ON f.flight_id = fs.flight_id GROUP BY f.flight_id HAVING COUNT(fs.stop_number) > 0 );",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at end of input
LINE 4: ..._id GROUP BY f.flight_id HAVING COUNT(fs.stop_number) > 0 );
                                                                       ^

[SQL: SELECT DISTINCT a.airline_code,
                a.airline_name
FROM airline a
WHERE NOT EXISTS ( -- Check if there are any flights departing from or arriving at JFK SELECT 1 FROM flight f JOIN airport ap ON f.from_airport = ap.airport_code OR f.to_airport = ap.airport_code WHERE ap.airport_name = 'JFK' ) AND NOT EXISTS ( -- Check if there are any flights with one or more stops SELECT 1 FROM flight f JOIN flight_stop fs ON f.flight_id = fs.flight_id GROUP BY f.flight_id HAVING COUNT(fs.stop_number) > 0 );]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,8.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?","SELECT {airline.airline_name, airline.airline_code}, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY flight.stops NULLS LAST;",atis,table_join,,postgres,"SELECT a.airline_name AS airline,
       f.stops AS stop_count
FROM flight f
JOIN airport a1 ON f.from_airport = a1.airport_code
JOIN airport a2 ON f.to_airport = a2.airport_code
JOIN airline al ON f.airline_code = al.airline_code
WHERE a1.city_name = 'Chicago'
  AND a1.airport_location = 'IL'
  AND a2.city_name = 'New York'
  AND a2.airport_location = 'NY'
ORDER BY f.stops ASC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""a""
LINE 1: SELECT a.airline_name AS airline,
               ^

[SQL: SELECT a.airline_name AS airline,
       f.stops AS stop_count
FROM flight f
JOIN airport a1 ON f.from_airport = a1.airport_code
JOIN airport a2 ON f.to_airport = a2.airport_code
JOIN airline al ON f.airline_code = al.airline_code
WHERE a1.city_name = 'Chicago'
  AND a1.airport_location = 'IL'
  AND a2.city_name = 'New York'
  AND a2.airport_location = 'NY'
ORDER BY f.stops ASC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which airlines offer flights from LAX to ORD?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';",atis,table_join,,postgres,"SELECT DISTINCT a.airline_name
FROM airline a
JOIN flight f ON a.airline_code = f.airline_code
WHERE f.from_airport = 'LAX'
  AND f.to_airport = 'ORD';",,,0,1,0,0,0,6.41,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which airlines offer flights with a stopover in Dallas?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE airport.airport_location ILIKE '%Dallas%';",atis,table_join,,postgres,"SELECT DISTINCT a.airline_name
FROM airline a
JOIN flight f ON a.airline_code = f.airline_code
JOIN flight_stop fs ON f.flight_id = fs.flight_id
JOIN airport ap ON fs.stop_airport = ap.airport_code
WHERE ap.city_name = 'Dallas';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ap.city_name does not exist
LINE 6: WHERE ap.city_name = 'Dallas';
              ^

[SQL: SELECT DISTINCT a.airline_name
FROM airline a
JOIN flight f ON a.airline_code = f.airline_code
JOIN flight_stop fs ON f.flight_id = fs.flight_id
JOIN airport ap ON fs.stop_airport = ap.airport_code
WHERE ap.city_name = 'Dallas';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flights serve meals in first class? Give me the flight id and meal description.,"SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';",atis,table_join,,postgres,"SELECT f.flight_id,
       fc.meal_description
FROM flight f
JOIN food_service fs ON f.aircraft_code_sequence = fs.aircraft_code
AND f.compartment = fs.compartment
JOIN class_of_service cos ON fs.booking_class = cos.booking_class
JOIN compartment_class cc ON fs.compartment = cc.compartment
WHERE cc.class_type = 'First Class';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column fs.aircraft_code does not exist
LINE 4: ...OIN food_service fs ON f.aircraft_code_sequence = fs.aircraf...
                                                             ^

[SQL: SELECT f.flight_id,
       fc.meal_description
FROM flight f
JOIN food_service fs ON f.aircraft_code_sequence = fs.aircraft_code
AND f.compartment = fs.compartment
JOIN class_of_service cos ON fs.booking_class = cos.booking_class
JOIN compartment_class cc ON fs.compartment = cc.compartment
WHERE cc.class_type = 'First Class';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.42,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Lowest daily closest price for symbol `VTI` in the past 7 days,SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7 days';,broker,date_functions,,postgres,"SELECT sbDpDate,
       sbDpClose
FROM sbDailyPrice
JOIN sbTicker ON sbDailyPrice.sbDpTickerId = sbTicker sbTickerId
WHERE sbTickerSymbol = 'VTI'
  AND sbDpDate >= NOW() - INTERVAL '7 days'
ORDER BY sbDpClose ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at or near ""sbTickerId""
LINE 4: ... sbTicker ON sbDailyPrice.sbDpTickerId = sbTicker sbTickerId
                                                             ^

[SQL: SELECT sbDpDate,
       sbDpClose
FROM sbDailyPrice
JOIN sbTicker ON sbDailyPrice.sbDpTickerId = sbTicker sbTickerId
WHERE sbTickerSymbol = 'VTI'
  AND sbDpDate >= NOW() - INTERVAL '7 days'
ORDER BY sbDpClose ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.,"SELECT c.sbCustId, MIN(t.sbTxDateTime) - c.sbCustJoinDate AS DaysFromJoinToFirstTransaction FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId;SELECT c.sbCustId, age(MIN(t.sbTxDateTime), c.sbCustJoinDate) AS time_difference FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId, c.sbCustJoinDate;SELECT c.sbCustId, MIN(DATE(t.sbTxDateTime)) - c.sbCustJoinDate AS days_difference FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId, c.sbCustJoinDate;",broker,date_functions,,postgres,"SELECT c.sbCustId,
       (t sbTxDateTime - c.sbCustJoinDate) AS time_difference
FROM sbCustomer c
LEFT JOIN
  (SELECT sbTxCustId,
          MIN(sbTxDateTime) AS first_transaction_date
   FROM sbTransaction
   GROUP BY sbTxCustId) t ON c.sbCustId = t.sbTxCustId
WHERE t.first_transaction_date IS NOT NULL;",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at or near ""sbTxDateTime""
LINE 2:        (t sbTxDateTime - c.sbCustJoinDate) AS time_differenc...
                  ^

[SQL: SELECT c.sbCustId,
       (t sbTxDateTime - c.sbCustJoinDate) AS time_difference
FROM sbCustomer c
LEFT JOIN
  (SELECT sbTxCustId,
          MIN(sbTxDateTime) AS first_transaction_date
   FROM sbTransaction
   GROUP BY sbTxCustId) t ON c.sbCustId = t.sbTxCustId
WHERE t.first_transaction_date IS NOT NULL;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
"Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.","WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE sbTxDateTime::date = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer c JOIN SellTransactions st ON c.sbCustId = st.sbTxCustId ORDER BY st.num_tx DESC LIMIT 1;",broker,date_functions,,postgres,"SELECT c.sbCustId,
       c sbCustName,
       COUNT(t.sbTxId) AS num_transactions
FROM sbCustomer c
JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId
WHERE t.sbTxType = 'sell'
  AND DATE(t.sbTxDateTime) = '2023-04-01'
GROUP BY c.sbCustId,
         c.sbCustName
ORDER BY num_transactions DESC
LIMIT 1;",,INCORRECT RESULTS,0,0,0,0,0,7.01,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?,"SELECT DATE_TRUNC('month', sbTxDateTime) AS MONTH, AVG(sbTxPrice) AS avg_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY MONTH ORDER BY MONTH;SELECT TO_CHAR(sbTxDateTime, 'YYYY-MM') AS MONTH, AVG(sbTxPrice) AS average_transaction_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime >= '2023-01-01' AND sbTxDateTime < '2023-04-01' GROUP BY TO_CHAR(sbTxDateTime, 'YYYY-MM') ORDER BY MONTH;",broker,date_functions,,postgres,"SELECT EXTRACT(MONTH
               FROM sbTxDateTime) AS MONTH,
       AVG(sbTxPrice) AS avg_transaction_price
FROM sbTransaction
WHERE sbTxStatus = 'success'
  AND sbTxDateTime >= '2023-01-01'
  AND sbTxDateTime < '2023-04-01'
GROUP BY EXTRACT(MONTH
                 FROM sbTxDateTime)
ORDER BY MONTH;",,INCORRECT RESULTS,0,0,0,0,0,6.44,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
number of transactions by users who joined in the past 70 days,SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction t JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;,broker,date_functions,,postgres,"SELECT c.sbCustId,
       COUNT(t.sbTxId) AS transaction_count
FROM sbCustomer c
JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId
WHERE c.sbCustJoinDate >= NOW() - INTERVAL '70 days'
GROUP BY c.sbCustId;",,,0,1,0,0,0,6.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.,"SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons s ORDER BY days_employed ASC LIMIT 1;SELECT first_name || ' ' || last_name AS name, phone, (termination_date - hire_date) AS days_employed FROM salespersons WHERE termination_date IS NOT NULL ORDER BY (termination_date - hire_date) LIMIT 1;",car_dealership,date_functions,,postgres,"SELECT s.first_name || ' ' || s.last_name AS full_name,
       s.phone,
       EXTRACT(DAY
               FROM (s.termination_date - s.hire_date)) AS employment_days
FROM salespersons s
WHERE s.termination_date IS NOT NULL
  AND s.hire_date IS NOT NULL
ORDER BY s.termination_date - s.hire_date ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, integer) does not exist
LINE 3:        EXTRACT(DAY
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT s.first_name || ' ' || s.last_name AS full_name,
       s.phone,
       EXTRACT(DAY
               FROM (s.termination_date - s.hire_date)) AS employment_days
FROM salespersons s
WHERE s.termination_date IS NOT NULL
  AND s.hire_date IS NOT NULL
ORDER BY s.termination_date - s.hire_date ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
Return the number of payments made on weekends to the vendor named 'Utility Company',"SELECT COUNT(*) AS weekend_payments FROM payments_made WHERE vendor_name = 'Utility Company' AND EXTRACT(DOW FROM payment_date) IN (0, 6);",car_dealership,date_functions,,postgres,"SELECT COUNT(*)
FROM payments_made
WHERE vendor_name = 'Utility Company'
  AND EXTRACT(DOW
              FROM payment_date) IN (6,
                                     0);",,,0,1,0,0,0,5.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.,"SELECT DATE_TRUNC('QUARTER', s.sale_date) AS QUARTER, c.state, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.state, QUARTER HAVING SUM(s.sale_price) > 0 ORDER BY QUARTER, c.state;SELECT c.state, date_trunc('quarter', s.sale_date)::date AS quarter_start, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.state, date_trunc('quarter', s.sale_date) ORDER BY c.state, quarter_start;",car_dealership,date_functions,,postgres,"SELECT c.state,
       DATE_TRUNC('quarter', s.sale_date) AS quarter_start_date,
       SUM(s.sale_price) AS total_sales
FROM customers c
JOIN sales s ON c.id = s.customer_id
WHERE EXTRACT(YEAR
              FROM s.sale_date) = 2023
GROUP BY c.state,
         DATE_TRUNC('quarter', s.sale_date)
ORDER BY c.state,
         quarter_start_date;",,,0,1,0,0,0,6.46,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
"Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory"" if is_in_inventory is True.""","WITH latest_snapshot AS (SELECT MAX(snapshot_date) AS snapshot_date FROM inventory_snapshots WHERE snapshot_date BETWEEN '2023-03-01' AND '2023-03-31' ), latest_snapshot_data AS (SELECT inv.car_id FROM inventory_snapshots inv JOIN latest_snapshot ls ON inv.snapshot_date = ls.snapshot_date WHERE inv.is_in_inventory = TRUE ) SELECT c.id, c.make, c.model, c.year FROM cars c JOIN latest_snapshot_data lsd ON c.id = lsd.car_id;",car_dealership,date_functions,,postgres,"SELECT c.id AS car_id,
       c.make,
       c.model,
       c.year
FROM cars c
JOIN inventory_snapshots iss ON c.id = iss.car_id
WHERE iss.is_in_inventory = TRUE
  AND TO_CHAR(iss.snapshot_date, 'YYYY-MM') = '2023-03';",,INCORRECT RESULTS,0,0,0,0,0,6.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
"show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method","SELECT payment_date, payment_method, SUM(payment_amount) AS total_amount FROM payments_received WHERE payment_date >= DATE_TRUNC('WEEK', CURRENT_DATE) - INTERVAL '1 week' AND payment_date < DATE_TRUNC('WEEK', CURRENT_DATE) GROUP BY payment_date, payment_method ORDER BY payment_date DESC, payment_method ASC;",car_dealership,date_functions,,postgres,"SELECT payment_date::date AS payment_day,
       payment_method,
       SUM(payment_amount) AS total_amount
FROM payments_received
WHERE payment_date >= DATE_TRUNC('week', NOW() - INTERVAL '1 week') + INTERVAL '1 day'
  AND payment_date < DATE_TRUNC('week', NOW()) - INTERVAL '1 day'
GROUP BY payment_day,
         payment_method;",,,0,1,0,0,0,5.82,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?,SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE d.diag_name ILIKE '%psoriasis%' AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= CURRENT_DATE - INTERVAL '6 months';,derm_treatment,date_functions,,postgres,"SELECT COUNT(DISTINCT t.treatment_id)
FROM treatments t
JOIN diagnoses d ON t.diag_id = d.diag_id
JOIN drugs dr ON t.drug_id = dr.drug_id
WHERE d.diag_name ILIKE '%psoriasis%' -- Case-insensitive search for 'psoriasis' AND dr.fda_appr_dt IS NOT NULL -- Only FDA-approved drugs AND t.end_dt IS NOT NULL -- Treatment has ended AND t.end_dt >= NOW() - INTERVAL '6 months' -- Ended within the last 6 months;",,INCORRECT RESULTS,0,0,0,0,0,5.26,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.","WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY t.start_dt ASC) AS rn FROM doctors d JOIN treatments t ON d.doc_id = t.doc_id WHERE d.year_reg = EXTRACT(YEAR FROM CURRENT_DATE) - 2 ) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;",derm_treatment,date_functions,,postgres,"SELECT d.last_name,
       d.year_reg,
       t.start_dt AS first_treatment_date,
       t.treatment_id AS first_treatment_id
FROM doctors d
JOIN treatments t ON d.doc_id = t.doc_id
WHERE d.year_reg = (CURRENT_DATE - INTERVAL '2 years');",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: integer = timestamp without time zone
LINE 7: WHERE d.year_reg = (CURRENT_DATE - INTERVAL '2 years');
                         ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT d.last_name,
       d.year_reg,
       t.start_dt AS first_treatment_date,
       t.treatment_id AS first_treatment_id
FROM doctors d
JOIN treatments t ON d.doc_id = t.doc_id
WHERE d.year_reg = (CURRENT_DATE - INTERVAL '2 years');]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment","SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events ae JOIN treatments t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10 days';",derm_treatment,date_functions,,postgres,"SELECT t.treatment_id,
       t.start_dt AS treatment_start_date,
       ae.reported_dt AS adverse_event_date,
       ae.description
FROM treatments t
JOIN adverse_events ae ON t.treatment_id = ae.treatment_id
WHERE ae.reported_dt BETWEEN t.start_dt AND (t.start_dt + INTERVAL '10 days');",,,0,1,0,0,0,6.73,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.","SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM treatments t JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND TO_DATE(cm.start_dt, 'YYYY-MM-DD') BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 WEEK' ORDER BY t.treatment_id;",derm_treatment,date_functions,,postgres,"SELECT t.treatment_id AS placebo_treatment_id,
       t.start_dt AS treatment_start_date,
       t.end_dt AS treatment_end_date,
       cm.id AS concomitant_med_id,
       cm.med_name AS concomitant_med_name,
       cm.start_dt AS concomitant_med_start_date,
       cm.end_dt AS concomitant_med_end_date
FROM treatments t
JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id
WHERE t.is_placebo = TRUE
  AND (cm.start_dt >= t.start_dt - INTERVAL '2 weeks'
       AND cm.start_dt < t.start_dt + INTERVAL '1 day');",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text >= timestamp without time zone
LINE 11:   AND (cm.start_dt >= t.start_dt - INTERVAL '2 weeks'
                            ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT t.treatment_id AS placebo_treatment_id,
       t.start_dt AS treatment_start_date,
       t.end_dt AS treatment_end_date,
       cm.id AS concomitant_med_id,
       cm.med_name AS concomitant_med_name,
       cm.start_dt AS concomitant_med_start_date,
       cm.end_dt AS concomitant_med_end_date
FROM treatments t
JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id
WHERE t.is_placebo = TRUE
  AND (cm.start_dt >= t.start_dt - INTERVAL '2 weeks'
       AND cm.start_dt < t.start_dt + INTERVAL '1 day');]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.64,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
what is average age of all registered male patients with private insurance currently?,"SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth))) AS avg_age FROM patients WHERE gender = 'Male' AND ins_type = 'private';",derm_treatment,date_functions,,postgres,"SELECT AVG(EXTRACT(YEAR
                   FROM AGE(date_of_registration))) AS avg_age
FROM patients
WHERE gender = 'Male'
  AND ins_type = 'private';",,INCORRECT RESULTS,0,0,0,0,0,4.70,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
Give me today's median merchant wallet balance for all active merchants whose category contains 'retail',"WITH retail_merchants AS (SELECT mid FROM consumer_div.merchants WHERE category ILIKE '%retail%' AND status = 'active' ), merchant_balances AS (SELECT balance FROM consumer_div.wallet_merchant_balance_daily wmbd JOIN retail_merchants rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE ) SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY balance) AS median_balance FROM merchant_balances;",ewallet,date_functions,,postgres,"WITH today AS
  (SELECT CURRENT_DATE AS today_date),
     active_retail_merchants AS
  (SELECT mid
   FROM consumer_div.merchants
   WHERE status = 'active'
     AND category LIKE '%retail%')
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (
                                          ORDER BY balance) OVER () AS median_balance
FROM consumer_div.wallet_merchant_balance_daily wmbd
JOIN active_retail_merchants arm ON wmbd.merchant_id = arm.mid
WHERE DATE(wmbd.updated_at) =
    (SELECT today_date
     FROM today);",,"EXECUTION ERROR: (psycopg2.errors.FeatureNotSupported) OVER is not supported for ordered-set aggregate percentile_cont
LINE 8: SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (
               ^

[SQL: WITH today AS
  (SELECT CURRENT_DATE AS today_date),
     active_retail_merchants AS
  (SELECT mid
   FROM consumer_div.merchants
   WHERE status = 'active'
     AND category LIKE '%%retail%%')
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (
                                          ORDER BY balance) OVER () AS median_balance
FROM consumer_div.wallet_merchant_balance_daily wmbd
JOIN active_retail_merchants arm ON wmbd.merchant_id = arm.mid
WHERE DATE(wmbd.updated_at) =
    (SELECT today_date
     FROM today);]
(Background on this error at: https://sqlalche.me/e/20/tw8g)",0,0,0,1,0,7.20,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?,"SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM consumer_div.user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM consumer_div.user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01' );",ewallet,date_functions,,postgres,"SELECT AVG(tx_limit_daily) AS avg_daily_limit,
       AVG(tx_limit_monthly) AS avg_monthly_limit
FROM consumer_div.user_setting_snapshot
WHERE snapshot_date =
    (SELECT MIN(snapshot_date)
     FROM consumer_div.user_setting_snapshot
     WHERE EXTRACT(YEAR
                   FROM snapshot_date) = 2023);",,,0,1,0,0,0,5.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
"Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date","WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM consumer_div.coupons c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM consumer_div.merchants m JOIN earliest_coupons ec ON m.mid = ec.merchant_id JOIN consumer_div.coupons c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= m.created_at + INTERVAL '1 year';",ewallet,date_functions,,postgres,"SELECT m.mid AS merchant_id,
       m.created_at AS registration_date,
       c.cid AS earliest_coupon_id,
       c.start_date AS earliest_coupon_start_date
FROM consumer_div.merchants m
JOIN consumer_div.coupons c ON m.mid = c.merchant_id
WHERE c.start_date >= m.created_at - INTERVAL '1 year'
ORDER BY m.mid,
         c.start_date;",,INCORRECT RESULTS,0,0,0,0,0,7.15,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
"Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.","SELECT u.username, u.email, u.created_at FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND u.created_at + INTERVAL '1 year' WHERE n.user_id IS NULL;",ewallet,date_functions,,postgres,"SELECT u.username,
       u.email,
       u.created_at AS signup_date
FROM consumer_div.users u
LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id
AND n.created_at BETWEEN u.created_at AND DATEADD(YEAR, 1, u.created_at)
WHERE n.id IS NULL;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""year"" does not exist
LINE 6: AND n.created_at BETWEEN u.created_at AND DATEADD(YEAR, 1, u...
                                                          ^

[SQL: SELECT u.username,
       u.email,
       u.created_at AS signup_date
FROM consumer_div.users u
LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id
AND n.created_at BETWEEN u.created_at AND DATEADD(YEAR, 1, u.created_at)
WHERE n.id IS NULL;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.01,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
what was the average user session duration in seconds split by device_type?,"SELECT device_type, AVG(EXTRACT(EPOCH FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM consumer_div.user_sessions WHERE session_end_ts IS NOT NULL GROUP BY device_type;",ewallet,date_functions,,postgres,"SELECT device_type,
       AVG(EXTRACT(EPOCH
                   FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds
FROM consumer_div.user_sessions
GROUP BY device_type;",,,0,1,0,0,0,5.34,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
How many lakes are there in each state?,"SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY lake_count DESC;SELECT s.state_name, COUNT(l.lake_name) AS lake_count FROM state s LEFT JOIN lake l ON s.state_name = l.state_name GROUP BY s.state_name ORDER BY s.state_name;",geography,group_by,,postgres,"SELECT state_name,
       COUNT(*) AS lake_count
FROM lake
GROUP BY state_name;",,,0,1,0,0,0,4.00,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many mountains are there in each country?,"SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY number_of_mountains DESC;",geography,group_by,,postgres,"SELECT country_name,
       COUNT(*) AS mountain_count
FROM mountain
GROUP BY country_name;",,,0,1,0,0,0,4.04,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many rivers flow through each country?,"SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY number_of_rivers DESC;",geography,group_by,,postgres,"SELECT country_name,
       COUNT(*) AS river_count
FROM river
GROUP BY country_name;",,,0,1,0,0,0,3.99,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the average length of rivers in each country?,"SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC NULLS LAST;",geography,group_by,,postgres,"SELECT country_name,
       AVG(LENGTH) AS avg_river_length
FROM river
GROUP BY country_name;",,,0,1,0,0,0,3.99,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the total population in cities by country?,"SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC NULLS LAST;",geography,group_by,,postgres,"SELECT country_name,
       SUM(population) AS total_population
FROM city
GROUP BY country_name;",,,0,1,0,0,0,3.89,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Get the cities in the United States and their population,"SELECT city_name, population FROM city WHERE country_name ILIKE '%United States%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT city_name,
       population
FROM city
WHERE country_name = 'United States';",,,0,1,0,0,0,3.90,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the names and altitudes of the mountains in Nepal?,"SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name ILIKE '%Nepal%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT mountain_name,
       mountain_altitude
FROM mountain
WHERE country_name = 'Nepal';",,,0,1,0,0,0,4.03,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the names and areas of the lakes in Michigan?,"SELECT lake_name, area FROM lake WHERE state_name ILIKE '%Michigan%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT lake_name,
       area
FROM lake
WHERE state_name = 'Michigan';",,,0,1,0,0,0,3.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which rivers traverse at least 3 cities/landmarks?,"SELECT river_name FROM river WHERE traverse LIKE '%,%,%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT river_name,
       COUNT(DISTINCT TRIM(traverse)) AS num_cities_landmarks
FROM river
GROUP BY river_name
HAVING COUNT(DISTINCT TRIM(traverse)) >= 3;",,INCORRECT RESULTS,0,0,0,0,0,5.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which states have fewer than a hundred thousand people?,SELECT state_name FROM state WHERE population < 100000;,geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT state_name
FROM state
WHERE population < 100000;",,,0,1,0,0,0,3.94,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"What are the highest mountains in meters, ordered from highest to lowest altitude?","SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC NULLS LAST;",geography,order_by,,postgres,"SELECT mountain_name,
       mountain_altitude
FROM mountain
ORDER BY mountain_altitude DESC;",,,0,1,0,0,0,4.31,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"What are the longest rivers in meters, ordered from longest to shortest?","SELECT river.river_name, river.length FROM river ORDER BY river.length DESC NULLS LAST;",geography,order_by,,postgres,"SELECT river_name,
       LENGTH AS river_length_meters
FROM river
ORDER BY LENGTH DESC;",,,0,1,0,0,0,4.16,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the top 5 cities with the highest population? Give both city names and the population.,"SELECT city.city_name, city.population FROM city ORDER BY city.population DESC NULLS LAST LIMIT 5;",geography,order_by,,postgres,"SELECT city_name,
       population
FROM city
ORDER BY population DESC
LIMIT 5;",,,0,1,0,0,0,4.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which lakes have the largest areas in square kilometers, ordered from largest to smallest?","SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC NULLS LAST;",geography,order_by,,postgres,"SELECT lake_name,
       area
FROM lake
ORDER BY area DESC;",,,0,1,0,0,0,4.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which states have the highest population density in people per square kilometer, ordered from highest to lowest?","SELECT state.state_name, state.density FROM state ORDER BY state.density DESC NULLS LAST;",geography,order_by,,postgres,"SELECT state_name,
       density AS population_density_per_sq_km
FROM state
ORDER BY density DESC;",,,0,1,0,0,0,4.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Get the ratio of population per area for each state,"SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;",geography,ratio,,postgres,"SELECT state_name,
       population,
       area,
       (population / area) AS population_density
FROM state;",,,0,1,0,0,0,4.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.","SELECT city.city_name, CAST(city.population AS float) / NULLIF(state.population, 0) AS population_ratio FROM city JOIN state ON city.state_name = state.state_name ORDER BY population_ratio DESC NULLS LAST;",geography,ratio,,postgres,"SELECT c.city_name,
       (c.population::numeric / s.population) AS population_proportion
FROM city c
JOIN state s ON c.state_name = s.state_name;",,,0,1,0,0,0,5.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly,"SELECT (CAST(everest.mountain_altitude AS FLOAT) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;",geography,ratio,,postgres,"SELECT
  (SELECT mountain_altitude
   FROM mountain
   WHERE mountain_name = 'Mount Everest') /
  (SELECT mountain_altitude
   FROM mountain
   WHERE mountain_name = 'Dhaulagiri') AS altitude_ratio;",,INCORRECT RESULTS,0,0,0,0,0,4.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the length of the Mississippi River to the length of the Rhine River?,"SELECT CAST((SELECT length FROM river WHERE LOWER(river_name) LIKE '%mississippi%') AS FLOAT) / NULLIF((SELECT length FROM river WHERE LOWER(river_name) LIKE '%rhine%'), 0) AS ratio ;",geography,ratio,,postgres,"SELECT
  (SELECT LENGTH
   FROM river
   WHERE river_name = 'Mississippi')::numeric /
  (SELECT LENGTH
   FROM river
   WHERE river_name = 'Rhine') AS ratio;",,,0,1,0,0,0,4.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the population of the United States to the population of California?,"SELECT CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.country_name) LIKE '%united states%') AS FLOAT) / CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.state_name) LIKE '%california%') AS FLOAT) AS population_ratio FROM state;",geography,ratio,,postgres,"SELECT
  (SELECT population
   FROM state
   WHERE country_name = 'United States')::float /
  (SELECT population
   FROM state
   WHERE state_name = 'California') AS population_ratio;",,"EXECUTION ERROR: (psycopg2.errors.CardinalityViolation) more than one row returned by a subquery used as an expression

[SQL: SELECT
  (SELECT population
   FROM state
   WHERE country_name = 'United States')::float /
  (SELECT population
   FROM state
   WHERE state_name = 'California') AS population_ratio;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.97,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the average length of rivers per country in countries with a lake?,"SELECT l.country_name, AVG(r.length) AS average_length FROM river r JOIN lake l ON r.country_name = l.country_name GROUP BY 1;",geography,table_join,,postgres,"SELECT r.country_name,
       AVG(r.length) AS avg_river_length
FROM river r
JOIN lake l ON r.country_name = l.country_name
GROUP BY r.country_name;",,,0,1,0,0,0,5.35,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the highest point in each state and what is the population density of that state?,"SELECT highlow.state_name, highlow.highest_point, state.density FROM highlow JOIN state ON highlow.state_name = state.state_name;",geography,table_join,,postgres,"SELECT h.state_name AS state,
       h.highest_point AS highest_point_in_state,
       s.density AS population_density_of_state
FROM highlow h
JOIN state s ON h.state_name = s.state_name;",,,0,1,0,0,0,4.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which countries have both lakes and rivers?,SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;,geography,table_join,,postgres,"SELECT DISTINCT c.country_name
FROM
  (SELECT country_name
   FROM lake
   UNION ALL SELECT country_name
   FROM river) AS combined_countries
JOIN city ON combined_countries.country_name = city.country_name
GROUP BY c.country_name
HAVING COUNT(DISTINCT CASE
                          WHEN TABLE_NAME = 'lake' THEN 1
                      END) > 0
AND COUNT(DISTINCT CASE
                       WHEN TABLE_NAME = 'river' THEN 1
                   END) > 0;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""c""
LINE 1: SELECT DISTINCT c.country_name
                        ^

[SQL: SELECT DISTINCT c.country_name
FROM
  (SELECT country_name
   FROM lake
   UNION ALL SELECT country_name
   FROM river) AS combined_countries
JOIN city ON combined_countries.country_name = city.country_name
GROUP BY c.country_name
HAVING COUNT(DISTINCT CASE
                          WHEN TABLE_NAME = 'lake' THEN 1
                      END) > 0
AND COUNT(DISTINCT CASE
                       WHEN TABLE_NAME = 'river' THEN 1
                   END) > 0;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.19,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which lakes have a name that starts with ""Lake""? They should be located in states with an area greater than 1000 square kilometers.",SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND lake.lake_name ilike 'Lake%' ORDER BY lake.lake_name NULLS LAST;,geography,table_join,,postgres,"SELECT l.lake_name
FROM lake l
JOIN state s ON l.state_name = s.state_name
WHERE l.lake_name LIKE 'Lake%'
  AND s.area > 1000;",,,0,1,0,0,0,4.34,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which states border the state where lake ontario is?,SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE lake.lake_name ilike '%Ontario%';,geography,table_join,,postgres,"SELECT state_name
FROM lake
WHERE lake_name = 'Lake Ontario';",,INCORRECT RESULTS,0,0,0,0,0,6.37,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many restaurants are there in each city? Order the results by the number of restaurants in descending order.,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT city_name,
       COUNT(*) AS restaurant_count
FROM restaurant
GROUP BY city_name
ORDER BY restaurant_count DESC;",,,0,1,0,0,0,4.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants serve Italian food in each city?,"SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE restaurant.food_type ILIKE '%Italian%' GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT r.city_name,
       COUNT(*) AS number_of_restaurants
FROM restaurant r
WHERE r.food_type = 'Italian'
GROUP BY r.city_name;",,,0,1,0,0,0,4.23,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants serving each type of food?,"SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT food_type,
       AVG(rating) AS average_rating
FROM restaurant
GROUP BY food_type;",,,0,1,0,0,0,3.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the total count of restaurants in each city?,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;",restaurants,group_by,,postgres,"SELECT city_name,
       COUNT(*) AS restaurant_count
FROM restaurant
GROUP BY city_name;",,,0,1,0,0,0,3.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the total number of restaurants serving each type of food?,"SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;",restaurants,group_by,,postgres,"SELECT food_type,
       COUNT(*) AS total_restaurants
FROM restaurant
GROUP BY food_type;",,,0,1,0,0,0,4.21,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the restaurants in Los Angeles that have a rating higher than 4?,SELECT DISTINCT restaurant.name FROM restaurant WHERE restaurant.city_name ILIKE '%Los Angeles%' AND restaurant.rating > 4 ORDER BY restaurant.name NULLS LAST;,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT name
FROM restaurant
WHERE city_name = 'Los Angeles'
  AND rating > 4;",,,0,1,0,0,0,3.97,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the restaurants that serve Italian food?,SELECT restaurant.name FROM restaurant WHERE LOWER(restaurant.food_type) ILIKE '%italian%';,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT name
FROM restaurant
WHERE food_type = 'Italian';",,,0,1,0,0,0,3.73,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What's the name and food type of all the restaurants located on Market St in San Francisco?,"SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE location.street_name ILIKE '%Market St%' AND location.city_name ILIKE '%San Francisco%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT r.name,
       r.food_type
FROM restaurant r
JOIN LOCATION l ON r.city_name = l.city_name
AND r.street_name = l.street_name
WHERE l.street_name = 'Market St'
  AND l.city_name = 'San Francisco';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r.street_name does not exist
LINE 5: AND r.street_name = l.street_name
            ^
HINT:  Perhaps you meant to reference the column ""l.street_name"".

[SQL: SELECT r.name,
       r.food_type
FROM restaurant r
JOIN LOCATION l ON r.city_name = l.city_name
AND r.street_name = l.street_name
WHERE l.street_name = 'Market St'
  AND l.city_name = 'San Francisco';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?,"SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND restaurant.city_name ILIKE '%New York%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT name,
       rating
FROM restaurant
WHERE rating > 4
  AND city_name = 'New York';",,,0,1,0,0,0,3.83,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which city has the highest-rated restaurant?,SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating=(SELECT MAX(rating) FROM restaurant);,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT l.city_name
FROM restaurant r
JOIN LOCATION l ON r.city_name = l.city_name
WHERE r.rating =
    (SELECT MAX(rating)
     FROM restaurant);",,,0,1,0,0,0,4.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
List the restaurants starting from the best ratings to the lowest,"SELECT {name, id}, rating FROM restaurant ORDER BY rating DESC;",restaurants,order_by,,postgres,"SELECT id,
       name,
       rating,
       food_type,
       city_name
FROM restaurant
ORDER BY rating DESC;",,,0,1,0,0,0,4.09,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the top 3 restaurants with the highest ratings?,SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC NULLS LAST LIMIT 3;,restaurants,order_by,,postgres,"SELECT name
FROM restaurant
ORDER BY rating DESC
LIMIT 3;",,,0,1,0,0,0,3.93,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants in each region? Order the results by the region name.,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY geographic.region NULLS LAST;",restaurants,order_by,,postgres,"SELECT g.region,
       AVG(r.rating) AS average_rating
FROM restaurant r
JOIN LOCATION l ON r.city_name = l.city_name
JOIN geographic g ON l.city_name = g.city_name
GROUP BY g.region
ORDER BY g.region;",,,0,1,0,0,0,5.57,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.,SELECT name FROM restaurant WHERE food_type ILIKE '%Italian%' OR city_name ILIKE '%New York%' ORDER BY name NULLS LAST;,restaurants,order_by,,postgres,"SELECT id,
       name,
       food_type,
       city_name
FROM restaurant
WHERE food_type = 'Italian'
  OR city_name = 'New York'
ORDER BY name;",,,0,1,0,0,0,5.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which street has the most number of restaurants?,SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(restaurant_id) DESC LIMIT 1;,restaurants,order_by,,postgres,"SELECT street_name,
       COUNT(*) AS restaurant_count
FROM LOCATION
GROUP BY street_name
ORDER BY restaurant_count DESC
LIMIT 1;",,,0,1,0,0,0,4.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of Italian restaurants out of all restaurants in Los Angeles?,"SELECT CAST(COUNT(CASE WHEN food_type ILIKE '%Italian%' THEN 1 END) AS FLOAT) / NULLIF(COUNT(food_type), 0) AS ratio FROM restaurant WHERE city_name ILIKE '%Los Angeles%';",restaurants,ratio,,postgres,"SELECT (COUNT(CASE
                  WHEN food_type = 'Italian' THEN 1
              END) * 1.0 / COUNT(*)) AS italian_restaurant_ratio
FROM restaurant
WHERE city_name = 'Los Angeles';",,,0,1,0,0,0,4.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively,"SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN LOWER(restaurant.food_type) NOT LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(restaurant.city_name) ILIKE '%san francisco%';",restaurants,ratio,,postgres,"SELECT (COUNT(CASE
                  WHEN LOWER(food_type) = 'vegan' THEN id
              END) / COUNT(CASE
                               WHEN LOWER(food_type) IN ('vegan', 'non-vegan') THEN id
                           END)) AS vegan_to_non_vegan_ratio
FROM restaurant
WHERE city_name = 'San Francisco';",,INCORRECT RESULTS,0,0,0,0,0,5.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?,"SELECT CAST(COUNT(CASE WHEN rating > 4 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN rating < 4 THEN 1 END), 0) AS ratio FROM restaurant WHERE city_name ILIKE 'New York';",restaurants,ratio,,postgres,"SELECT (COUNT(CASE
                  WHEN rating > 4 THEN id
              END) * 1.0 / COUNT(CASE
                                     WHEN rating < 4 THEN id
                                 END)) AS ratio
FROM restaurant
WHERE city_name = 'New York';",,,0,1,0,0,0,5.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?,"SELECT CAST(SUM(CASE WHEN restaurant.rating > 4.0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN restaurant.rating < 4.0 THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant;",restaurants,ratio,,postgres,"SELECT (SUM(CASE
                WHEN rating > 4.0 THEN 1
                ELSE 0
            END) / COUNT(*))::numeric AS ratio_above_4,
       (SUM(CASE
                WHEN rating < 4.0 THEN 1
                ELSE 0
            END) / COUNT(*))::numeric AS ratio_below_4
FROM restaurant;",,INCORRECT RESULTS,0,0,0,0,0,5.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.,"SELECT COUNT(*)::float / NULLIF((SELECT COUNT(*) FROM restaurant), 0) AS rating_ratio FROM restaurant WHERE rating > 4.5;",restaurants,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE rating > 4.5) * 1.0 / COUNT(*)) AS ratio
FROM restaurant;",,,0,1,0,0,0,4.71,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants are there in each region?,"SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;",restaurants,table_join,,postgres,"SELECT g.region,
       COUNT(r.id) AS restaurant_count
FROM restaurant r
JOIN LOCATION l ON r.city_name = l.city_name
JOIN geographic g ON l.city_name = g.city_name
GROUP BY g.region;",,INCORRECT RESULTS,0,0,0,0,0,4.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants serve Italian food in each region?,"SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,table_join,,postgres,"SELECT g.region,
       COUNT(r.id) AS number_of_italian_restaurants
FROM restaurant r
JOIN geographic g ON r.city_name = g.city_name
WHERE r.food_type = 'Italian'
GROUP BY g.region;",,,0,1,0,0,0,4.77,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
"What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count","SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;",restaurants,table_join,,postgres,"SELECT r1.city_name AS city_name,
       r1.name AS restaurant_name,
       COUNT(r2.id) AS restaurant_count
FROM restaurant r1
JOIN restaurant r2 ON r1.name = r2.name
AND r1.city_name = r2.city_name
AND r1.restaurant_id != r2.restaurant_id
GROUP BY r1.city_name,
         r1.name
HAVING COUNT(r2.id) > 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r1.restaurant_id does not exist
LINE 7: AND r1.restaurant_id != r2.restaurant_id
            ^

[SQL: SELECT r1.city_name AS city_name,
       r1.name AS restaurant_name,
       COUNT(r2.id) AS restaurant_count
FROM restaurant r1
JOIN restaurant r2 ON r1.name = r2.name
AND r1.city_name = r2.city_name
AND r1.restaurant_id != r2.restaurant_id
GROUP BY r1.city_name,
         r1.name
HAVING COUNT(r2.id) > 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants in each region?,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN restaurant ON geographic.city_name=restaurant.city_name GROUP BY 1;",restaurants,table_join,,postgres,"SELECT r.region,
       AVG(rest.rating) AS average_rating
FROM restaurant rest
JOIN LOCATION loc ON rest.city_name = loc.street_name
JOIN geographic geo ON loc.city_name = geo.city_name
GROUP BY r.region;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""r""
LINE 1: SELECT r.region,
               ^

[SQL: SELECT r.region,
       AVG(rest.rating) AS average_rating
FROM restaurant rest
JOIN LOCATION loc ON rest.city_name = loc.street_name
JOIN geographic geo ON loc.city_name = geo.city_name
GROUP BY r.region;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants that serve Mexican food in each city?,"SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;",restaurants,table_join,,postgres,"SELECT r.city_name,
       AVG(r.rating) AS average_rating
FROM restaurant r
WHERE r.food_type = 'Mexican'
GROUP BY r.city_name;",,,0,1,0,0,0,4.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many authors have published more than 2 papers?,SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;,scholar,group_by,,postgres,"SELECT COUNT(DISTINCT authorid)
FROM writes
WHERE paperid IN
    (SELECT paperid
     FROM writes
     GROUP BY paperid
     HAVING COUNT(authorid) > 2);",,INCORRECT RESULTS,0,0,0,0,0,4.81,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
How many keyphrases are associated with each paper?,"SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY keyphrase_count DESC NULLS LAST;SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper p JOIN paperkeyphrase pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC NULLS LAST;",scholar,group_by,,postgres,"SELECT p.paperid,
       COUNT(pk.keyphraseid) AS num_keyphrases
FROM paper p
JOIN paperkeyphrase pk ON p.paperid = pk.paperid
GROUP BY p.paperid;",,,0,1,0,0,0,4.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers associated with each dataset?,"SELECT paperdataset.datasetid, COUNT(DISTINCT paperdataset.paperid) AS total_papers FROM paperdataset GROUP BY paperdataset.datasetid;SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;",scholar,group_by,,postgres,"SELECT pd.datasetid,
       COUNT(pd.paperid) AS num_papers
FROM paperdataset pd
GROUP BY pd.datasetid;",,,0,1,0,0,0,4.89,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers published in each year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year;",scholar,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS total_papers
FROM paper
GROUP BY YEAR;",,,0,1,0,0,0,4.15,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers published per year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year NULLS LAST;",scholar,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS total_papers_per_year
FROM paper
GROUP BY YEAR;",,,0,1,0,0,0,4.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many authors wrote papers that were published in the journal ""Science"" in the year 2020?",SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE journal.journalname ILIKE '%Science%' AND paper.year = 2020;,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names using exact matches.
Filter keyphrases and journal names with case-insensitive matching.
",postgres,"SELECT COUNT(DISTINCT w.authorid) AS author_count
FROM paper p
JOIN venue v ON p.venueid = v.venueid
JOIN writes w ON p.paperid = w.paperid
WHERE p.year = 2020
  AND v.venuename = 'Science';",,INCORRECT RESULTS,0,0,0,0,0,5.44,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers are associated with the keyphrase ""machine learning"" and were published in the journal named ""IEEE Transactions on Pattern Analysis and Machine Intelligence""?",SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%machine learning%' AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names, journal names, using exact matches.
Filter keyphrases with case-insensitive matching.
",postgres,"SELECT COUNT(DISTINCT p.paperid) AS paper_count
FROM paperkeyphrase pkp
JOIN paper p ON pkp.paperid = p.paperid
JOIN keyphrase k ON pkp.keyphraseid = k.keyphraseid
JOIN paperjournal pj ON p.paperid = pj.paperid
JOIN journal j ON pj.journalid = j.journalid
WHERE k.keyphrasename = 'machine learning'
  AND j.venuename = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) relation ""paperjournal"" does not exist
LINE 5: JOIN paperjournal pj ON p.paperid = pj.paperid
             ^

[SQL: SELECT COUNT(DISTINCT p.paperid) AS paper_count
FROM paperkeyphrase pkp
JOIN paper p ON pkp.paperid = p.paperid
JOIN keyphrase k ON pkp.keyphraseid = k.keyphraseid
JOIN paperjournal pj ON p.paperid = pj.paperid
JOIN journal j ON pj.journalid = j.journalid
WHERE k.keyphrasename = 'machine learning'
  AND j.venuename = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,7.12,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers were published in the journal ""nature"" in the year 2020?",SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND journal.journalname ILIKE '%nature%';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter strings with case-insensitive matching
",postgres,"SELECT COUNT(paperid) AS paper_count
FROM paper
JOIN venue ON paper.venueid = venue.venueid
WHERE venue.venuename = 'nature'
  AND paper.year = 2020;",,INCORRECT RESULTS,0,0,0,0,0,4.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the names of the authors who wrote the paper with the title ""The Effects of Climate Change on Agriculture""?",SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';,scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match
",postgres,"SELECT w.authorname
FROM paper p
JOIN writes w ON p.paperid = w.paperid
WHERE p.title = 'The Effects of Climate Change on Agriculture';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column w.authorname does not exist
LINE 1: SELECT w.authorname
               ^

[SQL: SELECT w.authorname
FROM paper p
JOIN writes w ON p.paperid = w.paperid
WHERE p.title = 'The Effects of Climate Change on Agriculture';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.75,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?","SELECT venue.venuename, COUNT(DISTINCT paper.paperid) FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE paper.venueid = (SELECT venueid FROM paper WHERE paperid = 2 ) GROUP BY venue.venuename;",scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings using ILIKE
",postgres,"SELECT v.venuename,
       COUNT(p.paperid) AS total_papers_in_venue
FROM paper p
JOIN venue v ON p.venueid = v.venueid
WHERE p.paperid = 2
GROUP BY v.venuename;",,INCORRECT RESULTS,0,0,0,0,0,5.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order","SELECT cite.citingpaperid, COUNT(*) AS citation_count FROM cite GROUP BY cite.citingpaperid ORDER BY citation_count DESC NULLS LAST;SELECT p.paperid, p.numciting FROM paper p WHERE p.numciting > 0 ORDER BY p.numciting DESC;SELECT p.title, COUNT(c.citedpaperid) AS num_cited_papers FROM paper p JOIN cite c ON p.paperid = c.citingpaperid GROUP BY p.title ORDER BY num_cited_papers DESC;",scholar,order_by,,postgres,"SELECT citingpaperid AS paper_id,
       COUNT(citedpaperid) AS num_citations
FROM cite
GROUP BY citingpaperid
ORDER BY num_citations DESC;",,,0,1,0,0,0,5.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?",SELECT journal.journalname FROM journal ORDER BY LENGTH(journal.journalname) ASC NULLS LAST;,scholar,order_by,,postgres,"SELECT journalname
FROM journal
ORDER BY LENGTH(journalname) ASC;",,,0,1,0,0,0,3.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the titles of the papers published in the year 2020, ordered alphabetically?",SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY paper.title ASC NULLS LAST;,scholar,order_by,,postgres,"SELECT title
FROM paper
WHERE YEAR = 2020
ORDER BY title ASC;",,,0,1,0,0,0,4.20,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?","SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY paperkeyphrase.paperid ASC NULLS LAST;",scholar,order_by,,postgres,"SELECT paperid AS paper_id,
       COUNT(keyphraseid) AS num_keyphrases
FROM paperkeyphrase
GROUP BY paperid
ORDER BY paperid ASC;",,,0,1,0,0,0,4.73,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which papers have the highest number of authors, ordered by the number of authors in descending order?","SELECT {paper.paperid, paper.title}, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY {} ORDER BY num_authors DESC;",scholar,order_by,,postgres,"SELECT p.paperid,
       p.title,
       COUNT(w.authorid) AS num_authors
FROM paper p
JOIN writes w ON p.paperid = w.paperid
GROUP BY p.paperid,
         p.title
ORDER BY num_authors DESC
LIMIT 1;",,INCORRECT RESULTS,0,0,0,0,0,6.25,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?,"SELECT CAST(COUNT(CASE WHEN dataset_count > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN dataset_count = 1 THEN 1 END), 0) AS ratio FROM (SELECT paperdataset.paperid, COUNT(paperdataset.datasetid) AS dataset_count FROM paperdataset GROUP BY paperdataset.paperid) AS subquery;",scholar,ratio,,postgres,"WITH dataset_counts AS
  (SELECT paperid,
          COUNT(datasetid) AS num_datasets
   FROM paperdataset
   GROUP BY paperid)
SELECT (SUM(CASE
                WHEN num_datasets > 1 THEN 1
                ELSE 0
            END) * 1.0 / SUM(num_datasets = 1)) AS proportion
FROM dataset_counts;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function sum(boolean) does not exist
LINE 9:             END) * 1.0 / SUM(num_datasets = 1)) AS proportio...
                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: WITH dataset_counts AS
  (SELECT paperid,
          COUNT(datasetid) AS num_datasets
   FROM paperdataset
   GROUP BY paperid)
SELECT (SUM(CASE
                WHEN num_datasets > 1 THEN 1
                ELSE 0
            END) * 1.0 / SUM(num_datasets = 1)) AS proportion
FROM dataset_counts;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?,"SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;",scholar,ratio,,postgres,"WITH author_paper_counts AS
  (SELECT w.authorid,
          COUNT(w.paperid) AS num_papers
   FROM writes w
   GROUP BY w.authorid),
     author_counts AS
  (SELECT num_papers,
          COUNT(authorid) AS count_authors
   FROM author_paper_counts
   GROUP BY num_papers)
SELECT (SUM(CASE
                WHEN ac.num_papers >= 3 THEN ac.count_authors
                ELSE 0
            END))::float / SUM(ac.count_authors) AS ratio
FROM author_counts ac;",,INCORRECT RESULTS,0,0,0,0,0,6.40,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers published in the year 2020 to the total number of papers in the database?,"SELECT CAST(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) AS FLOAT) / NULLIF(COUNT(paper.paperid), 0) AS ratio FROM paper;",scholar,ratio,,postgres,"WITH TotalPapers AS
  (SELECT COUNT(*) AS total_count
   FROM paper),
     PapersIn2020 AS
  (SELECT COUNT(*) AS count_2020
   FROM paper
   WHERE YEAR = 2020)
SELECT (count_2020::numeric / total_count) AS ratio
FROM PapersIn2020,
     TotalPapers;",,,0,1,0,0,0,5.53,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?,"SELECT CAST(COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END), 0) AS ratio FROM paper;",scholar,ratio,,postgres,"WITH cited_counts AS
  (SELECT numcitedby,
          COUNT(*) AS paper_count
   FROM cite
   GROUP BY numcitedby)
SELECT (SUM(CASE
                WHEN numcitedby >= 2 THEN paper_count
                ELSE 0
            END) / SUM(CASE
                           WHEN numcitedby < 2 THEN paper_count
                           ELSE 0
                       END))::numeric AS ratio
FROM cited_counts;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""numcitedby"" does not exist
LINE 2:   (SELECT numcitedby,
                  ^

[SQL: WITH cited_counts AS
  (SELECT numcitedby,
          COUNT(*) AS paper_count
   FROM cite
   GROUP BY numcitedby)
SELECT (SUM(CASE
                WHEN numcitedby >= 2 THEN paper_count
                ELSE 0
            END) / SUM(CASE
                           WHEN numcitedby < 2 THEN paper_count
                           ELSE 0
                       END))::numeric AS ratio
FROM cited_counts;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.10,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?,"SELECT CAST(COUNT(DISTINCT CASE WHEN keyphrase_count > 1 THEN subquery.paperid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN keyphrase_count =1 THEN subquery.paperid END), 0) AS ratio FROM (SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid) AS subquery;",scholar,ratio,,postgres,"WITH keyphrase_counts AS
  (SELECT paperid,
          COUNT(keyphraseid) AS num_keyphrases
   FROM paperkeyphrase
   GROUP BY paperid)
SELECT (SUM(CASE
                WHEN num_keyphrases > 1 THEN 1
                ELSE 0
            END))::float / SUM(CASE
                                   WHEN num_keyphrases = 1 THEN 1
                                   ELSE 0
                               END) AS ratio
FROM keyphrase_counts;",,,0,1,0,0,0,5.77,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers cite each paper in the dataset named ""COVID-19 Research""?","SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE datasetname ILIKE '%COVID-19 Research%') GROUP BY paperdataset.paperid ORDER BY citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper p JOIN paperdataset pd ON p.paperid = pd.paperid JOIN cite c ON p.paperid = c.citedpaperid JOIN dataset d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC NULLS LAST;",scholar,table_join,,postgres,"SELECT p1.paperid AS cited_paper_id,
       COUNT(p2.citedpaperid) AS num_citing_papers
FROM paper p1
JOIN cite c ON p1.paperid = c.citedpaperid
JOIN paperdataset pd ON p1.paperid = pd.paperid
JOIN dataset d ON pd.datasetid = d.datasetid
WHERE d.datasetname = 'COVID-19 Research'
GROUP BY p1.paperid;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""p2""
LINE 2:        COUNT(p2.citedpaperid) AS num_citing_papers
                     ^

[SQL: SELECT p1.paperid AS cited_paper_id,
       COUNT(p2.citedpaperid) AS num_citing_papers
FROM paper p1
JOIN cite c ON p1.paperid = c.citedpaperid
JOIN paperdataset pd ON p1.paperid = pd.paperid
JOIN dataset d ON pd.datasetid = d.datasetid
WHERE d.datasetname = 'COVID-19 Research'
GROUP BY p1.paperid;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.33,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of papers published in each journal, ordered by the journal name?","SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY journal.journalname NULLS LAST;",scholar,table_join,,postgres,"SELECT j.journalname,
       COUNT(p.paperid) AS num_papers
FROM paper p
JOIN journal j ON p.journalid = j.journalid
GROUP BY j.journalname
ORDER BY j.journalname;",,,0,1,0,0,0,4.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of unique keyphrases associated with papers published in the journal with ""IEEE Transactions"" in its name?",SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE journal.journalname ILIKE '%IEEE Transactions%';,scholar,table_join,,postgres,"SELECT COUNT(DISTINCT pk.keyphraseid) AS total_unique_keyphrases
FROM paper p
JOIN journal j ON p.journalid = j.journalid
JOIN paperkeyphrase pk ON p.paperid = pk.paperid
WHERE j.journalname LIKE '%IEEE Transactions%';",,,0,1,0,0,0,5.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which authors have published the most papers, ordered by the number of papers they have published in descending order?","SELECT {author.authorname, author.authorid}, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY {} ORDER BY number_of_papers DESC NULLS LAST;",scholar,table_join,,postgres,"SELECT w.authorid,
       a.authorname,
       COUNT(w.paperid) AS num_papers
FROM writes w
JOIN author a ON w.authorid = a.authorid
GROUP BY w.authorid,
         a.authorname
ORDER BY num_papers DESC;",,,0,1,0,0,0,5.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which papers are associated with the keyphrase ""Machine Learning""?","SELECT {paper.title,paper.paperid} FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%Machine Learning%';",scholar,table_join,,postgres,"SELECT p.title
FROM paper p
JOIN paperkeyphrase pk ON p.paperid = pk.paperid
WHERE pk.keyphraseid =
    (SELECT keyphraseid
     FROM keyphrase
     WHERE keyphrasename = 'Machine Learning');",,,0,1,0,0,0,4.84,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
How many months between June 2021 and December 2021 had reviews?,SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;,yelp,date_functions,,postgres,"SELECT COUNT(DISTINCT MONTH)
FROM review
WHERE YEAR = 2021
  AND (MONTH >= 'June'
       AND MONTH <= 'December');",,INCORRECT RESULTS,0,0,0,0,0,4.15,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were there 2 months before the review with id 3?,"SELECT COUNT(*) AS review_count FROM review WHERE TO_DATE(CAST(review.year AS TEXT) || '-' || CASE review.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') = (SELECT TO_DATE(CAST(r.year AS TEXT) || '-' || CASE r.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') - INTERVAL '2 months' FROM review r WHERE r.rid = 3);",yelp,date_functions,,postgres,"SELECT COUNT(*)
FROM review
WHERE MONTH || ' ' || YEAR =
    (SELECT TO_CHAR(
                      (SELECT DATE_TRUNC('month', TO_DATE(MONTH || ' ' || YEAR, 'Month YYYY')) - INTERVAL '2 months')::date, 'Month YYYY')
     FROM review
     WHERE rid = 3);",,INCORRECT RESULTS,0,0,0,0,0,6.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were written for businesses located in California in the last 10 calendar months (not including the current month)?,"SELECT count(*) AS review_count FROM review r JOIN business b ON r.business_id = b.business_id WHERE b.state = 'CA' AND (r.year * 12 + extract(MONTH FROM to_date(r.month, 'Month'))) >= (extract(YEAR FROM CURRENT_DATE) * 12 + extract(MONTH FROM CURRENT_DATE) - 10);",yelp,date_functions,,postgres,"SELECT COUNT(r.rid) AS review_count
FROM review r
JOIN business b ON r.business_id = b.business_id
WHERE b.state = 'CA'
  AND r.year >= EXTRACT(YEAR
                        FROM CURRENT_DATE - INTERVAL '10 months')
  AND r.month NOT IN
    (SELECT DISTINCT MONTH
     FROM generate_series(
                            (SELECT EXTRACT(MONTH
                                            FROM CURRENT_DATE) - 10 + 1),
                            (SELECT EXTRACT(MONTH
                                            FROM CURRENT_DATE) - 1)) AS s(MONTH));",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text = numeric
LINE 7:   AND r.month NOT IN
                      ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT COUNT(r.rid) AS review_count
FROM review r
JOIN business b ON r.business_id = b.business_id
WHERE b.state = 'CA'
  AND r.year >= EXTRACT(YEAR
                        FROM CURRENT_DATE - INTERVAL '10 months')
  AND r.month NOT IN
    (SELECT DISTINCT MONTH
     FROM generate_series(
                            (SELECT EXTRACT(MONTH
                                            FROM CURRENT_DATE) - 10 + 1),
                            (SELECT EXTRACT(MONTH
                                            FROM CURRENT_DATE) - 1)) AS s(MONTH));]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.39,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of check-ins on the 2 days before Saturday?,"SELECT sum(COUNT) AS total_checkins FROM checkin WHERE DAY IN ('Thursday', 'Friday') ;",yelp,date_functions,,postgres,"SELECT SUM(COUNT) AS total_check_ins
FROM checkin
WHERE DAY IN ('Thursday',
              'Friday');",,,0,1,0,0,0,4.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What was the message that came with the tip made exactly 2 months after March 2021?,SELECT text AS message FROM tip WHERE MONTH ILIKE '%May%' AND YEAR = 2021 LIMIT 1;,yelp,date_functions,,postgres,"SELECT text
FROM tip
WHERE MONTH = 'May'
  AND YEAR = 2021;",,,0,1,0,0,0,4.47,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many check-ins occurred on each day of the week?,"SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT DAY,
       COUNT(*) AS checkins_per_day
FROM checkin
GROUP BY DAY;",,INCORRECT RESULTS,0,0,0,0,0,4.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
Return the name and average rating for each business in new york,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%NEW YORK%' GROUP BY business.name;",yelp,group_by,,postgres,"SELECT b.name AS business_name,
       AVG(r.rating) AS average_rating
FROM business b
JOIN review r ON b.business_id = r.business_id
WHERE b.city = 'New York'
GROUP BY b.name;",,,0,1,0,0,0,5.55,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total count of check-ins for each business id?,"SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT business_id,
       COUNT(cid) AS total_checkins
FROM checkin
GROUP BY business_id;",,INCORRECT RESULTS,0,0,0,0,0,4.17,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of check-ins for each day of the week for the business with ID ""abc123""?","SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin WHERE checkin.business_id = 'abc123' GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT DAY,
       COUNT(*) AS total_checkins
FROM checkin
WHERE business_id = 'abc123'
GROUP BY DAY;",,INCORRECT RESULTS,0,0,0,0,0,4.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?","SELECT {neighbourhood.neighbourhood_name, neighbourhood.id}, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY {} ORDER BY business_count DESC NULLS LAST;",yelp,group_by,,postgres,"WITH business_counts AS
  (SELECT n.neighbourhood_name,
          COUNT(n.business_id) AS business_count
   FROM neighbourhood n
   GROUP BY n.neighbourhood_name)
SELECT neighbourhood_name,
       business_count
FROM business_counts
WHERE business_count =
    (SELECT MAX(business_count)
     FROM business_counts);",,INCORRECT RESULTS,0,0,0,0,0,5.29,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many check-ins occurred on Mondays at businesses in the state of California?,SELECT SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' AND checkin.day ILIKE '%Monday%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT COUNT(*)
FROM checkin
WHERE DAY = 'Monday'
  AND business_id IN
    (SELECT bid
     FROM business
     WHERE state = 'CA');",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text = bigint
LINE 4:   AND business_id IN
                          ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT COUNT(*)
FROM checkin
WHERE DAY = 'Monday'
  AND business_id IN
    (SELECT bid
     FROM business
     WHERE state = 'CA');]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.93,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How many reviews were posted by users with the name ""Sarah Williams"" in the month of April 2021?",SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE users.name ILIKE '%Sarah Williams%' AND review.month = 'April' AND review.year = 2021;,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT COUNT(*) AS review_count
FROM review
WHERE user_id IN
    (SELECT UID
     FROM users
     WHERE name = 'Sarah Williams')
  AND EXTRACT(MONTH
              FROM DATE_TRUNC('month', TO_TIMESTAMP(YEAR || '-' || MONTH || '-01', 'YYYY-MM-DD'))) = 4
  AND YEAR = 2021;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text = bigint
LINE 3: WHERE user_id IN
                      ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT COUNT(*) AS review_count
FROM review
WHERE user_id IN
    (SELECT UID
     FROM users
     WHERE name = 'Sarah Williams')
  AND EXTRACT(MONTH
              FROM DATE_TRUNC('month', TO_TIMESTAMP(YEAR || '-' || MONTH || '-01', 'YYYY-MM-DD'))) = 4
  AND YEAR = 2021;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were posted for each business id in the year 2021?,"SELECT review.business_id, COUNT(*) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.business_id ORDER BY review_count DESC NULLS LAST;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT business_id,
       COUNT(*) AS review_count
FROM review
WHERE YEAR = 2021
GROUP BY business_id;",,,0,1,0,0,0,4.35,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the average rating of businesses in the city of San Francisco?,"SELECT AVG(sf.average_rating) AS sf_average_rating FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) ILIKE '%san francisco%' GROUP BY business.business_id) AS sf;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
The rating of businesses in a city refers to the average rating of the businesses in that city.
I.e., you must compute the average rating of each business before computing the average rating of businesses in the city.

",postgres,"SELECT AVG(rating) AS average_rating
FROM review
WHERE business_id IN
    (SELECT business_id
     FROM business
     WHERE city = 'San Francisco');",,INCORRECT RESULTS,0,0,0,0,0,4.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of reviews posted in the year 2021 for businesses in the category ""Cafe""?",SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND category.category_name ILIKE '%Cafe%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT COUNT(*) AS total_reviews
FROM review
WHERE YEAR = 2021
  AND business_id IN
    (SELECT business_id
     FROM category
     WHERE category_name = 'Cafe');",,,0,1,0,0,0,4.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How many reviews were posted in each month of the year 2021, ordered by the month?","SELECT review.month, COUNT(review.rid) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.month ORDER BY TO_DATE(review.month, 'Month') NULLS LAST;",yelp,order_by,,postgres,"SELECT MONTH,
       COUNT(*) AS review_count
FROM review
WHERE YEAR = 2021
GROUP BY MONTH
ORDER BY MONTH;",,INCORRECT RESULTS,0,0,0,0,0,4.67,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%New York%' GROUP BY business.name, business.business_id ORDER BY average_rating DESC NULLS LAST;",yelp,order_by,,postgres,"SELECT b.name AS business_name,
       AVG(r.rating) AS average_rating
FROM business b
JOIN review r ON b.business_id = r.business_id
WHERE b.city = 'New York'
GROUP BY b.name
ORDER BY average_rating DESC;",,,0,1,0,0,0,5.37,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What are the names of the businesses in the database, ordered alphabetically?",SELECT business.name FROM business ORDER BY business.name ASC NULLS LAST;,yelp,order_by,,postgres,"SELECT name
FROM business
ORDER BY name ASC;",,,0,1,0,0,0,3.93,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What are the top 3 businesses in terms of review count?,"SELECT {business.name, business.business_id, business.bid}, business.review_count FROM business ORDER BY business.review_count DESC NULLS LAST LIMIT 3;",yelp,order_by,,postgres,"SELECT business_id,
       name,
       review_count
FROM business
ORDER BY review_count DESC
LIMIT 3;",,,0,1,0,0,0,4.36,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the latitude and longitude of the business with the highest rating?,"SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY AVG(review.rating) DESC LIMIT 1;",yelp,order_by,,postgres,"SELECT latitude,
       longitude
FROM business
WHERE bid =
    (SELECT business_id
     FROM review
     ORDER BY rating DESC
     LIMIT 1);",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: bigint = text
LINE 4: WHERE bid =
                  ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT latitude,
       longitude
FROM business
WHERE bid =
    (SELECT business_id
     FROM review
     ORDER BY rating DESC
     LIMIT 1);]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?","SELECT {category.category_name, category.id}, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY {} ORDER BY ratio DESC NULLS LAST;",yelp,ratio,,postgres,"SELECT c.category_name,
       COUNT(CASE
                 WHEN r.rating > 3 THEN r.rid
             END) AS positive_reviews_count,
       COUNT(CASE
                 WHEN r.rating < 3 THEN r.rid
             END) AS negative_reviews_count,
       (COUNT(CASE
                  WHEN r.rating > 3 THEN r.rid
              END) * 1.0 / COUNT(CASE
                                     WHEN r.rating < 3 THEN r.rid
                                 END)) AS ratio
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name
HAVING COUNT(CASE
                 WHEN r.rating < 3 THEN r.rid
             END) > 0 -- Ensure there are negative reviews to avoid division by zero ORDER BY ratio DESC;",,INCORRECT RESULTS,0,0,0,0,0,6.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of businesses in the state of California to businesses in the state of New York?,"SELECT CAST(COUNT(CASE WHEN business.state = 'CA' THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN business.state = 'NY' THEN 1 END), 0) AS ratio FROM business;",yelp,ratio,,postgres,"SELECT
  (SELECT COUNT(*)
   FROM business
   WHERE state = 'CA')::float /
  (SELECT COUNT(*)
   FROM business
   WHERE state = 'NY') AS ratio;",,,0,1,0,0,0,4.39,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the ratio of check-ins on weekends to check-ins on weekdays for the business named ""Mark’s Bistro""?","SELECT CAST(SUM(CASE WHEN checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN checkin.day NOT IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END), 0) AS ratio FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name ILIKE '%Mark’s Bistro%';",yelp,ratio,,postgres,"WITH weekend_checkins AS
  (SELECT SUM(COUNT) AS weekend_count
   FROM checkin
   WHERE business_id =
       (SELECT bid
        FROM business
        WHERE name = 'Mark’s Bistro')
     AND DAY IN ('Saturday',
                 'Sunday')),
     weekday_checkins AS
  (SELECT SUM(COUNT) AS weekday_count
   FROM checkin
   WHERE business_id =
       (SELECT bid
        FROM business
        WHERE name = 'Mark’s Bistro')
     AND DAY IN ('Monday',
                 'Tuesday',
                 'Wednesday',
                 'Thursday',
                 'Friday'))
SELECT (weekend_count::float / weekday_count) AS weekend_to_weekday_ratio
FROM weekend_checkins,
     weekday_checkins;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text = bigint
LINE 4:    WHERE business_id =
                             ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: WITH weekend_checkins AS
  (SELECT SUM(COUNT) AS weekend_count
   FROM checkin
   WHERE business_id =
       (SELECT bid
        FROM business
        WHERE name = 'Mark’s Bistro')
     AND DAY IN ('Saturday',
                 'Sunday')),
     weekday_checkins AS
  (SELECT SUM(COUNT) AS weekday_count
   FROM checkin
   WHERE business_id =
       (SELECT bid
        FROM business
        WHERE name = 'Mark’s Bistro')
     AND DAY IN ('Monday',
                 'Tuesday',
                 'Wednesday',
                 'Thursday',
                 'Friday'))
SELECT (weekend_count::float / weekday_count) AS weekend_to_weekday_ratio
FROM weekend_checkins,
     weekday_checkins;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of open businesses to closed businesses in the city of San Francisco?,"SELECT CAST(SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM business WHERE LOWER(business.city) ILIKE '%san francisco%';",yelp,ratio,,postgres,"SELECT (SUM(CASE
                WHEN is_open = 1 THEN 1
                ELSE 0
            END) :: numeric / SUM(CASE
                                      WHEN is_open = 0 THEN 1
                                      ELSE 0
                                  END)) AS open_closed_ratio
FROM business
WHERE city = 'San Francisco';",,,0,1,0,0,0,4.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of the number of businesses in each state to the total number of businesses in the database?,"SELECT business.state, COUNT(business.business_id) / NULLIF(CAST((SELECT COUNT(*) FROM business) AS FLOAT), 0) AS ratio FROM business GROUP BY business.state;",yelp,ratio,,postgres,"WITH business_count_per_state AS
  (SELECT state,
          COUNT(*) AS num_businesses
   FROM business
   GROUP BY state),
     total_businesses AS
  (SELECT COUNT(*) AS total_num_businesses
   FROM business)
SELECT bc.state,
       bc.num_businesses,
       (bc.num_businesses::numeric / tb.total_num_businesses) AS ratio
FROM business_count_per_state bc,
     total_businesses tb;",,,0,1,0,0,0,6.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What are the top 2 categories of businesses with the highest average rating?,"SELECT {category.category_name, category.id} FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY {} ORDER BY AVG(business_rating.average_rating) DESC NULLS LAST LIMIT 2;",yelp,table_join,,postgres,"SELECT c.category_name,
       AVG(r.rating) AS avg_rating
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name
ORDER BY avg_rating DESC
LIMIT 2;",,,0,1,0,0,0,5.36,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of check-ins for each business in the state of California?,"SELECT {business.business_id, business.name, business.bid}, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_checkins DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT b.business_id,
       b.name,
       SUM(c.count) AS total_checkins
FROM business b
JOIN checkin c ON b.business_id = c.business_id
WHERE b.state = 'CA'
GROUP BY b.business_id,
         b.name;",,,0,1,0,0,0,4.77,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of reviews for each business category?,"SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT c.category_name,
       COUNT(r.rid) AS total_reviews
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name;",,,0,1,0,0,0,5.94,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of reviews for each category in the state of ""California""?","SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT c.category_name,
       COUNT(r.rid) AS total_reviews
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
WHERE b.state = 'CA'
GROUP BY c.category_name;",,,0,1,0,0,0,6.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"Which users have posted reviews for businesses located in the neighbourhood of ""Downtown"" and how many reviews have they posted?","SELECT {users.name, users.user_id}, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE neighbourhood.neighbourhood_name ILIKE '%Downtown%' GROUP BY {} ORDER BY review_count DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT u.user_id AS user_id,
       COUNT(r.rid) AS review_count
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN neighbourhood n ON b.business_id = n.business_id
JOIN users u ON r.user_id = u.user_id
WHERE n.neighbourhood_name = 'Downtown'
GROUP BY u.user_id;",,,0,1,0,0,0,6.73,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
