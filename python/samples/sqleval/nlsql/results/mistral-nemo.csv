question,query,db_name,query_category,instructions,db_type,generated_query,reason,error_msg,exact_match,correct,error_query_gen,error_db_exec,timeout,latency_seconds,tokens_used,k_shot_prompt,glossary,table_metadata_string,table_aliases,prev_invalid_sql,prev_error_msg,question_0,query_0,question_1,query_1,cot_instructions,cot_pregen,cost_in_cents
What is the average number of citations received by publications in each year?,"SELECT publication.year, AVG(publication.citation_num) AS average_citations FROM publication GROUP BY publication.year ORDER BY publication.year NULLS LAST;",academic,group_by,,postgres,"SELECT YEAR,
       AVG(citation_num) AS avg_citations
FROM publication
GROUP BY YEAR;",,,0,1,0,0,0,3.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the average number of references cited by publications in each domain name?,"SELECT {domain.name,domain.did}, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY {};",academic,group_by,,postgres,"SELECT d.name AS domain_name,
       AVG(p.reference_num) AS avg_references_cited
FROM domain_publication dp
JOIN publication p ON dp.pid = p.pid
JOIN DOMAIN d ON dp.did = d.did
GROUP BY d.name;",,,0,1,0,0,0,5.40,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of citations received by each author?,"SELECT {author.name, author.aid}, sum(publication.citation_num) AS total_citations FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid GROUP BY {} ORDER BY total_citations DESC NULLS LAST;SELECT {a.aid, a.name}, COUNT(c.cited) AS total_citations FROM author a JOIN writes w ON a.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN cite c ON p.pid = c.cited GROUP BY {} ORDER BY total_citations DESC;SELECT {a.aid, a.name}, COALESCE(SUM(p.citation_num), 0) AS total_citations FROM author a LEFT JOIN writes w ON a.aid = w.aid LEFT JOIN publication p ON w.pid = p.pid GROUP BY {};SELECT {a.aid, a.name}, COALESCE(SUM(p.citation_num), 0) AS total_citations FROM author a LEFT JOIN writes w ON a.aid = w.aid LEFT JOIN publication p ON w.pid = p.pid GROUP BY {};",academic,group_by,,postgres,"SELECT a.aid,
       COUNT(c.cited) AS total_citations
FROM author a
LEFT JOIN writes w ON a.aid = w.aid
LEFT JOIN publication p ON w.pid = p.pid
LEFT JOIN cite c ON p.pid = c.citing
GROUP BY a.aid;",,INCORRECT RESULTS,0,0,0,0,0,5.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of publications published in each year?,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS total_publications FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS publication_count
FROM publication
GROUP BY YEAR;",,,0,1,0,0,0,3.62,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"Which authors have written publications in both the domain ""Machine Learning"" and the domain ""Data Science""?","SELECT {author.name,author.aid} FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science') ) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);",academic,group_by,,postgres,"SELECT DISTINCT a.name
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN domain_publication dp1 ON w.pid = dp1.pid
AND dp1.did =
  (SELECT did
   FROM DOMAIN
   WHERE name = 'Machine Learning')
JOIN domain_publication dp2 ON w.pid = dp2.pid
AND dp2.did =
  (SELECT did
   FROM DOMAIN
   WHERE name = 'Data Science');",,,0,1,0,0,0,5.51,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What are the names of the authors who have written publications in the domain ""Computer Science""?",SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name ilike '%computer%science%';,academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
You must also filter names using ILIKE.
",postgres,"SELECT DISTINCT a.name AS author_name
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN publication p ON w.pid = p.pid
JOIN domain_publication dp ON p.pid = dp.pid
JOIN DOMAIN d ON dp.did = d.did
WHERE d.name = 'Computer Science';",,,0,1,0,0,0,4.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?,"SELECT DISTINCT {publication.title, publication.pid} FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE domain.name ILIKE '%Sociology%' AND publication.year = 2020 AND publication.cid = domain_conference.cid;",academic,instruct,"
Follow the instructions below to generate the query:
To get publications written by authors from a given domain, you would need to join domain, domain_author, author to link the domain to the author first, and then join with write to link with the publication id.
Finally, to see which ones were presented at conferences, you must join the domain table with the domain_conference table.
You must also filter names using ILIKE.
",postgres,"SELECT p.title,
       p.abstract
FROM publication p
JOIN writes w ON p.pid = w.pid
JOIN author a ON w.aid = a.aid
JOIN domain_author da ON a.aid = da.aid
JOIN DOMAIN d ON da.did = d.did
JOIN conference c ON p.cid = c.cid
JOIN domain_conference dc ON c.cid = dc.cid
AND d.did = dc.did
WHERE d.name = 'Sociology'
  AND p.year = 2020;",,,0,1,0,0,0,5.04,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which authors are not part of any organization?,"SELECT DISTINCT {name, aid} FROM author WHERE oid IS NULL",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT name
FROM author
WHERE oid IS NULL;",,,0,1,0,0,0,3.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which authors belong to the same domain as Martin?,"SELECT DISTINCT {a2.name, a2.aid} FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%';SELECT DISTINCT a2.name, a2.aid FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%' AND a2.name NOT ILIKE '%martin%';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE with percent sign wildcards
",postgres,"SELECT DISTINCT a.name AS author_name
FROM author a
JOIN domain_author da ON a.aid = da.aid
WHERE EXISTS
    (SELECT 1
     FROM author martin
     JOIN domain_author mad ON martin.aid = mad.aid
     WHERE martin.name = 'Martin'
       AND mad.did = da.did);",,INCORRECT RESULTS,0,0,0,0,0,6.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"Which organizations have authors who have written publications in the domain ""Machine Learning""?","SELECT DISTINCT {organization.name, organization.oid} FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';",academic,instruct,"
Follow the instructions below to generate the query:
Always filter names using an exact match
",postgres,"SELECT DISTINCT o.name AS organization_name
FROM
ORGANIZATION o
JOIN author a ON o.oid = a.oid
JOIN writes w ON a.aid = w.aid
JOIN publication p ON w.pid = p.pid
JOIN domain_publication dp ON p.pid = dp.pid
JOIN DOMAIN d ON dp.did = d.did
WHERE d.name = 'Machine Learning';",,,0,1,0,0,0,4.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the titles of all publications ordered alphabetically?,SELECT DISTINCT publication.title FROM publication ORDER BY publication.title ASC NULLS LAST;,academic,order_by,,postgres,"SELECT title
FROM publication
ORDER BY title ASC;",,,0,1,0,0,0,3.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the top 3 publications with the highest number of citations?,"SELECT {publication.title, publication.pid}, publication.citation_num FROM publication ORDER BY publication.citation_num DESC LIMIT 3;",academic,order_by,,postgres,"SELECT p.pid,
       p.title,
       p.citation_num
FROM publication p
ORDER BY p.citation_num DESC
LIMIT 3;",,,0,1,0,0,0,3.82,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?",SELECT publication.title FROM publication ORDER BY publication.reference_num DESC LIMIT 3;,academic,order_by,,postgres,"SELECT p.title
FROM publication AS p
JOIN cite AS c ON p.pid = c.citing
GROUP BY p.title
ORDER BY COUNT(c.cited) DESC
LIMIT 3;",,,0,1,0,0,0,4.00,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What are the top 5 domains with the highest number of authors associated with them?,"SELECT {d.name, d.did}, COUNT(DISTINCT a.aid) AS author_count FROM author a JOIN domain_author da ON a.aid = da.aid JOIN domain d ON da.did = d.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;SELECT {d.name, d.did}, COUNT(da.aid) AS author_count FROM DOMAIN AS d JOIN domain_author AS da ON d.did = da.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;",academic,order_by,,postgres,"SELECT d.name AS DOMAIN,
       COUNT(a.aid) AS author_count
FROM domain_author da
JOIN DOMAIN d ON da.did = d.did
JOIN author a ON da.aid = a.aid
GROUP BY d.did
ORDER BY author_count DESC
LIMIT 5;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""d.name"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT d.name AS DOMAIN,
               ^

[SQL: SELECT d.name AS DOMAIN,
       COUNT(a.aid) AS author_count
FROM domain_author da
JOIN DOMAIN d ON da.did = d.did
JOIN author a ON da.aid = a.aid
GROUP BY d.did
ORDER BY author_count DESC
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the title of the publication that has received the highest number of citations?,SELECT publication.title FROM publication ORDER BY publication.citation_num DESC NULLS LAST LIMIT 1;,academic,order_by,,postgres,"SELECT p.title
FROM publication p
LEFT JOIN cite c ON p.pid = c.cited
GROUP BY p.pid
ORDER BY SUM(c.citing) DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""p.title"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT p.title
               ^

[SQL: SELECT p.title
FROM publication p
LEFT JOIN cite c ON p.pid = c.cited
GROUP BY p.pid
ORDER BY SUM(c.citing) DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How does the ratio of authors to organizations differ by continent?,"SELECT organization.continent, COUNT(DISTINCT author.aid)::float / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC NULLS LAST;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;",academic,ratio,,postgres,"SELECT o.continent,
       COUNT(DISTINCT a.aid) AS author_count,
       COUNT(DISTINCT o.oid) AS organization_count,
       (COUNT(DISTINCT a.aid)::FLOAT / COUNT(DISTINCT o.oid)) AS ratio
FROM author a
JOIN
ORGANIZATION o ON a.oid = o.oid
GROUP BY o.continent
ORDER BY ratio DESC;",,INCORRECT RESULTS,0,0,0,0,0,5.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.,"SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY publication.year;",academic,ratio,,postgres,"SELECT p.year,
       COUNT(DISTINCT p.pid) AS publications,
       COUNT(DISTINCT j.jid) AS journals,
       (COUNT(DISTINCT p.pid)::FLOAT / COUNT(DISTINCT j.jid)) AS ratio
FROM publication p
LEFT JOIN domain_publication dp ON p.pid = dp.pid
LEFT JOIN domain_journal dj ON dp.did = dj.did
JOIN journal j ON dj.jid = j.jid
GROUP BY p.year
ORDER BY p.year;",,INCORRECT RESULTS,0,0,0,0,0,5.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of publications presented in conferences to publications published in journals?,"SELECT CAST(COUNT(DISTINCT CASE WHEN cid IS NOT NULL THEN pid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN jid IS NOT NULL THEN pid END), 0) AS ratio FROM publication;",academic,ratio,,postgres,"SELECT
  (SELECT COUNT(*)
   FROM publication
   WHERE cid IS NOT NULL) AS conference_publications,

  (SELECT COUNT(*)
   FROM publication
   WHERE jid IS NOT NULL) AS journal_publications,

  (SELECT COUNT(*)
   FROM publication
   WHERE cid IS NOT NULL)::FLOAT /
  (SELECT COUNT(*)
   FROM publication
   WHERE jid IS NOT NULL)::FLOAT AS ratio
FROM dual;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) relation ""dual"" does not exist
LINE 16: FROM dual;
              ^

[SQL: SELECT
  (SELECT COUNT(*)
   FROM publication
   WHERE cid IS NOT NULL) AS conference_publications,

  (SELECT COUNT(*)
   FROM publication
   WHERE jid IS NOT NULL) AS journal_publications,

  (SELECT COUNT(*)
   FROM publication
   WHERE cid IS NOT NULL)::FLOAT /
  (SELECT COUNT(*)
   FROM publication
   WHERE jid IS NOT NULL)::FLOAT AS ratio
FROM dual;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.72,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of publications to authors in the database?,"SELECT CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;",academic,ratio,,postgres,"SELECT (COUNT(DISTINCT pid) OVER())::FLOAT / (COUNT(DISTINCT aid) OVER()) AS publication_to_author_ratio
FROM author;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""pid"" does not exist
LINE 1: SELECT (COUNT(DISTINCT pid) OVER())::FLOAT / (COUNT(DISTINCT...
                               ^
HINT:  Perhaps you meant to reference the column ""author.aid"" or the column ""author.oid"".

[SQL: SELECT (COUNT(DISTINCT pid) OVER())::FLOAT / (COUNT(DISTINCT aid) OVER()) AS publication_to_author_ratio
FROM author;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.23,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.,"SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_publication LEFT JOIN domain_keyword ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_keyword LEFT JOIN domain_publication ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT d.did, COALESCE(CAST(COUNT(DISTINCT dp.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT dk.kid), 0), 0) AS publication_to_keyword_ratio FROM domain d LEFT JOIN domain_publication dp ON d.did = dp.did LEFT JOIN domain_keyword dk ON d.did = dk.did GROUP BY d.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;",academic,ratio,,postgres,"SELECT d.did,
       COUNT(DISTINCT dp.pid) AS total_publications,
       COUNT(DISTINCT pk.kid) AS total_keywords,
       (COUNT(DISTINCT dp.pid)::FLOAT / COUNT(DISTINCT pk.kid)) AS ratio
FROM DOMAIN d
LEFT JOIN domain_publication dp ON d.did = dp.did
LEFT JOIN publication_keyword pk ON dp.pid = pk.pid
GROUP BY d.did;",,"EXECUTION ERROR: (psycopg2.errors.DivisionByZero) division by zero

[SQL: SELECT d.did,
       COUNT(DISTINCT dp.pid) AS total_publications,
       COUNT(DISTINCT pk.kid) AS total_keywords,
       (COUNT(DISTINCT dp.pid)::FLOAT / COUNT(DISTINCT pk.kid)) AS ratio
FROM DOMAIN d
LEFT JOIN domain_publication dp ON d.did = dp.did
LEFT JOIN publication_keyword pk ON dp.pid = pk.pid
GROUP BY d.did;]
(Background on this error at: https://sqlalche.me/e/20/9h9h)",0,0,0,1,0,7.04,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.","SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid=conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC NULLS LAST;",academic,table_join,,postgres,"SELECT c.name AS conference_name,
       COUNT(p.pid) AS publication_count
FROM conference c
JOIN publication p ON c.cid = p.cid
GROUP BY c.name
ORDER BY publication_count DESC;",,,0,1,0,0,0,4.02,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"How many publications were published in journals whose names start with the letter ""J""?",SELECT count(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name ilike 'J%';,academic,table_join,,postgres,"SELECT COUNT(*)
FROM publication p
INNER JOIN journal j ON p.jid = j.jid
WHERE j.name LIKE 'J%';",,,0,1,0,0,0,3.81,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
"What is the total number of publications in each journal, ordered by the number of publications in descending order?","SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid=journal.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid=publication.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;",academic,table_join,,postgres,"SELECT j.name AS journal_name,
       COUNT(p.pid) AS publication_count
FROM journal j
JOIN domain_journal dj ON j.jid = dj.jid
JOIN domain_publication dp ON dj.did = dp.did
JOIN publication p ON dp.pid = p.pid
GROUP BY j.name
ORDER BY publication_count DESC;",,INCORRECT RESULTS,0,0,0,0,0,4.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
What is the total number of publications presented in each conference?,"SELECT {conference.name, conference.cid}, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY {} ORDER BY total_publications DESC;",academic,table_join,,postgres,"SELECT c.name AS conference_name,
       COUNT(p.pid) AS publication_count
FROM conference c
JOIN publication p ON c.cid = p.cid
GROUP BY c.cid;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""c.name"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT c.name AS conference_name,
               ^

[SQL: SELECT c.name AS conference_name,
       COUNT(p.pid) AS publication_count
FROM conference c
JOIN publication p ON c.cid = p.cid
GROUP BY c.cid;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.94,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
Which author had the most publications in the year 2021 and how many publications did he/she have that year?,"SELECT {author.name, author.aid}, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY {} ORDER BY publication_count DESC NULLS LAST LIMIT 1;",academic,table_join,,postgres,"SELECT a.name,
       COUNT(p.pid) AS publication_count
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN publication p ON w.pid = p.pid
WHERE EXTRACT(YEAR
              FROM p.publication_date) = 2021
GROUP BY a.name
ORDER BY publication_count DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column p.publication_date does not exist
LINE 7:               FROM p.publication_date) = 2021
                           ^

[SQL: SELECT a.name,
       COUNT(p.pid) AS publication_count
FROM author a
JOIN writes w ON a.aid = w.aid
JOIN publication p ON w.pid = p.pid
WHERE EXTRACT(YEAR
              FROM p.publication_date) = 2021
GROUP BY a.name
ORDER BY publication_count DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- author AS a
-- domain AS d
-- writes AS w
-- journal AS j
-- keyword AS k
-- conference AS co
-- publication AS p
-- organization AS o
-- domain_author AS da
-- domain_journal AS dj
-- domain_keyword AS dk
-- domain_conference AS dc
-- domain_publication AS dp
-- publication_keyword AS pk
",,,,,,,,False,n/a
How long has it been in days since the last admitted student? Give the answer as an integer.,SELECT CURRENT_DATE - max(admit_term) AS duration_since_last_admitted_student FROM student;,advising,date_functions,,postgres,"SELECT EXTRACT(DAY
               FROM CURRENT_DATE - MAX(admit_term)) AS days_since_last_admitted_student
FROM student;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, integer) does not exist
LINE 1: SELECT EXTRACT(DAY
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT EXTRACT(DAY
               FROM CURRENT_DATE - MAX(admit_term)) AS days_since_last_admitted_student
FROM student;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.63,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many students were predicted to graduate in the last 10 years?,"SELECT count(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_TRUNC('year', CURRENT_DATE) - interval '10 year';",advising,date_functions,,postgres,"SELECT COUNT(*)
FROM student
WHERE EXTRACT(YEAR
              FROM predicted_graduation_semester) BETWEEN EXTRACT(YEAR
                                                                  FROM CURRENT_DATE) - 10 AND EXTRACT(YEAR
                                                                                                      FROM CURRENT_DATE);",,,0,1,0,0,0,4.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday,SELECT DISTINCT co.course_id FROM course_offering co JOIN offering_instructor oi ON co.offering_id = oi.offering_id WHERE (co.semester = 1 OR co.semester = 2) AND co.end_time < '13:00:00' AND co.thursday IS NOT NULL;,advising,date_functions,,postgres,"SELECT DISTINCT co.course_id
FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN instructor i ON oi.instructor_id = i.instructor_id
WHERE co.semester IN (1,
                      2)
  AND co.end_time < INTERVAL '13:00'
  AND i.thursday IS NOT NULL;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column i.thursday does not exist
LINE 8:   AND i.thursday IS NOT NULL;
              ^
HINT:  Perhaps you meant to reference the column ""co.thursday"".

[SQL: SELECT DISTINCT co.course_id
FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN instructor i ON oi.instructor_id = i.instructor_id
WHERE co.semester IN (1,
                      2)
  AND co.end_time < INTERVAL '13:00'
  AND i.thursday IS NOT NULL;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.46,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What month were most students admitted? Return the no. of students and the month as a date,"SELECT date_trunc('month', s.admit_term) AS month, COUNT(*) AS total_students FROM student s GROUP BY MONTH ORDER BY total_students DESC LIMIT 1;SELECT TO_CHAR(DATE_TRUNC('month', s.admit_term), 'YYYY-MM') AS month, COUNT(*) AS total_students FROM student s GROUP BY month ORDER BY total_students DESC LIMIT 1;SELECT date_trunc('month', admit_term)::date AS MONTH, COUNT(*) AS num_students FROM student GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1;",advising,date_functions,,postgres,"SELECT EXTRACT(MONTH
               FROM admit_term) AS admission_month,
       COUNT(*) AS num_students
FROM student
GROUP BY admission_month
ORDER BY num_students DESC
LIMIT 1;",,INCORRECT RESULTS,0,0,0,0,0,4.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What's the average predicted time to graduation since admission in no. of days?,SELECT avg(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;,advising,date_functions,,postgres,"SELECT AVG(EXtract('day'
                   FROM predicted_graduation_semester - admit_term)) AS avg_predicted_time_to_graduation
FROM student;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, integer) does not exist
LINE 1: SELECT AVG(EXtract('day'
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT AVG(EXtract('day'
                   FROM predicted_graduation_semester - admit_term)) AS avg_predicted_time_to_graduation
FROM student;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many course offerings have a final exam and how many do not?,"SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering co;",advising,group_by,,postgres,"SELECT SUM(CASE
               WHEN has_final_exam THEN 1
               ELSE 0
           END) AS with_final_exam,
       COUNT(*) - SUM(CASE
                          WHEN has_final_exam THEN 1
                          ELSE 0
                      END) AS without_final_exam
FROM course_offering;",,,0,1,0,0,0,5.01,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many courses are offered for each semester id?,"SELECT course_offering.semester, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM course_offering GROUP BY course_offering.semester ORDER BY course_offering.semester;SELECT semester.semester_id, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM semester LEFT JOIN course_offering ON semester.semester_id = course_offering.semester GROUP BY semester.semester_id;",advising,group_by,,postgres,"SELECT s.semester_id,
       COUNT(DISTINCT co.course_id) AS num_courses_offered
FROM semester s
LEFT JOIN course_offering co ON s.semester_id = co.semester
GROUP BY s.semester_id;",,,0,1,0,0,0,4.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many courses does each department offer?,"SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC NULLS LAST;",advising,group_by,,postgres,"SELECT department,
       COUNT(*) AS num_courses
FROM course
GROUP BY department;",,,0,1,0,0,0,4.42,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the average clarity score for each instructor who taught a course?,"SELECT {i.name, i.instructor_id}, AVG(c.clarity_score) FROM course c JOIN course_offering co ON c.course_id = co.course_id JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id GROUP BY {};",advising,group_by,,postgres,"SELECT i.name AS instructor_name,
       AVG(c.clarity_score) AS avg_clarity_score
FROM instructor i
JOIN offering_instructor oi ON i.instructor_id = oi.instructor_id
JOIN course_offering co ON oi.offering_id = co.offering_id
JOIN course c ON co.course_id = c.course_id
GROUP BY i.name;",,,0,1,0,0,0,5.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of students who found the instructor to be hilarious per course id?,"SELECT course_tags_count.course_id, SUM(course_tags_count.hilarious) AS total_hilarious FROM course_tags_count GROUP BY course_tags_count.course_id;",advising,group_by,,postgres,"SELECT co.course_id,
       COUNT(*) AS hilarious_students
FROM course_tags_count ctc
JOIN student_record sr ON ctc.course_id = sr.course_id
AND ctc.hilarious > 0
GROUP BY co.course_id;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedTable) missing FROM-clause entry for table ""co""
LINE 1: SELECT co.course_id,
               ^

[SQL: SELECT co.course_id,
       COUNT(*) AS hilarious_students
FROM course_tags_count ctc
JOIN student_record sr ON ctc.course_id = sr.course_id
AND ctc.hilarious > 0
GROUP BY co.course_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.05,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Return the student IDs who have taken an in-person course and have gotten a grade of A or C.,"SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');",advising,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match.
When asked for specific students or courses, do not return duplicates.
",postgres,"SELECT DISTINCT sr.student_id
FROM student_record sr
JOIN course_offering co ON sr.offering_id = co.offering_id
WHERE sr.how = 'in-person'
  AND sr.grade IN ('A',
                   'C');",,,0,1,0,0,0,4.95,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What are the easiness scores for courses in the ""Computer Science"" department? Show both courses and scores.","SELECT {course.name, course.course_id, course.number}, course.easiness_score FROM course WHERE course.department = 'Computer Science';",advising,instruct,"
Follow the instructions below to generate the query:
Always filter names using exact string matching
",postgres,"SELECT c.name AS course_name,
       co.easiness_score AS easiness_score
FROM course c
JOIN course_offering co ON c.course_id = co.course_id
WHERE c.department = 'Computer Science';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column co.easiness_score does not exist
LINE 2:        co.easiness_score AS easiness_score
               ^
HINT:  Perhaps you meant to reference the column ""c.easiness_score"".

[SQL: SELECT c.name AS course_name,
       co.easiness_score AS easiness_score
FROM course c
JOIN course_offering co ON c.course_id = co.course_id
WHERE c.department = 'Computer Science';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What are the names of all the courses offered by the department of Computer Science?,SELECT course.name FROM course WHERE course.department ILIKE '%Computer Science%' ORDER BY course.name ASC NULLS LAST;,advising,instruct,"
Follow the instructions below to generate the query:
Filter strings using ILIKE.
Use the student_record table for all information relating to students' choices and their course.
",postgres,"SELECT name
FROM course
WHERE department = 'Computer Science';",,,0,1,0,0,0,4.37,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the average GPA of students in the program mathematics?,SELECT AVG(student.total_gpa) FROM student JOIN program ON student.program_id = program.program_id WHERE LOWER(program.name) = 'mathematics';,advising,instruct,"
Follow the instructions below to generate the query:
Match strings case-insensitively
",postgres,"SELECT AVG(total_gpa) AS average_gpa
FROM student
WHERE program_id =
    (SELECT program_id
     FROM program
     WHERE name = 'Mathematics');",,,0,1,0,0,0,4.75,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.,"SELECT student.firstname, student.lastname FROM student WHERE student.minor IS NOT NULL ORDER BY student.lastname NULLS LAST;",advising,instruct,"
Follow the instructions below to generate the query:
student.declare_major is null for students who have not declared their major.
student.minor is null for students who have not declared a minor program.
",postgres,"SELECT firstname,
       lastname
FROM student
WHERE minor IS NOT NULL
ORDER BY lastname;",,,0,1,0,0,0,4.46,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the name of the instructor who has taught the most courses, and how many courses have they taught?","SELECT instructor.name, count(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY num_courses DESC LIMIT 1;",advising,order_by,,postgres,"SELECT i.name AS instructor_name,
       COUNT(*) AS num_courses_taught
FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN instructor i ON oi.instructor_id = i.instructor_id
GROUP BY i.instructor_id
ORDER BY num_courses_taught DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""i.name"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT i.name AS instructor_name,
               ^

[SQL: SELECT i.name AS instructor_name,
       COUNT(*) AS num_courses_taught
FROM course_offering co
JOIN offering_instructor oi ON co.offering_id = oi.offering_id
JOIN instructor i ON oi.instructor_id = i.instructor_id
GROUP BY i.instructor_id
ORDER BY num_courses_taught DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.","SELECT student.student_id, student.total_credit FROM student ORDER BY student.total_credit DESC NULLS LAST;",advising,order_by,,postgres,"SELECT student_id,
       total_credit
FROM student
ORDER BY total_credit DESC;",,,0,1,0,0,0,4.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of students enrolled in each course, ordered from highest to lowest?","SELECT {course.course_id, course.name, course.number}, SUM(course.num_enrolled) AS total_students FROM course GROUP BY {} ORDER BY total_students DESC NULLS LAST;",advising,order_by,,postgres,"SELECT c.course_id,
       COUNT(sr.student_id) AS total_enrolled
FROM course c
LEFT JOIN student_record sr ON c.course_id = sr.course_id
GROUP BY c.course_id
ORDER BY total_enrolled DESC;",,,0,1,0,0,0,4.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?","SELECT course_tags_count.course_id, course_tags_count.participation FROM course_tags_count ORDER BY course_tags_count.participation DESC NULLS LAST;",advising,order_by,,postgres,"SELECT course_id,
       SUM(participation) AS total_participants
FROM course_tags_count
GROUP BY course_id
ORDER BY total_participants DESC;",,,0,1,0,0,0,4.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
"Which course has the highest number of enrolled students, and what is the enrollment number?","SELECT {course.name, course.course_id, course.number}, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC NULLS LAST LIMIT 1;",advising,order_by,,postgres,"SELECT c.name AS course_name,
       sr.num_enrolled
FROM course c
JOIN student_record sr ON c.course_id = sr.course_id
GROUP BY c.course_id,
         sr.num_enrolled
ORDER BY sr.num_enrolled DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column sr.num_enrolled does not exist
LINE 2:        sr.num_enrolled
               ^
HINT:  Perhaps you meant to reference the column ""c.num_enrolled"".

[SQL: SELECT c.name AS course_name,
       sr.num_enrolled
FROM course c
JOIN student_record sr ON c.course_id = sr.course_id
GROUP BY c.course_id,
         sr.num_enrolled
ORDER BY sr.num_enrolled DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How does the ratio of enrolled students to the number of reviews vary across different courses?,"SELECT {course.course_id, course.name, course.number}, CAST(course.num_enrolled AS FLOAT) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY student_review_ratio NULLS LAST;",advising,ratio,,postgres,"SELECT c.name AS course_name,
       COUNT(DISTINCT sr.student_id) / COALESCE(COUNT(DISTINCT co.review_id), 1) AS ratio_enrolled_to_reviews
FROM course c
JOIN student_record sr ON c.course_id = sr.course_id
LEFT JOIN course_offering co ON c.course_id = co.course_id
AND sr.semester = co.semester
GROUP BY c.course_id,
         c.name;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column co.review_id does not exist
LINE 2: ...DISTINCT sr.student_id) / COALESCE(COUNT(DISTINCT co.review_...
                                                             ^

[SQL: SELECT c.name AS course_name,
       COUNT(DISTINCT sr.student_id) / COALESCE(COUNT(DISTINCT co.review_id), 1) AS ratio_enrolled_to_reviews
FROM course c
JOIN student_record sr ON c.course_id = sr.course_id
LEFT JOIN course_offering co ON c.course_id = co.course_id
AND sr.semester = co.semester
GROUP BY c.course_id,
         c.name;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of helpfulness scores to clarity scores for each course ID?,"SELECT course.course_id, CAST(course.helpfulness_score AS FLOAT) / NULLIF(course.clarity_score, 0) AS ratio FROM course;",advising,ratio,,postgres,"SELECT c.course_id,
       (c.helpfulness_score / c.clarity_score) AS helpfulness_to_clarity_ratio
FROM course AS c;",,INCORRECT RESULTS,0,0,0,0,0,4.70,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?,"SELECT course_offering.semester, CAST(SUM(CASE WHEN course.has_projects THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN course.has_exams THEN 1 ELSE 0 END), 0) AS ratio FROM course JOIN course_offering ON course.course_id = course_offering.course_id GROUP BY course_offering.semester ORDER BY course_offering.semester NULLS LAST;",advising,ratio,,postgres,"SELECT semester.semester_id,
       COUNT(DISTINCT CASE
                          WHEN course.has_projects THEN course.course_id
                      END) AS num_courses_with_projects,
       COUNT(DISTINCT CASE
                          WHEN course.has_exams THEN course.course_id
                      END) AS num_courses_with_exams,
       (COUNT(DISTINCT CASE
                           WHEN course.has_projects THEN course.course_id
                       END) * 1.0 / NULLIF(COUNT(DISTINCT CASE
                                                              WHEN course.has_exams THEN course.course_id
                                                          END), 0)) AS ratio
FROM semester
JOIN course_offering ON semester.semester_id = course_offering.semester
JOIN course ON course_offering.course_id = course.course_id
GROUP BY semester.semester_id;",,,0,1,0,0,0,6.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?,"SELECT course_tags_count.course_id, CAST(course_tags_count.clear_grading AS FLOAT) / NULLIF(course_tags_count.good_feedback, 0) AS ratio FROM course_tags_count ORDER BY course_tags_count.course_id NULLS LAST;",advising,ratio,,postgres,"SELECT c.course_id,
       (cc.clear_grading * 1.0 / cc.good_feedback) AS ratio_of_clear_grading_to_good_feedback
FROM course_tags_count cc
JOIN course c ON cc.course_id = c.course_id;",,,0,1,0,0,0,5.08,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?,SELECT SUM(CASE WHEN c.has_exams THEN c.num_enrolled ELSE 0 END)::FLOAT / SUM(CASE WHEN NOT c.has_exams THEN c.num_enrolled ELSE 0 END) AS ratio FROM course c;,advising,ratio,,postgres,"SELECT (SUM(CASE
                WHEN c.has_exams THEN s.num_enrolled
                ELSE 0
            END)::FLOAT / SUM(s.num_enrolled)) AS ratio_with_exams,
       (SUM(CASE
                WHEN NOT c.has_exams THEN s.num_enrolled
                ELSE 0
            END)::FLOAT / SUM(s.num_enrolled)) AS ratio_without_exams
FROM student_record s
JOIN course_offering co ON s.offering_id = co.offering_id
JOIN course c ON co.course_id = c.course_id;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column s.num_enrolled does not exist
LINE 2:                 WHEN c.has_exams THEN s.num_enrolled
                                              ^
HINT:  Perhaps you meant to reference the column ""c.num_enrolled"".

[SQL: SELECT (SUM(CASE
                WHEN c.has_exams THEN s.num_enrolled
                ELSE 0
            END)::FLOAT / SUM(s.num_enrolled)) AS ratio_with_exams,
       (SUM(CASE
                WHEN NOT c.has_exams THEN s.num_enrolled
                ELSE 0
            END)::FLOAT / SUM(s.num_enrolled)) AS ratio_without_exams
FROM student_record s
JOIN course_offering co ON s.offering_id = co.offering_id
JOIN course c ON co.course_id = c.course_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
How many students have declared a major in each program?,"SELECT {program.name, program.program_id}, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE student.declare_major IS NOT NULL GROUP BY {} ORDER BY number_of_students DESC;",advising,table_join,,postgres,"SELECT p.name AS Program,
       COUNT(DISTINCT s.student_id) AS NumberOfStudents
FROM student s
JOIN program p ON s.program_id = p.program_id
GROUP BY p.program_id;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""p.name"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT p.name AS Program,
               ^

[SQL: SELECT p.name AS Program,
       COUNT(DISTINCT s.student_id) AS NumberOfStudents
FROM student s
JOIN program p ON s.program_id = p.program_id
GROUP BY p.program_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.82,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of credits earned by students in each program?,"SELECT {program.name, program.program_id}, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY {};",advising,table_join,,postgres,"SELECT p.name AS program_name,
       SUM(s.total_credit) AS total_credits_earned
FROM student s
JOIN program p ON s.program_id = p.program_id
GROUP BY p.program_id,
         p.name;",,,0,1,0,0,0,4.93,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
What is the total number of students who have taken a course with a final project or exam?,SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = true OR course_offering.has_final_exam = true;,advising,table_join,,postgres,"SELECT COUNT(DISTINCT sr.student_id)
FROM student_record sr
JOIN course_offering co ON sr.offering_id = co.offering_id
WHERE (co.has_final_project
       OR co.has_final_exam);",,,0,1,0,0,0,4.86,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which courses have a final project and a final exam?,"SELECT DISTINCT {course.name, course.course_id, course.number} FROM course_offering JOIN course ON course_offering.course_id = course.course_id WHERE course_offering.has_final_project = true AND course_offering.has_final_exam = true;",advising,table_join,,postgres,"SELECT c.name AS course_name
FROM course_offering co
JOIN course c ON co.course_id = c.course_id
WHERE co.has_final_project = TRUE
  AND co.has_final_exam = TRUE;",,,0,1,0,0,0,4.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Which courses have been taken by students in the Computer Science program?,"SELECT DISTINCT {course.name, course.course_id, course.number} AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE program.name ILIKE '%Computer Science%';",advising,table_join,,postgres,"SELECT DISTINCT c.name AS course_name
FROM student_record sr
JOIN course_offering co ON sr.offering_id = co.offering_id
JOIN course c ON co.course_id = c.course_id
JOIN program_course pc ON c.course_id = pc.course_id
JOIN program p ON pc.program_id = p.program_id
WHERE p.name = 'Computer Science';",,INCORRECT RESULTS,0,0,0,0,0,5.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- area AS a
-- course AS c
-- program AS p
-- student AS s
-- semester AS se
-- instructor AS i
-- program_course AS pc
-- student_record AS sr
-- course_offering AS co
-- course_tags_count AS ctc
-- comment_instructor AS ci
-- course_prerequisite AS cp
-- offering_instructor AS oi
-- program_requirement AS pr
",,,,,,,,False,n/a
Count the number of flight departures for each month?,"SELECT month.month_name, count(*) AS departure_count FROM flight JOIN month ON extract(MONTH FROM to_timestamp(flight.departure_time)) = month.month_number GROUP BY month.month_name, month.month_number ORDER BY month.month_number;SELECT date_trunc('month', to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY MONTH ORDER BY MONTH;SELECT EXTRACT(MONTH FROM to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;SELECT TO_CHAR(TO_TIMESTAMP(flight.departure_time), 'YYYY-MM') AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;",atis,date_functions,,postgres,"SELECT EXTRACT(MONTH
               FROM departure_time) AS MONTH,
       COUNT(*) AS departure_count
FROM flight
GROUP BY MONTH
ORDER BY MONTH;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, bigint) does not exist
LINE 1: SELECT EXTRACT(MONTH
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT EXTRACT(MONTH
               FROM departure_time) AS MONTH,
       COUNT(*) AS departure_count
FROM flight
GROUP BY MONTH
ORDER BY MONTH;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.18,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.,"SELECT date_part('day', CURRENT_DATE - to_timestamp(departure_time)) AS difference_in_days FROM flight ORDER BY departure_time LIMIT 1;SELECT (CURRENT_DATE - TO_TIMESTAMP(MIN(f.departure_time))) AS days_difference FROM flight f;SELECT CAST(ABS((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) - EXTRACT(EPOCH FROM TO_TIMESTAMP(MIN(departure_time)))) / 86400) AS INTEGER) AS diff_in_days FROM flight;",atis,date_functions,,postgres,"SELECT EXTRACT(DAY
               FROM AGE(CURRENT_DATE, MIN(departure_time::TIMESTAMP))) AS diff_in_days
FROM flight;",,"EXECUTION ERROR: (psycopg2.errors.CannotCoerce) cannot cast type bigint to timestamp without time zone
LINE 2: ...         FROM AGE(CURRENT_DATE, MIN(departure_time::TIMESTAM...
                                                             ^

[SQL: SELECT EXTRACT(DAY
               FROM AGE(CURRENT_DATE, MIN(departure_time::TIMESTAMP))) AS diff_in_days
FROM flight;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.05,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes",SELECT avg(to_timestamp(arrival_time) - to_timestamp(departure_time) - interval '34 minutes') AS average_duration FROM flight;SELECT AVG(arrival_time - departure_time)/60 - 34 AS average_duration FROM flight;,atis,date_functions,,postgres,"SELECT EXTRACT(EPOCH
               FROM (arrival_time - departure_time)) * 60 AS duration_in_minutes
FROM flight
WHERE EXTRACT(EPOCH
              FROM (arrival_time - departure_time)) * 60 > 34
ORDER BY duration_in_minutes DESC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, bigint) does not exist
LINE 1: SELECT EXTRACT(EPOCH
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT EXTRACT(EPOCH
               FROM (arrival_time - departure_time)) * 60 AS duration_in_minutes
FROM flight
WHERE EXTRACT(EPOCH
              FROM (arrival_time - departure_time)) * 60 > 34
ORDER BY duration_in_minutes DESC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What's the earliest flight departure time in the day in HH:MM?,"SELECT to_char(to_timestamp(departure_time)::TIME, 'HH24:MI') AS earliest_departure_time FROM flight ORDER BY earliest_departure_time LIMIT 1;",atis,date_functions,,postgres,"SELECT MIN(EXTRACT(HOUR
                   FROM TIMESTAMP WITHOUT TIME ZONE departure_time)) AS earliest_departure_time
FROM flight;",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at or near ""departure_time""
LINE 2: ...                 FROM TIMESTAMP WITHOUT TIME ZONE departure_...
                                                             ^

[SQL: SELECT MIN(EXTRACT(HOUR
                   FROM TIMESTAMP WITHOUT TIME ZONE departure_time)) AS earliest_departure_time
FROM flight;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.02,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.,"SELECT {flight.flight_number, flight.flight_id}, (arrival_time - departure_time) / 60 AS duration_minutes FROM flight ORDER BY duration_minutes LIMIT 1;",atis,date_functions,,postgres,"SELECT f.flight_id,
       EXTRACT(EPOCH
               FROM (arrival_time - departure_time)) * 60 AS duration_minutes
FROM flight f
ORDER BY duration_minutes ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, bigint) does not exist
LINE 2:        EXTRACT(EPOCH
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT f.flight_id,
       EXTRACT(EPOCH
               FROM (arrival_time - departure_time)) * 60 AS duration_minutes
FROM flight f
ORDER BY duration_minutes ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.29,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"How many flights depart from each airport code, excluding departures with connections?","SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport LEFT JOIN flight ON airport.airport_code = flight.from_airport AND flight.connections=0 GROUP BY airport.airport_code;SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport JOIN flight ON airport.airport_code = flight.from_airport WHERE flight.connections=0 GROUP BY airport.airport_code;",atis,group_by,,postgres,"SELECT f.from_airport AS Airport_Code,
       COUNT(*) AS Number_of_Departures
FROM flight f
JOIN flight_stop fs ON f.flight_id = fs.flight_id
WHERE fs.stop_number = 1
  AND fs.arrival_flight_number IS NULL
GROUP BY f.from_airport;",,INCORRECT RESULTS,0,0,0,0,0,5.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"How many meals are served in each compartment, sorted by the number of meals in descending order?","SELECT food_service.compartment, COUNT(food_service.meal_number) AS number_of_meals FROM food_service GROUP BY food_service.compartment ORDER BY number_of_meals DESC NULLS LAST;",atis,group_by,,postgres,"SELECT compartment,
       COUNT(meal_number) AS meal_count
FROM food_service
GROUP BY compartment
ORDER BY meal_count DESC;",,,0,1,0,0,0,5.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the average cost of a one-way trip for each airport pair in the fare table?,"SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare f GROUP BY f.from_airport, f.to_airport ORDER BY f.from_airport, f.to_airport NULLS LAST;",atis,group_by,,postgres,"SELECT f.from_airport,
       f.to_airport,
       AVG(f.one_direction_cost) AS avg_one_way_cost
FROM fare f
GROUP BY f.from_airport,
         f.to_airport;",,,0,1,0,0,0,5.42,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?","SELECT fare.fare_airline, AVG(fare.round_trip_cost) AS average_cost FROM fare WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY fare.fare_airline ORDER BY average_cost DESC NULLS LAST;SELECT airline.airline_name, AVG(fare.round_trip_cost) AS avg_round_trip_cost FROM fare JOIN airline ON fare.fare_airline = airline.airline_code WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY airline.airline_name ORDER BY avg_round_trip_cost DESC;",atis,group_by,,postgres,"SELECT fare.fare_airline,
       AVG(fare.round_trip_cost) AS Average_Round_Trip_Cost
FROM fare
WHERE fare.from_airport = 'LAX'
  AND fare.to_airport = 'ORD'
GROUP BY fare.fare_airline
ORDER BY Average_Round_Trip_Cost DESC;",,,0,1,0,0,0,5.86,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the total cost of round-trip fares for each airline code?,"SELECT fare.fare_airline, SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare GROUP BY fare.fare_airline ORDER BY total_round_trip_cost DESC;",atis,group_by,,postgres,"SELECT fare_airline,
       SUM(round_trip_cost) AS total_round_trip_cost
FROM fare
GROUP BY fare_airline;",,,0,1,0,0,0,5.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
How many flights require a round-trip to purchase the fare?,SELECT COUNT(DISTINCT flight_fare.flight_id) FROM flight_fare JOIN fare ON flight_fare.fare_id = fare.fare_id WHERE fare.round_trip_required = 'Yes';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,"SELECT COUNT(*)
FROM fare
WHERE round_trip_required = 'Yes';",,,0,1,0,0,0,4.83,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the minimum amount of time required for a connecting flight at JFK Airport?,SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY) and airport codes (eg JFK) using upper-case matches.
",postgres,"SELECT MIN(minimum_connect_time)
FROM airport
WHERE airport_code = 'JFK';",,,0,1,0,0,0,4.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?,SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
fare.round_trip_required is not needed when getting the round trip cost.
",postgres,"SELECT SUM(round_trip_cost)
FROM fare
WHERE from_airport = 'JFK'
  AND to_airport = 'LAX';",,,0,1,0,0,0,5.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers,"SELECT {flight.flight_number, flight.flight_id} FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';",atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE for each of the days separately, since they are not necessarily ordered.
",postgres,"SELECT DISTINCT flight_number
FROM flight
WHERE flight_days LIKE '%mon%'
  AND flight_days LIKE '%wed%';",,,0,1,0,0,0,4.97,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which state code is Orlando International Airport in?,SELECT state_code FROM airport WHERE airport_name ILIKE '%Orlando International Airport%';,atis,instruct,"
Follow the instructions below to generate the query:
Filter airport, city, country names using ILIKE.
Filter state code (eg NY), airport codes (eg JFK) using case-insensitive matches.
If multiple flight days are requested, use ILIKE and wildcards for each of the days separately, since they are not necessarily ordered.
",postgres,"SELECT state_code
FROM airport
WHERE airport_name = 'Orlando International Airport';",,,0,1,0,0,0,4.81,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.,SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY aircraft.aircraft_code ASC NULLS LAST;,atis,order_by,,postgres,"SELECT DISTINCT aircraft_code_sequence
FROM flight
WHERE cruising_speed > 200
ORDER BY aircraft_code_sequence ASC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""cruising_speed"" does not exist
LINE 3: WHERE cruising_speed > 200
              ^

[SQL: SELECT DISTINCT aircraft_code_sequence
FROM flight
WHERE cruising_speed > 200
ORDER BY aircraft_code_sequence ASC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.01,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What are the top 2 airlines with the most flights?,"SELECT {airline.airline_name, airline.airline_code}, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY {} ORDER BY number_of_flights DESC NULLS LAST LIMIT 2;",atis,order_by,,postgres,"SELECT airline_name,
       COUNT(flight_id) AS flight_count
FROM flight
JOIN airline ON flight.airline_code = airline.airline_code
GROUP BY airline_name
ORDER BY flight_count DESC
LIMIT 2;",,,0,1,0,0,0,5.33,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which aircraft code can carry the highest weight of cargo that any aircraft can carry?,SELECT aircraft.aircraft_code FROM aircraft ORDER BY pay_load DESC NULLS LAST LIMIT 1;,atis,order_by,,postgres,"SELECT aircraft_code
FROM aircraft
ORDER BY pay_load DESC
LIMIT 1;",,,0,1,0,0,0,4.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.","SELECT {airport.airport_name, airport.airport_code}, airport.minimum_connect_time FROM airport ORDER BY airport.minimum_connect_time ASC NULLS LAST;",atis,order_by,,postgres,"SELECT airport_name,
       minimum_connect_time
FROM airport
ORDER BY minimum_connect_time ASC;",,,0,1,0,0,0,4.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?","SELECT flight.flight_id, (flight.arrival_time - flight.departure_time) AS duration FROM flight WHERE to_airport = 'ORD' ORDER BY duration ASC NULLS LAST;",atis,order_by,,postgres,"SELECT f.flight_id
FROM flight AS f
JOIN airport AS a ON f.to_airport = a.airport_code
AND a.airport_location = 'Chicago'
WHERE a.airport_name = 'ORD'
ORDER BY f.time_elapsed DESC;",,INCORRECT RESULTS,0,0,0,0,0,5.47,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Calculate the ratio of the maximum range to the maximum payload for each aircraft,"SELECT aircraft.range_miles::float / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;",atis,ratio,,postgres,"SELECT a.aircraft_code,
       (MAX(a.range_miles)::FLOAT / MAX(a.pay_load)) AS max_range_to_payload_ratio
FROM aircraft a
GROUP BY a.aircraft_code;",,,0,1,0,0,0,5.35,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?,"SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS FLOAT) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC NULLS LAST;",atis,ratio,,postgres,"SELECT a.manufacturer,
       AVG(a.cruising_speed / a.pay_load) AS avg_ratio
FROM aircraft a
GROUP BY a.manufacturer;",,INCORRECT RESULTS,0,0,0,0,0,5.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the proportion of flights with stops out of all flights for each airline code?,"SELECT flight.airline_code, CAST(SUM(CASE WHEN flight.stops > 0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS ratio FROM flight GROUP BY flight.airline_code;",atis,ratio,,postgres,"SELECT f.airline_code,
       COUNT(fs.stop_number) AS total_stops,
       COUNT(*) AS total_flights,
       ROUND((COUNT(fs.stop_number) * 100.0 / COUNT(*)), 2) AS proportion_of_stops
FROM flight f
LEFT JOIN flight_stop fs ON f.flight_id = fs.flight_id
GROUP BY f.airline_code;",,INCORRECT RESULTS,0,0,0,0,0,6.02,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the ratio of aircraft capacity to its range in miles for each aircraft code?,"SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS FLOAT) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;",atis,ratio,,postgres,"SELECT ac.aircraft_code,
       ac.capacity,
       ac.range_miles,
       (ac.capacity::FLOAT / ac.range_miles) AS capacity_to_range_ratio
FROM aircraft ac;",,,0,1,0,0,0,5.30,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
What is the ratio of one-way trip costs to round-trip costs for each fare?,"SELECT fare.fare_id, fare.one_direction_cost::float / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY cost_ratio;",atis,ratio,,postgres,"SELECT fare_id,
       (one_direction_cost / round_trip_cost) AS ratio_of_one_way_to_round_trip
FROM fare;",,INCORRECT RESULTS,0,0,0,0,0,5.11,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?","SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM airline WHERE airline.airline_code NOT IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);",atis,table_join,,postgres,"SELECT DISTINCT f.airline_code
FROM flight AS f
LEFT JOIN flight_stop AS fs ON f.flight_id = fs.flight_id
WHERE NOT EXISTS
    (SELECT 1
     FROM airport AS a
     WHERE (a.airport_code = 'JFK'
            AND (f.from_airport = a.airport_code
                 OR f.to_airport = a.airport_code))
       OR fs.stop_airport = a.airport_code)
  AND fs.stop_number IS NULL;",,INCORRECT RESULTS,0,0,0,0,0,6.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
"Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?","SELECT {airline.airline_name, airline.airline_code}, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY flight.stops NULLS LAST;",atis,table_join,,postgres,"SELECT f.airline_code AS airline,
       COUNT(fs.stop_number) AS num_stops
FROM flight_stop fs
JOIN flight_fare ff ON fs.flight_id = ff.flight_id
JOIN fare f ON ff.fare_id = f.fare_id
WHERE fs.stop_airport IN ('ORD',
                          'JFK')
  AND fs.departure_flight_number <> fs.arrival_flight_number
GROUP BY f.airline_code
HAVING COUNT(fs.stop_number) > 0
ORDER BY num_stops ASC;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column f.airline_code does not exist
LINE 1: SELECT f.airline_code AS airline,
               ^

[SQL: SELECT f.airline_code AS airline,
       COUNT(fs.stop_number) AS num_stops
FROM flight_stop fs
JOIN flight_fare ff ON fs.flight_id = ff.flight_id
JOIN fare f ON ff.fare_id = f.fare_id
WHERE fs.stop_airport IN ('ORD',
                          'JFK')
  AND fs.departure_flight_number <> fs.arrival_flight_number
GROUP BY f.airline_code
HAVING COUNT(fs.stop_number) > 0
ORDER BY num_stops ASC;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which airlines offer flights from LAX to ORD?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';",atis,table_join,,postgres,"SELECT DISTINCT f.airline_code,
                a.airline_name
FROM flight AS f
JOIN airline AS a ON f.airline_code = a.airline_code
WHERE f.from_airport = 'LAX'
  AND f.to_airport = 'ORD';",,,0,1,0,0,0,5.49,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which airlines offer flights with a stopover in Dallas?,"SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE airport.airport_location ILIKE '%Dallas%';",atis,table_join,,postgres,"SELECT DISTINCT f.airline_code,
                a.airline_name
FROM flight_stop fs
JOIN flight_fare ff ON fs.flight_id = ff.flight_id
JOIN fare f ON ff.fare_id = f.fare_id
JOIN airline a ON f.fare_airline = a.airline_code
WHERE fs.stop_airport = 'DFW'
  AND fs.stop_days NOT LIKE '%mon,tue,wed,thu,fri%';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column f.airline_code does not exist
LINE 1: SELECT DISTINCT f.airline_code,
                        ^
HINT:  Perhaps you meant to reference the column ""a.airline_code"".

[SQL: SELECT DISTINCT f.airline_code,
                a.airline_name
FROM flight_stop fs
JOIN flight_fare ff ON fs.flight_id = ff.flight_id
JOIN fare f ON ff.fare_id = f.fare_id
JOIN airline a ON f.fare_airline = a.airline_code
WHERE fs.stop_airport = 'DFW'
  AND fs.stop_days NOT LIKE '%%mon,tue,wed,thu,fri%%';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,6.11,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Which flights serve meals in first class? Give me the flight id and meal description.,"SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';",atis,table_join,,postgres,"SELECT f.flight_id,
       fs.meal_description
FROM flight AS f
JOIN food_service AS fs ON f.meal_code = fs.meal_code
WHERE fs.compartment = 'First Class';",,,0,1,0,0,0,5.24,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- days AS d
-- fare AS f
-- month AS m
-- state AS s
-- flight AS fl
-- airline AS a
-- airport AS ai
-- aircraft AS air
-- time_zone AS tz
-- fare_basis AS fb
-- flight_leg AS fli
-- flight_fare AS ff
-- flight_stop AS fs
-- restriction AS r
-- dual_carrier AS dc
-- food_service AS fo
-- time_interval AS ti
-- ground_service AS gs
-- airport_service AS a2
-- class_of_service AS cos
-- code_description AS cd
-- compartment_class AS cc
-- equipment_sequence AS es
",,,,,,,,False,n/a
Lowest daily closest price for symbol `VTI` in the past 7 days,SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7 days';,broker,date_functions,,postgres,"SELECT sbDpOpen AS lowest_price
FROM sbDailyPrice
WHERE sbDpTickerId =
    (SELECT sbTickerId
     FROM sbTicker
     WHERE sbTickerSymbol = 'VTI')
  AND sbDpDate >= CURRENT_DATE - INTERVAL '7 days'
ORDER BY sbDpOpen ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.CardinalityViolation) more than one row returned by a subquery used as an expression

[SQL: SELECT sbDpOpen AS lowest_price
FROM sbDailyPrice
WHERE sbDpTickerId =
    (SELECT sbTickerId
     FROM sbTicker
     WHERE sbTickerSymbol = 'VTI')
  AND sbDpDate >= CURRENT_DATE - INTERVAL '7 days'
ORDER BY sbDpOpen ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.45,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.,"SELECT c.sbCustId, MIN(t.sbTxDateTime) - c.sbCustJoinDate AS DaysFromJoinToFirstTransaction FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId;SELECT c.sbCustId, age(MIN(t.sbTxDateTime), c.sbCustJoinDate) AS time_difference FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId, c.sbCustJoinDate;SELECT c.sbCustId, MIN(DATE(t.sbTxDateTime)) - c.sbCustJoinDate AS days_difference FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId, c.sbCustJoinDate;",broker,date_functions,,postgres,"SELECT sbCustId,
       EXTRACT(EPOCH
               FROM (sbTxDateTime - sbCustJoinDate)) AS days_to_first_transaction
FROM sbCustomer c
JOIN
  (SELECT sbTxCustId,
          MIN(sbTxDateTime) AS first_transaction_time
   FROM sbTransaction
   GROUP BY sbTxCustId) t ON c.sbCustId = t.sbTxCustId
WHERE t.first_transaction_time IS NOT NULL;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""sbtxdatetime"" does not exist
LINE 3:                FROM (sbTxDateTime - sbCustJoinDate)) AS days...
                             ^

[SQL: SELECT sbCustId,
       EXTRACT(EPOCH
               FROM (sbTxDateTime - sbCustJoinDate)) AS days_to_first_transaction
FROM sbCustomer c
JOIN
  (SELECT sbTxCustId,
          MIN(sbTxDateTime) AS first_transaction_time
   FROM sbTransaction
   GROUP BY sbTxCustId) t ON c.sbCustId = t.sbTxCustId
WHERE t.first_transaction_time IS NOT NULL;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
"Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.","WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE sbTxDateTime::date = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer c JOIN SellTransactions st ON c.sbCustId = st.sbTxCustId ORDER BY st.num_tx DESC LIMIT 1;",broker,date_functions,,postgres,"SELECT sbCustId AS id,
       sbCustName AS name,
       COUNT(*) AS num_transactions
FROM sbTransaction
WHERE sbTxDateTime::DATE = '2023-04-01'
  AND sbTxType = 'sell'
GROUP BY sbCustId,
         sbCustName
ORDER BY num_transactions DESC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""sbcustid"" does not exist
LINE 1: SELECT sbCustId AS id,
               ^
HINT:  Perhaps you meant to reference the column ""sbtransaction.sbtxcustid"".

[SQL: SELECT sbCustId AS id,
       sbCustName AS name,
       COUNT(*) AS num_transactions
FROM sbTransaction
WHERE sbTxDateTime::DATE = '2023-04-01'
  AND sbTxType = 'sell'
GROUP BY sbCustId,
         sbCustName
ORDER BY num_transactions DESC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.48,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?,"SELECT DATE_TRUNC('month', sbTxDateTime) AS MONTH, AVG(sbTxPrice) AS avg_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY MONTH ORDER BY MONTH;SELECT TO_CHAR(sbTxDateTime, 'YYYY-MM') AS MONTH, AVG(sbTxPrice) AS average_transaction_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime >= '2023-01-01' AND sbTxDateTime < '2023-04-01' GROUP BY TO_CHAR(sbTxDateTime, 'YYYY-MM') ORDER BY MONTH;",broker,date_functions,,postgres,"SELECT EXTRACT(MONTH
               FROM sbTxDateTime) AS MONTH,
       AVG(sbTxPrice) AS avg_transaction_price
FROM sbTransaction
WHERE sbTxStatus = 'success'
  AND sbTxDateTime >= '2023-01-01'::timestamp
  AND sbTxDateTime < '2023-04-01'::timestamp
GROUP BY MONTH;",,INCORRECT RESULTS,0,0,0,0,0,4.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
number of transactions by users who joined in the past 70 days,SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction t JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;,broker,date_functions,,postgres,"SELECT COUNT(*) AS transaction_count
FROM sbTransaction t
JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId
WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70 days';",,,0,1,0,0,0,4.12,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- sbCustomer AS sc
-- sbTicker AS st
-- sbDailyPrice AS sdp
-- sbTransaction AS sb
",,,,,,,,False,n/a
Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.,"SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons s ORDER BY days_employed ASC LIMIT 1;SELECT first_name || ' ' || last_name AS name, phone, (termination_date - hire_date) AS days_employed FROM salespersons WHERE termination_date IS NOT NULL ORDER BY (termination_date - hire_date) LIMIT 1;",car_dealership,date_functions,,postgres,"SELECT sp.first_name,
       sp.last_name,
       sp.phone,
       (sp.termination_date - sp.hire_date) AS employment_days
FROM salespersons sp
WHERE termination_date IS NOT NULL
ORDER BY employment_days ASC
LIMIT 1;",,,0,1,0,0,0,4.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
Return the number of payments made on weekends to the vendor named 'Utility Company',"SELECT COUNT(*) AS weekend_payments FROM payments_made WHERE vendor_name = 'Utility Company' AND EXTRACT(DOW FROM payment_date) IN (0, 6);",car_dealership,date_functions,,postgres,"SELECT COUNT(*)
FROM payments_made
WHERE vendor_name = 'Utility Company'
  AND EXTRACT(DOW
              FROM payment_date) IN (6,
                                     7);",,,0,1,0,0,0,3.99,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.,"SELECT DATE_TRUNC('QUARTER', s.sale_date) AS QUARTER, c.state, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.state, QUARTER HAVING SUM(s.sale_price) > 0 ORDER BY QUARTER, c.state;SELECT c.state, date_trunc('quarter', s.sale_date)::date AS quarter_start, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.state, date_trunc('quarter', s.sale_date) ORDER BY c.state, quarter_start;",car_dealership,date_functions,,postgres,"SELECT EXTRACT(QUARTER
               FROM sale_date) AS QUARTER,
       state,
       SUM(sale_price) AS total_sales
FROM sales
JOIN customers ON sales.customer_id = customers.id
WHERE EXTRACT(YEAR
              FROM sale_date) = 2023
GROUP BY QUARTER,
         state
ORDER BY QUARTER;",,INCORRECT RESULTS,0,0,0,0,0,4.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
"Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory"" if is_in_inventory is True.""","WITH latest_snapshot AS (SELECT MAX(snapshot_date) AS snapshot_date FROM inventory_snapshots WHERE snapshot_date BETWEEN '2023-03-01' AND '2023-03-31' ), latest_snapshot_data AS (SELECT inv.car_id FROM inventory_snapshots inv JOIN latest_snapshot ls ON inv.snapshot_date = ls.snapshot_date WHERE inv.is_in_inventory = TRUE ) SELECT c.id, c.make, c.model, c.year FROM cars c JOIN latest_snapshot_data lsd ON c.id = lsd.car_id;",car_dealership,date_functions,,postgres,"SELECT c.id AS car_id,
       c.make,
       c.model,
       c.year
FROM cars c
JOIN
  (SELECT car_id
   FROM inventory_snapshots
   WHERE snapshot_date =
       (SELECT MAX(snapshot_date)
        FROM inventory_snapshots
        WHERE EXTRACT(MONTH
                      FROM snapshot_date) = 3)) is_in_march ON c.id = is_in_march.car_id
WHERE is_in_inventory IS TRUE;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""is_in_inventory"" does not exist
LINE 14: WHERE is_in_inventory IS TRUE;
               ^

[SQL: SELECT c.id AS car_id,
       c.make,
       c.model,
       c.year
FROM cars c
JOIN
  (SELECT car_id
   FROM inventory_snapshots
   WHERE snapshot_date =
       (SELECT MAX(snapshot_date)
        FROM inventory_snapshots
        WHERE EXTRACT(MONTH
                      FROM snapshot_date) = 3)) is_in_march ON c.id = is_in_march.car_id
WHERE is_in_inventory IS TRUE;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
"show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method","SELECT payment_date, payment_method, SUM(payment_amount) AS total_amount FROM payments_received WHERE payment_date >= DATE_TRUNC('WEEK', CURRENT_DATE) - INTERVAL '1 week' AND payment_date < DATE_TRUNC('WEEK', CURRENT_DATE) GROUP BY payment_date, payment_method ORDER BY payment_date DESC, payment_method ASC;",car_dealership,date_functions,,postgres,"SELECT DATE_TRUNC('day', payment_date) AS payment_day,
       payment_method,
       SUM(payment_amount) AS total_amount
FROM payments_received
WHERE payment_date >= (CURRENT_DATE - INTERVAL '8 days')
  AND payment_date < CURRENT_DATE
GROUP BY payment_day,
         payment_method
ORDER BY payment_day,
         payment_method;",,,0,1,0,0,0,5.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cars AS c
-- salespersons AS s
-- customers AS cu
-- sales AS sa
-- inventory_snapshots AS inv
-- payments_received AS pr
-- payments_made AS pm
",,,,,,,,False,n/a
How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?,SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE d.diag_name ILIKE '%psoriasis%' AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= CURRENT_DATE - INTERVAL '6 months';,derm_treatment,date_functions,,postgres,"SELECT COUNT(*)
FROM treatments t
JOIN diagnoses d ON t.diag_id = d.diag_id
JOIN drugs dr ON t.drug_id = dr.drug_id
WHERE LOWER(d.diag_name) LIKE '%psoriasis%'
  AND dr.fda_appr_dt IS NOT NULL
  AND t.end_dt BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE();",,"EXECUTION ERROR: (psycopg2.errors.SyntaxError) syntax error at or near ""6""
LINE 7: ...AND t.end_dt BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) A...
                                                             ^

[SQL: SELECT COUNT(*)
FROM treatments t
JOIN diagnoses d ON t.diag_id = d.diag_id
JOIN drugs dr ON t.drug_id = dr.drug_id
WHERE LOWER(d.diag_name) LIKE '%%psoriasis%%'
  AND dr.fda_appr_dt IS NOT NULL
  AND t.end_dt BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE();]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.93,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.","WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY t.start_dt ASC) AS rn FROM doctors d JOIN treatments t ON d.doc_id = t.doc_id WHERE d.year_reg = EXTRACT(YEAR FROM CURRENT_DATE) - 2 ) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;",derm_treatment,date_functions,,postgres,"SELECT d.last_name,
       d.year_reg,
       MIN(t.start_dt) AS first_treatment_date,
       MIN(t.treatment_id) AS first_treatment_id
FROM doctors d
JOIN treatments t ON d.doc_id = t.doc_id
WHERE d.year_reg >= EXTRACT(YEAR
                            FROM CURRENT_DATE) - 2
GROUP BY d.last_name,
         d.year_reg;",,INCORRECT RESULTS,0,0,0,0,0,4.84,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment","SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events ae JOIN treatments t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10 days';",derm_treatment,date_functions,,postgres,"SELECT t.treatment_id,
       t.start_dt AS treatment_start_date,
       ae.reported_dt AS adverse_event_date,
       ae.description
FROM treatments t
JOIN adverse_events ae ON t.treatment_id = ae.treatment_id
WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10 days';",,,0,1,0,0,0,4.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
"show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.","SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM treatments t JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND TO_DATE(cm.start_dt, 'YYYY-MM-DD') BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 WEEK' ORDER BY t.treatment_id;",derm_treatment,date_functions,,postgres,"SELECT t.treatment_id,
       t.start_dt,
       t.end_dt,
       cm.start_dt AS cm_start_dt,
       cm.end_dt AS cm_end_dt
FROM treatments t
JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id
WHERE t.is_placebo = TRUE
  AND cm.start_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 weeks'
ORDER BY t.treatment_id;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) operator does not exist: text >= date
LINE 9:   AND cm.start_dt BETWEEN t.start_dt AND t.start_dt + INTERV...
                          ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT t.treatment_id,
       t.start_dt,
       t.end_dt,
       cm.start_dt AS cm_start_dt,
       cm.end_dt AS cm_end_dt
FROM treatments t
JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id
WHERE t.is_placebo = TRUE
  AND cm.start_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 weeks'
ORDER BY t.treatment_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.94,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
what is average age of all registered male patients with private insurance currently?,"SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth))) AS avg_age FROM patients WHERE gender = 'Male' AND ins_type = 'private';",derm_treatment,date_functions,,postgres,"SELECT AVG(EXTRACT(YEAR
                   FROM AGE(CURRENT_DATE, date_of_birth))) AS average_age
FROM patients
WHERE gender = 'Male'
  AND ins_type = 'private';",,,0,1,0,0,0,4.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- doctors AS d
-- patients AS p
-- drugs AS dr
-- diagnoses AS di
-- treatments AS t
-- outcomes AS o
-- adverse_events AS ae
-- concomitant_meds AS cm
",,,,,,,,False,n/a
Give me today's median merchant wallet balance for all active merchants whose category contains 'retail',"WITH retail_merchants AS (SELECT mid FROM consumer_div.merchants WHERE category ILIKE '%retail%' AND status = 'active' ), merchant_balances AS (SELECT balance FROM consumer_div.wallet_merchant_balance_daily wmbd JOIN retail_merchants rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE ) SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY balance) AS median_balance FROM merchant_balances;",ewallet,date_functions,,postgres,"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (
                                          ORDER BY balance) AS median_balance
FROM
  (SELECT wmbd.balance
   FROM consumer_div.wallet_merchant_balance_daily wmbd
   JOIN consumer_div.merchants m ON wmbd.merchant_id = m.mid
   WHERE DATE(wmbd.updated_at) = CURRENT_DATE
     AND m.status = 'active'
     AND m.category LIKE '%retail%') AS balances;",,,0,1,0,0,0,5.28,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?,"SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM consumer_div.user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM consumer_div.user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01' );",ewallet,date_functions,,postgres,"SELECT AVG(tx_limit_daily) AS avg_daily_limit,
       AVG(tx_limit_monthly) AS avg_monthly_limit
FROM consumer_div.user_setting_snapshot
WHERE EXTRACT(YEAR
              FROM snapshot_date) = 2023
ORDER BY snapshot_date ASC
LIMIT 1;",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""user_setting_snapshot.snapshot_date"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 6: ORDER BY snapshot_date ASC
                 ^

[SQL: SELECT AVG(tx_limit_daily) AS avg_daily_limit,
       AVG(tx_limit_monthly) AS avg_monthly_limit
FROM consumer_div.user_setting_snapshot
WHERE EXTRACT(YEAR
              FROM snapshot_date) = 2023
ORDER BY snapshot_date ASC
LIMIT 1;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
"Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date","WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM consumer_div.coupons c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM consumer_div.merchants m JOIN earliest_coupons ec ON m.mid = ec.merchant_id JOIN consumer_div.coupons c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= m.created_at + INTERVAL '1 year';",ewallet,date_functions,,postgres,"SELECT m.mid AS merchant_id,
       m.created_at AS registration_date,
       MIN(c.cid) AS earliest_coupon_id,
       MIN(c.start_date) AS earliest_coupon_start_date
FROM consumer_div.merchants m
LEFT JOIN consumer_div.coupons c ON m.mid = c.merchant_id
WHERE c.start_date BETWEEN DATE_TRUNC('year', m.created_at) AND DATE_TRUNC('year', m.created_at) + INTERVAL '1 year'
GROUP BY m.mid,
         m.created_at;",,INCORRECT RESULTS,0,0,0,0,0,5.47,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
"Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.","SELECT u.username, u.email, u.created_at FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND u.created_at + INTERVAL '1 year' WHERE n.user_id IS NULL;",ewallet,date_functions,,postgres,"SELECT username,
       email,
       created_at
FROM consumer_div.users
WHERE UID NOT IN
    (SELECT user_id
     FROM consumer_div.notifications
     WHERE created_at >= (created_at - INTERVAL '1 year'))
  AND status = 'active';",,INCORRECT RESULTS,0,0,0,0,0,4.59,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
what was the average user session duration in seconds split by device_type?,"SELECT device_type, AVG(EXTRACT(EPOCH FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM consumer_div.user_sessions WHERE session_end_ts IS NOT NULL GROUP BY device_type;",ewallet,date_functions,,postgres,"SELECT device_type,
       AVG(EXTRACT(EPOCH
                   FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds
FROM consumer_div.user_sessions
GROUP BY device_type;",,,0,1,0,0,0,4.51,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- consumer_div.users AS u
-- consumer_div.merchants AS m
-- consumer_div.coupons AS c
-- consumer_div.wallet_transactions_daily AS wtd
-- consumer_div.wallet_user_balance_daily AS wubd
-- consumer_div.wallet_merchant_balance_daily AS wmbd
-- consumer_div.notifications AS n
-- consumer_div.user_sessions AS us
-- consumer_div.user_setting_snapshot AS uss
",,,,,,,,False,n/a
How many lakes are there in each state?,"SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY lake_count DESC;SELECT s.state_name, COUNT(l.lake_name) AS lake_count FROM state s LEFT JOIN lake l ON s.state_name = l.state_name GROUP BY s.state_name ORDER BY s.state_name;",geography,group_by,,postgres,"SELECT l.state_name,
       COUNT(*) AS num_lakes
FROM lake l
GROUP BY l.state_name;",,,0,1,0,0,0,3.62,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many mountains are there in each country?,"SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY number_of_mountains DESC;",geography,group_by,,postgres,"SELECT m.country_name,
       COUNT(*) AS mountain_count
FROM mountain m
GROUP BY m.country_name;",,,0,1,0,0,0,3.68,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many rivers flow through each country?,"SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY number_of_rivers DESC;",geography,group_by,,postgres,"SELECT country_name,
       COUNT(river_name) AS num_rivers
FROM river
GROUP BY country_name;",,,0,1,0,0,0,3.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the average length of rivers in each country?,"SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC NULLS LAST;",geography,group_by,,postgres,"SELECT r.country_name,
       AVG(r.length) AS avg_river_length
FROM river r
GROUP BY r.country_name;",,,0,1,0,0,0,5.33,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the total population in cities by country?,"SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC NULLS LAST;",geography,group_by,,postgres,"SELECT country_name,
       SUM(population) AS total_population
FROM city
GROUP BY country_name;",,,0,1,0,0,0,3.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Get the cities in the United States and their population,"SELECT city_name, population FROM city WHERE country_name ILIKE '%United States%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT city_name,
       population
FROM city
WHERE country_name = 'United States';",,,0,1,0,0,0,3.55,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the names and altitudes of the mountains in Nepal?,"SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name ILIKE '%Nepal%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT mountain_name,
       mountain_altitude
FROM mountain
WHERE country_name = 'Nepal';",,,0,1,0,0,0,3.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the names and areas of the lakes in Michigan?,"SELECT lake_name, area FROM lake WHERE state_name ILIKE '%Michigan%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT lake_name,
       area
FROM lake
WHERE state_name = 'Michigan';",,,0,1,0,0,0,3.55,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which rivers traverse at least 3 cities/landmarks?,"SELECT river_name FROM river WHERE traverse LIKE '%,%,%';",geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT river.river_name
FROM river
WHERE LENGTH(river.traverse) >= 3;",,INCORRECT RESULTS,0,0,0,0,0,3.63,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which states have fewer than a hundred thousand people?,SELECT state_name FROM state WHERE population < 100000;,geography,instruct,"
Follow the instructions below to generate the query:
Always filter names using ILIKE
",postgres,"SELECT s.state_name
FROM state s
WHERE s.population < 100000;",,,0,1,0,0,0,3.61,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"What are the highest mountains in meters, ordered from highest to lowest altitude?","SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC NULLS LAST;",geography,order_by,,postgres,"SELECT mountain_name,
       mountain_altitude
FROM mountain
ORDER BY mountain_altitude DESC;",,,0,1,0,0,0,3.60,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"What are the longest rivers in meters, ordered from longest to shortest?","SELECT river.river_name, river.length FROM river ORDER BY river.length DESC NULLS LAST;",geography,order_by,,postgres,"SELECT river_name,
       LENGTH
FROM river
ORDER BY LENGTH DESC;",,,0,1,0,0,0,3.51,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What are the top 5 cities with the highest population? Give both city names and the population.,"SELECT city.city_name, city.population FROM city ORDER BY city.population DESC NULLS LAST LIMIT 5;",geography,order_by,,postgres,"SELECT city_name,
       population
FROM city
ORDER BY population DESC
LIMIT 5;",,,0,1,0,0,0,3.58,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which lakes have the largest areas in square kilometers, ordered from largest to smallest?","SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC NULLS LAST;",geography,order_by,,postgres,"SELECT lake_name,
       area
FROM lake
ORDER BY area DESC;",,,0,1,0,0,0,3.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which states have the highest population density in people per square kilometer, ordered from highest to lowest?","SELECT state.state_name, state.density FROM state ORDER BY state.density DESC NULLS LAST;",geography,order_by,,postgres,"SELECT s.state_name,
       s.density
FROM state s
ORDER BY s.density DESC;",,,0,1,0,0,0,3.59,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Get the ratio of population per area for each state,"SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;",geography,ratio,,postgres,"SELECT s.state_name,
       (s.population::float / s.area) AS population_per_area_ratio
FROM state s;",,,0,1,0,0,0,3.73,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.","SELECT city.city_name, CAST(city.population AS float) / NULLIF(state.population, 0) AS population_ratio FROM city JOIN state ON city.state_name = state.state_name ORDER BY population_ratio DESC NULLS LAST;",geography,ratio,,postgres,"SELECT c.city_name,
       (c.population * 1.0 / s.population) AS proportion_of_state_population
FROM city c
JOIN state s ON c.state_name = s.state_name;",,,0,1,0,0,0,4.01,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly,"SELECT (CAST(everest.mountain_altitude AS FLOAT) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;",geography,ratio,,postgres,"SELECT (m1.mountain_altitude / m2.mountain_altitude) AS ratio
FROM mountain AS m1
JOIN mountain AS m2 ON TRUE
WHERE m1.mountain_name = 'Mount Everest'
  AND m2.mountain_name = 'Dhaulagiri';",,INCORRECT RESULTS,0,0,0,0,0,4.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the length of the Mississippi River to the length of the Rhine River?,"SELECT CAST((SELECT length FROM river WHERE LOWER(river_name) LIKE '%mississippi%') AS FLOAT) / NULLIF((SELECT length FROM river WHERE LOWER(river_name) LIKE '%rhine%'), 0) AS ratio ;",geography,ratio,,postgres,"SELECT
  (SELECT LENGTH
   FROM river
   WHERE river_name = 'Mississippi')::float /
  (SELECT LENGTH
   FROM river
   WHERE river_name = 'Rhine')::float AS ratio_of_lengths;",,,0,1,0,0,0,3.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the ratio of the population of the United States to the population of California?,"SELECT CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.country_name) LIKE '%united states%') AS FLOAT) / CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.state_name) LIKE '%california%') AS FLOAT) AS population_ratio FROM state;",geography,ratio,,postgres,"SELECT
  (SELECT population
   FROM state
   WHERE country_name = 'United States') /
  (SELECT population
   FROM state
   WHERE state_name = 'California') AS Ratio;",,"EXECUTION ERROR: (psycopg2.errors.CardinalityViolation) more than one row returned by a subquery used as an expression

[SQL: SELECT
  (SELECT population
   FROM state
   WHERE country_name = 'United States') /
  (SELECT population
   FROM state
   WHERE state_name = 'California') AS Ratio;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the average length of rivers per country in countries with a lake?,"SELECT l.country_name, AVG(r.length) AS average_length FROM river r JOIN lake l ON r.country_name = l.country_name GROUP BY 1;",geography,table_join,,postgres,"SELECT r.country_name,
       AVG(r.length) AS avg_river_length
FROM river r
JOIN lake l ON r.country_name = l.country_name
GROUP BY r.country_name;",,,0,1,0,0,0,6.44,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
What is the highest point in each state and what is the population density of that state?,"SELECT highlow.state_name, highlow.highest_point, state.density FROM highlow JOIN state ON highlow.state_name = state.state_name;",geography,table_join,,postgres,"SELECT hl.state_name,
       hl.highest_point,
       st.density AS population_density
FROM highlow hl
JOIN state st ON hl.state_name = st.state_name;",,,0,1,0,0,0,5.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which countries have both lakes and rivers?,SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;,geography,table_join,,postgres,"SELECT DISTINCT l.country_name AS country
FROM lake l
WHERE EXISTS
    (SELECT 1
     FROM river r
     WHERE l.country_name = r.country_name)
  AND NOT EXISTS
    (SELECT 1
     FROM city c
     WHERE l.country_name = c.country_name
       AND c.city_name LIKE '%lake%');",,,0,1,0,0,0,5.92,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
"Which lakes have a name that starts with ""Lake""? They should be located in states with an area greater than 1000 square kilometers.",SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND lake.lake_name ilike 'Lake%' ORDER BY lake.lake_name NULLS LAST;,geography,table_join,,postgres,"SELECT l.lake_name
FROM lake l
JOIN state s ON l.state_name = s.state_name
WHERE l.lake_name LIKE 'Lake%'
  AND s.area > 1000;",,,0,1,0,0,0,3.94,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
Which states border the state where lake ontario is?,SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE lake.lake_name ilike '%Ontario%';,geography,table_join,,postgres,"SELECT DISTINCT b.border
FROM border_info b
JOIN lake l ON b.state_name = l.state_name
WHERE l.lake_name = 'Ontario';",,INCORRECT RESULTS,0,0,0,0,0,3.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- city AS c
-- lake AS l
-- river AS r
-- state AS s
-- highlow AS h
-- mountain AS m
-- border_info AS bi
",,,,,,,,False,n/a
How many restaurants are there in each city? Order the results by the number of restaurants in descending order.,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT city_name,
       COUNT(*) AS num_restaurants
FROM restaurant
GROUP BY city_name
ORDER BY num_restaurants DESC;",,,0,1,0,0,0,3.52,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants serve Italian food in each city?,"SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE restaurant.food_type ILIKE '%Italian%' GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT r.city_name,
       COUNT(*) AS italian_restaurants
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
WHERE r.food_type = 'Italian'
GROUP BY r.city_name;",,,0,1,0,0,0,3.76,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants serving each type of food?,"SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC NULLS LAST;",restaurants,group_by,,postgres,"SELECT food_type,
       AVG(rating) AS average_rating
FROM restaurant
GROUP BY food_type;",,,0,1,0,0,0,3.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the total count of restaurants in each city?,"SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;",restaurants,group_by,,postgres,"SELECT city_name,
       COUNT(*) AS total_restaurants
FROM restaurant
GROUP BY city_name;",,,0,1,0,0,0,3.41,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the total number of restaurants serving each type of food?,"SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;",restaurants,group_by,,postgres,"SELECT food_type,
       COUNT(*) AS total_restaurants
FROM restaurant
GROUP BY food_type;",,,0,1,0,0,0,3.42,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the restaurants in Los Angeles that have a rating higher than 4?,SELECT DISTINCT restaurant.name FROM restaurant WHERE restaurant.city_name ILIKE '%Los Angeles%' AND restaurant.rating > 4 ORDER BY restaurant.name NULLS LAST;,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT r.name
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
JOIN geographic g ON l.city_name = g.city_name
WHERE g.region = 'Los Angeles'
  AND r.rating > 4;",,INCORRECT RESULTS,0,0,0,0,0,3.82,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the restaurants that serve Italian food?,SELECT restaurant.name FROM restaurant WHERE LOWER(restaurant.food_type) ILIKE '%italian%';,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT name
FROM restaurant
WHERE food_type = 'Italian';",,,0,1,0,0,0,3.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What's the name and food type of all the restaurants located on Market St in San Francisco?,"SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE location.street_name ILIKE '%Market St%' AND location.city_name ILIKE '%San Francisco%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT r.name,
       r.food_type
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
WHERE l.street_name = 'Market St'
  AND l.city_name = 'San Francisco';",,,0,1,0,0,0,3.74,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?,"SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND restaurant.city_name ILIKE '%New York%';",restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT r.name,
       r.rating
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
WHERE r.rating > 4
  AND l.city_name = 'New York';",,,0,1,0,0,0,3.69,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which city has the highest-rated restaurant?,SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating=(SELECT MAX(rating) FROM restaurant);,restaurants,instruct,"
Follow the instructions below to generate the query:
Match all strings case-insensitively using wildcard operators
",postgres,"SELECT r.city_name,
       MAX(r.rating) AS max_rating
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
GROUP BY r.city_name
ORDER BY max_rating DESC
LIMIT 1;",,,0,1,0,0,0,3.80,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
List the restaurants starting from the best ratings to the lowest,"SELECT {name, id}, rating FROM restaurant ORDER BY rating DESC;",restaurants,order_by,,postgres,"SELECT name,
       rating
FROM restaurant
ORDER BY rating DESC;",,,0,1,0,0,0,3.31,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What are the names of the top 3 restaurants with the highest ratings?,SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC NULLS LAST LIMIT 3;,restaurants,order_by,,postgres,"SELECT name
FROM restaurant
ORDER BY rating DESC
LIMIT 3;",,,0,1,0,0,0,3.37,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants in each region? Order the results by the region name.,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY geographic.region NULLS LAST;",restaurants,order_by,,postgres,"SELECT r.region,
       AVG(rating) AS avg_rating
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region
ORDER BY r.region;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r.region does not exist
LINE 1: SELECT r.region,
               ^
HINT:  Perhaps you meant to reference the column ""g.region"".

[SQL: SELECT r.region,
       AVG(rating) AS avg_rating
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region
ORDER BY r.region;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.,SELECT name FROM restaurant WHERE food_type ILIKE '%Italian%' OR city_name ILIKE '%New York%' ORDER BY name NULLS LAST;,restaurants,order_by,,postgres,"SELECT r.name,
       r.rating
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
JOIN geographic g ON l.city_name = g.city_name
WHERE (r.food_type = 'Italian'
       OR g.city_name = 'New York')
ORDER BY r.name;",,,0,1,0,0,0,3.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
Which street has the most number of restaurants?,SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(restaurant_id) DESC LIMIT 1;,restaurants,order_by,,postgres,"SELECT street_name,
       COUNT(*) AS num_restaurants
FROM LOCATION
GROUP BY street_name
ORDER BY num_restaurants DESC
LIMIT 1;",,,0,1,0,0,0,3.58,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of Italian restaurants out of all restaurants in Los Angeles?,"SELECT CAST(COUNT(CASE WHEN food_type ILIKE '%Italian%' THEN 1 END) AS FLOAT) / NULLIF(COUNT(food_type), 0) AS ratio FROM restaurant WHERE city_name ILIKE '%Los Angeles%';",restaurants,ratio,,postgres,"SELECT COUNT(*) FILTER (
                        WHERE food_type = 'Italian') / COUNT(*)
FROM restaurant
WHERE city_name = 'Los Angeles';",,INCORRECT RESULTS,0,0,0,0,0,3.50,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively,"SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN LOWER(restaurant.food_type) NOT LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(restaurant.city_name) ILIKE '%san francisco%';",restaurants,ratio,,postgres,"SELECT COUNT(CASE
                 WHEN LOWER(food_type) = 'vegan' THEN 1
             END) AS vegan_count,
       COUNT(CASE
                 WHEN LOWER(food_type) != 'vegan'
                      AND LOWER(food_type) != 'non-vegan' THEN 1
             END) AS non_vegan_count,
       COUNT(CASE
                 WHEN LOWER(food_type) = 'vegan' THEN 1
             END)::FLOAT / NULLIF(COUNT(CASE
                                            WHEN LOWER(food_type) != 'vegan'
                                                 AND LOWER(food_type) != 'non-vegan' THEN 1
                                        END), 0) AS ratio
FROM restaurant
WHERE city_name = 'San Francisco';",,,0,1,0,0,0,5.17,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?,"SELECT CAST(COUNT(CASE WHEN rating > 4 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN rating < 4 THEN 1 END), 0) AS ratio FROM restaurant WHERE city_name ILIKE 'New York';",restaurants,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE rating > 4))::FLOAT / COUNT(*)
FROM restaurant
JOIN LOCATION ON restaurant.city_name = location.city_name
JOIN geographic ON location.city_name = geographic.city_name
WHERE geographic.region = 'New York';",,INCORRECT RESULTS,0,0,0,0,0,3.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?,"SELECT CAST(SUM(CASE WHEN restaurant.rating > 4.0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN restaurant.rating < 4.0 THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant;",restaurants,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE rating > 4.0)::FLOAT / COUNT(*)) AS ratio_above_4,
       (COUNT(*) FILTER (
                         WHERE rating <= 4.0)::FLOAT / COUNT(*)) AS ratio_below_or_equal_to_4
FROM restaurant;",,INCORRECT RESULTS,0,0,0,0,0,3.99,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.,"SELECT COUNT(*)::float / NULLIF((SELECT COUNT(*) FROM restaurant), 0) AS rating_ratio FROM restaurant WHERE rating > 4.5;",restaurants,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE rating > 4.5)::FLOAT / COUNT(*)) AS ratio_of_highly_rated_restaurants
FROM restaurant;",,,0,1,0,0,0,3.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants are there in each region?,"SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;",restaurants,table_join,,postgres,"SELECT r.region,
       COUNT(*) AS num_restaurants
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r.region does not exist
LINE 1: SELECT r.region,
               ^
HINT:  Perhaps you meant to reference the column ""g.region"".

[SQL: SELECT r.region,
       COUNT(*) AS num_restaurants
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.63,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many restaurants serve Italian food in each region?,"SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC NULLS LAST;",restaurants,table_join,,postgres,"SELECT r.region,
       COUNT(*) AS italian_restaurants
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
WHERE r.food_type = 'Italian'
GROUP BY r.region;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r.region does not exist
LINE 1: SELECT r.region,
               ^
HINT:  Perhaps you meant to reference the column ""g.region"".

[SQL: SELECT r.region,
       COUNT(*) AS italian_restaurants
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
WHERE r.food_type = 'Italian'
GROUP BY r.region;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.76,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
"What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count","SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;",restaurants,table_join,,postgres,"SELECT r.city_name AS city,
       r.name AS restaurant,
       COUNT(*) AS restaurant_count
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
WHERE EXISTS
    (SELECT 1
     FROM restaurant rr
     JOIN LOCATION ll ON rr.id = ll.restaurant_id
     WHERE rr.name = r.name
       AND rr.city_name = r.city_name
       AND rr.id != r.id)
GROUP BY r.city_name,
         r.name;",,,0,1,0,0,0,4.44,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants in each region?,"SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN restaurant ON geographic.city_name=restaurant.city_name GROUP BY 1;",restaurants,table_join,,postgres,"SELECT r.region,
       AVG(r.rating) AS avg_rating
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column r.region does not exist
LINE 1: SELECT r.region,
               ^
HINT:  Perhaps you meant to reference the column ""g.region"".

[SQL: SELECT r.region,
       AVG(r.rating) AS avg_rating
FROM geographic g
JOIN restaurant r ON g.city_name = r.city_name
GROUP BY r.region;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
What is the average rating of restaurants that serve Mexican food in each city?,"SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;",restaurants,table_join,,postgres,"SELECT r.city_name,
       AVG(r.rating) AS avg_rating
FROM restaurant r
JOIN LOCATION l ON r.id = l.restaurant_id
WHERE r.food_type = 'Mexican'
GROUP BY r.city_name;",,,0,1,0,0,0,3.79,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- location AS l
-- geographic AS g
-- restaurant AS r
",,,,,,,,False,n/a
How many authors have published more than 2 papers?,SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;,scholar,group_by,,postgres,"SELECT COUNT(DISTINCT authorid)
FROM writes
WHERE paperid IN
    (SELECT paperid
     FROM writes
     GROUP BY paperid
     HAVING COUNT(*) > 2);",,INCORRECT RESULTS,0,0,0,0,0,3.83,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
How many keyphrases are associated with each paper?,"SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY keyphrase_count DESC NULLS LAST;SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper p JOIN paperkeyphrase pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC NULLS LAST;",scholar,group_by,,postgres,"SELECT p.paperid,
       COUNT(pk.keyphraseid) AS num_keyphrases
FROM paperkeyphrase pk
JOIN paper p ON pk.paperid = p.paperid
GROUP BY p.paperid;",,,0,1,0,0,0,3.95,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers associated with each dataset?,"SELECT paperdataset.datasetid, COUNT(DISTINCT paperdataset.paperid) AS total_papers FROM paperdataset GROUP BY paperdataset.datasetid;SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;",scholar,group_by,,postgres,"SELECT pd.datasetid,
       COUNT(pd.paperid) AS total_papers
FROM paperdataset pd
GROUP BY pd.datasetid;",,,0,1,0,0,0,3.78,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers published in each year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year;",scholar,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS total_papers
FROM paper
GROUP BY YEAR;",,,0,1,0,0,0,3.53,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the total number of papers published per year?,"SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year NULLS LAST;",scholar,group_by,,postgres,"SELECT YEAR,
       COUNT(*) AS total_papers_per_year
FROM paper
GROUP BY YEAR;",,,0,1,0,0,0,3.54,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many authors wrote papers that were published in the journal ""Science"" in the year 2020?",SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE journal.journalname ILIKE '%Science%' AND paper.year = 2020;,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names using exact matches.
Filter keyphrases and journal names with case-insensitive matching.
",postgres,"SELECT COUNT(DISTINCT author.authorid)
FROM author
JOIN writes ON author.authorid = writes.authorid
JOIN paper ON writes.paperid = paper.paperid
JOIN journal ON paper.journalid = journal.journalid
WHERE journal.journalname = 'Science'
  AND paper.year = 2020;",,,0,1,0,0,0,4.24,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers are associated with the keyphrase ""machine learning"" and were published in the journal named ""IEEE Transactions on Pattern Analysis and Machine Intelligence""?",SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%machine learning%' AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter paper names, journal names, using exact matches.
Filter keyphrases with case-insensitive matching.
",postgres,"SELECT COUNT(DISTINCT p.paperid)
FROM paperkeyphrase pkp
JOIN paper p ON pkp.paperid = p.paperid
JOIN journal j ON p.journalid = j.journalid
JOIN keyphrase k ON pkp.keyphraseid = k.keyphraseid
WHERE LOWER(k.keyphrasename) = 'machine learning'
  AND LOWER(j.journalname) = 'ieee transactions on pattern analysis and machine intelligence';",,,0,1,0,0,0,4.63,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers were published in the journal ""nature"" in the year 2020?",SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND journal.journalname ILIKE '%nature%';,scholar,instruct,"
Follow the instructions below to generate the query:
Filter strings with case-insensitive matching
",postgres,"SELECT COUNT(*)
FROM paper
WHERE YEAR = 2020
  AND journalid IN
    (SELECT journalid
     FROM journal
     WHERE LOWER(journalname) = 'nature');",,,0,1,0,0,0,3.88,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the names of the authors who wrote the paper with the title ""The Effects of Climate Change on Agriculture""?",SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';,scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings with an exact match
",postgres,"SELECT DISTINCT a.authorname
FROM author a
JOIN writes w ON a.authorid = w.authorid
WHERE w.paperid IN
    (SELECT p.paperid
     FROM paper p
     WHERE p.title = 'The Effects of Climate Change on Agriculture');",,,0,1,0,0,0,4.09,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?","SELECT venue.venuename, COUNT(DISTINCT paper.paperid) FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE paper.venueid = (SELECT venueid FROM paper WHERE paperid = 2 ) GROUP BY venue.venuename;",scholar,instruct,"
Follow the instructions below to generate the query:
Always filter strings using ILIKE
",postgres,"SELECT v.venuename,
       COUNT(p.paperid) AS total_papers_in_venue
FROM paper p
JOIN venue v ON p.venueid = v.venueid
WHERE p.paperid = 2
GROUP BY v.venuename;",,INCORRECT RESULTS,0,0,0,0,0,4.05,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order","SELECT cite.citingpaperid, COUNT(*) AS citation_count FROM cite GROUP BY cite.citingpaperid ORDER BY citation_count DESC NULLS LAST;SELECT p.paperid, p.numciting FROM paper p WHERE p.numciting > 0 ORDER BY p.numciting DESC;SELECT p.title, COUNT(c.citedpaperid) AS num_cited_papers FROM paper p JOIN cite c ON p.paperid = c.citingpaperid GROUP BY p.title ORDER BY num_cited_papers DESC;",scholar,order_by,,postgres,"SELECT p.paperid,
       COUNT(c.citedpaperid) AS num_citations
FROM paper p
JOIN cite c ON p.paperid = c.citingpaperid
GROUP BY p.paperid
HAVING COUNT(c.citedpaperid) > 0
ORDER BY num_citations DESC;",,,0,1,0,0,0,4.20,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?",SELECT journal.journalname FROM journal ORDER BY LENGTH(journal.journalname) ASC NULLS LAST;,scholar,order_by,,postgres,"SELECT journalname
FROM journal
ORDER BY LENGTH(journalname);",,,0,1,0,0,0,3.53,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What are the titles of the papers published in the year 2020, ordered alphabetically?",SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY paper.title ASC NULLS LAST;,scholar,order_by,,postgres,"SELECT title
FROM paper
WHERE YEAR = 2020
ORDER BY title ASC;",,,0,1,0,0,0,3.58,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?","SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY paperkeyphrase.paperid ASC NULLS LAST;",scholar,order_by,,postgres,"SELECT p.paperid,
       COUNT(pk.keyphraseid) AS num_keyphrases
FROM paperkeyphrase pk
JOIN paper p ON pk.paperid = p.paperid
GROUP BY p.paperid
ORDER BY p.paperid ASC;",,,0,1,0,0,0,4.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which papers have the highest number of authors, ordered by the number of authors in descending order?","SELECT {paper.paperid, paper.title}, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY {} ORDER BY num_authors DESC;",scholar,order_by,,postgres,"SELECT p.paperid,
       p.title,
       COUNT(w.authorid) AS num_authors
FROM paper p
JOIN writes w ON p.paperid = w.paperid
GROUP BY p.paperid,
         p.title
ORDER BY num_authors DESC;",,,0,1,0,0,0,5.00,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?,"SELECT CAST(COUNT(CASE WHEN dataset_count > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN dataset_count = 1 THEN 1 END), 0) AS ratio FROM (SELECT paperdataset.paperid, COUNT(paperdataset.datasetid) AS dataset_count FROM paperdataset GROUP BY paperdataset.paperid) AS subquery;",scholar,ratio,,postgres,"WITH paper_counts AS
  (SELECT paperid,
          COUNT(datasetid) AS dataset_count
   FROM paperdataset
   GROUP BY paperid)
SELECT (SUM(CASE
                WHEN dataset_count > 1 THEN 1
                ELSE 0
            END) * 1.0 / SUM(CASE
                                 WHEN dataset_count = 1 THEN 1
                                 ELSE 0
                             END)) AS proportion
FROM paper_counts;",,,0,1,0,0,0,6.18,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?,"SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;",scholar,ratio,,postgres,"SELECT (SUM(CASE
                WHEN paper_count >= 3 THEN 1
                ELSE 0
            END) * 1.0) / SUM(CASE
                                  WHEN paper_count < 3 THEN 1
                                  ELSE 0
                              END) AS ratio
FROM
  (SELECT authorid,
          COUNT(*) AS paper_count
   FROM writes
   GROUP BY authorid) authors;",,,0,1,0,0,0,6.04,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers published in the year 2020 to the total number of papers in the database?,"SELECT CAST(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) AS FLOAT) / NULLIF(COUNT(paper.paperid), 0) AS ratio FROM paper;",scholar,ratio,,postgres,"SELECT
  (SELECT COUNT(*)
   FROM paper
   WHERE YEAR = 2020)::FLOAT /
  (SELECT COUNT(*)
   FROM paper) AS ratio_of_papers_in_2020;",,,0,1,0,0,0,3.87,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?,"SELECT CAST(COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END), 0) AS ratio FROM paper;",scholar,ratio,,postgres,"SELECT (SUM(CASE
                WHEN numcitedby >= 2 THEN 1
                ELSE 0
            END) * 1.0 / SUM(CASE
                                 WHEN numcitedby < 2 THEN 1
                                 ELSE 0
                             END)) AS ratio
FROM paper;",,,0,1,0,0,0,4.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?,"SELECT CAST(COUNT(DISTINCT CASE WHEN keyphrase_count > 1 THEN subquery.paperid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN keyphrase_count =1 THEN subquery.paperid END), 0) AS ratio FROM (SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid) AS subquery;",scholar,ratio,,postgres,"SELECT (COUNT(CASE
                  WHEN pk.keyphraseid > 1 THEN p.paperid
              END) * 1.0 / COUNT(DISTINCT p.paperid)) AS ratio_more_than_one_keyphrase,
       (COUNT(CASE
                  WHEN pk.keyphraseid = 1 THEN p.paperid
              END) * 1.0 / COUNT(DISTINCT p.paperid)) AS ratio_exactly_one_keyphrase
FROM paperkeyphrase pk
JOIN paper p ON pk.paperid = p.paperid;",,INCORRECT RESULTS,0,0,0,0,0,6.50,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"How many papers cite each paper in the dataset named ""COVID-19 Research""?","SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE datasetname ILIKE '%COVID-19 Research%') GROUP BY paperdataset.paperid ORDER BY citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper p JOIN paperdataset pd ON p.paperid = pd.paperid JOIN cite c ON p.paperid = c.citedpaperid JOIN dataset d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC NULLS LAST;",scholar,table_join,,postgres,"SELECT p.paperid,
       COUNT(c.citingpaperid) AS num_citations
FROM paperdataset pd
JOIN paper p ON pd.paperid = p.paperid
JOIN cite c ON p.paperid = c.citedpaperid
WHERE pd.datasetid =
    (SELECT datasetid
     FROM dataset
     WHERE datasetname = 'COVID-19 Research')
GROUP BY p.paperid;",,,0,1,0,0,0,6.35,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of papers published in each journal, ordered by the journal name?","SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY journal.journalname NULLS LAST;",scholar,table_join,,postgres,"SELECT j.journalname,
       COUNT(p.paperid) AS total_papers
FROM paper p
JOIN journal j ON p.journalid = j.journalid
GROUP BY j.journalname
ORDER BY j.journalname;",,,0,1,0,0,0,3.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"What is the total number of unique keyphrases associated with papers published in the journal with ""IEEE Transactions"" in its name?",SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE journal.journalname ILIKE '%IEEE Transactions%';,scholar,table_join,,postgres,"SELECT COUNT(DISTINCT pk.keyphraseid)
FROM paperkeyphrase pk
JOIN paper p ON pk.paperid = p.paperid
JOIN journal j ON p.journalid = j.journalid
WHERE j.journalname LIKE '%IEEE Transactions%';",,,0,1,0,0,0,4.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which authors have published the most papers, ordered by the number of papers they have published in descending order?","SELECT {author.authorname, author.authorid}, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY {} ORDER BY number_of_papers DESC NULLS LAST;",scholar,table_join,,postgres,"SELECT author.authorname,
       COUNT(writes.paperid) AS num_papers
FROM writes
JOIN author ON writes.authorid = author.authorid
GROUP BY author.authorname
ORDER BY num_papers DESC;",,,0,1,0,0,0,3.91,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
"Which papers are associated with the keyphrase ""Machine Learning""?","SELECT {paper.title,paper.paperid} FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%Machine Learning%';",scholar,table_join,,postgres,"SELECT p.title AS Paper_Title,
       k.keyphrasename AS Keyphrase_Name
FROM paperkeyphrase pkp
JOIN paper p ON pkp.paperid = p.paperid
JOIN keyphrase k ON pkp.keyphraseid = k.keyphraseid
WHERE k.keyphrasename = 'Machine Learning';",,,0,1,0,0,0,4.23,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- cite AS c
-- field AS f
-- paper AS p
-- venue AS v
-- author AS a
-- writes AS w
-- dataset AS d
-- journal AS j
-- keyphrase AS k
-- paperfield AS pa
-- paperdataset AS pap
-- paperkeyphrase AS p2
",,,,,,,,False,n/a
How many months between June 2021 and December 2021 had reviews?,SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;,yelp,date_functions,,postgres,"SELECT COUNT(DISTINCT MONTH) AS num_months_with_reviews
FROM review
WHERE MONTH IN ('June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December')
  AND YEAR = 2021;",,,0,1,0,0,0,4.06,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were there 2 months before the review with id 3?,"SELECT COUNT(*) AS review_count FROM review WHERE TO_DATE(CAST(review.year AS TEXT) || '-' || CASE review.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') = (SELECT TO_DATE(CAST(r.year AS TEXT) || '-' || CASE r.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') - INTERVAL '2 months' FROM review r WHERE r.rid = 3);",yelp,date_functions,,postgres,"SELECT COUNT(*)
FROM review
WHERE MONTH = (CASE
                   WHEN EXTRACT(MONTH
                                FROM
                                  (SELECT MONTH
                                   FROM review
                                   WHERE rid = 3)) > 10 THEN 'December'
                   ELSE TO_CHAR(DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months')
               END)
  AND YEAR = (CASE
                  WHEN EXTRACT(YEAR
                               FROM
                                 (SELECT YEAR
                                  FROM review
                                  WHERE rid = 3)) = EXTRACT(YEAR
                                                            FROM CURRENT_DATE) THEN EXTRACT(YEAR
                                                                                            FROM CURRENT_DATE)
                  ELSE EXTRACT(YEAR
                               FROM CURRENT_DATE) - 1
              END);",,"EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function pg_catalog.extract(unknown, text) does not exist
LINE 4:                    WHEN EXTRACT(MONTH
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT COUNT(*)
FROM review
WHERE MONTH = (CASE
                   WHEN EXTRACT(MONTH
                                FROM
                                  (SELECT MONTH
                                   FROM review
                                   WHERE rid = 3)) > 10 THEN 'December'
                   ELSE TO_CHAR(DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 months')
               END)
  AND YEAR = (CASE
                  WHEN EXTRACT(YEAR
                               FROM
                                 (SELECT YEAR
                                  FROM review
                                  WHERE rid = 3)) = EXTRACT(YEAR
                                                            FROM CURRENT_DATE) THEN EXTRACT(YEAR
                                                                                            FROM CURRENT_DATE)
                  ELSE EXTRACT(YEAR
                               FROM CURRENT_DATE) - 1
              END);]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,5.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were written for businesses located in California in the last 10 calendar months (not including the current month)?,"SELECT count(*) AS review_count FROM review r JOIN business b ON r.business_id = b.business_id WHERE b.state = 'CA' AND (r.year * 12 + extract(MONTH FROM to_date(r.month, 'Month'))) >= (extract(YEAR FROM CURRENT_DATE) * 12 + extract(MONTH FROM CURRENT_DATE) - 10);",yelp,date_functions,,postgres,"SELECT COUNT(*)
FROM review r
JOIN business b ON r.business_id = b.business_id
WHERE b.state = 'CA'
  AND EXTRACT(MONTH
              FROM TO_TIMESTAMP(r.year || '-' || r.month, 'YYYY-MM')) BETWEEN 1 AND 12 - EXTRACT(MONTH
                                                                                                 FROM CURRENT_DATE) + 1;",,"EXECUTION ERROR: (psycopg2.errors.InvalidDatetimeFormat) invalid value ""Ja"" for ""MM""
DETAIL:  Value must be an integer.

[SQL: SELECT COUNT(*)
FROM review r
JOIN business b ON r.business_id = b.business_id
WHERE b.state = 'CA'
  AND EXTRACT(MONTH
              FROM TO_TIMESTAMP(r.year || '-' || r.month, 'YYYY-MM')) BETWEEN 1 AND 12 - EXTRACT(MONTH
                                                                                                 FROM CURRENT_DATE) + 1;]
(Background on this error at: https://sqlalche.me/e/20/9h9h)",0,0,0,1,0,4.38,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of check-ins on the 2 days before Saturday?,"SELECT sum(COUNT) AS total_checkins FROM checkin WHERE DAY IN ('Thursday', 'Friday') ;",yelp,date_functions,,postgres,"SELECT SUM(COUNT) AS total_checkins
FROM checkin
WHERE DAY IN ('Friday',
              'Thursday');",,,0,1,0,0,0,4.56,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What was the message that came with the tip made exactly 2 months after March 2021?,SELECT text AS message FROM tip WHERE MONTH ILIKE '%May%' AND YEAR = 2021 LIMIT 1;,yelp,date_functions,,postgres,"SELECT text
FROM tip
WHERE MONTH = 'May'
  AND YEAR = 2021;",,,0,1,0,0,0,3.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many check-ins occurred on each day of the week?,"SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT DAY,
       COUNT(*) AS total_checkins
FROM checkin
GROUP BY DAY;",,INCORRECT RESULTS,0,0,0,0,0,3.62,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
Return the name and average rating for each business in new york,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%NEW YORK%' GROUP BY business.name;",yelp,group_by,,postgres,"SELECT b.name,
       AVG(r.rating) AS avg_rating
FROM business b
JOIN review r ON b.business_id = r.business_id
JOIN neighbourhood n ON b.business_id = n.business_id
WHERE n.neighbourhood_name = 'New York'
GROUP BY b.name;",,INCORRECT RESULTS,0,0,0,0,0,4.22,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total count of check-ins for each business id?,"SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT business_id,
       SUM(COUNT) AS total_checkins
FROM checkin
GROUP BY business_id;",,,0,1,0,0,0,3.66,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of check-ins for each day of the week for the business with ID ""abc123""?","SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin WHERE checkin.business_id = 'abc123' GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT DAY,
       SUM(COUNT) AS total_checkins
FROM checkin
WHERE business_id = 'abc123'
GROUP BY DAY;",,,0,1,0,0,0,3.90,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?","SELECT {neighbourhood.neighbourhood_name, neighbourhood.id}, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY {} ORDER BY business_count DESC NULLS LAST;",yelp,group_by,,postgres,"SELECT n.neighbourhood_name,
       COUNT(b.business_id) AS business_count
FROM business b
JOIN neighbourhood n ON b.business_id = n.business_id
GROUP BY n.neighbourhood_name
ORDER BY business_count DESC;",,,0,1,0,0,0,4.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many check-ins occurred on Mondays at businesses in the state of California?,SELECT SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' AND checkin.day ILIKE '%Monday%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT SUM(COUNT)
FROM checkin
WHERE DAY = 'Monday'
  AND EXISTS
    (SELECT 1
     FROM business
     WHERE business.business_id = checkin.business_id
       AND state = 'CA');",,,0,1,0,0,0,3.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How many reviews were posted by users with the name ""Sarah Williams"" in the month of April 2021?",SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE users.name ILIKE '%Sarah Williams%' AND review.month = 'April' AND review.year = 2021;,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT COUNT(*)
FROM review
JOIN users ON review.user_id = users.user_id
WHERE users.name = 'Sarah Williams'
  AND EXTRACT(MONTH
              FROM TO_TIMESTAMP(review.year || '-' || review.month, 'YYYY-MM')) = 4
  AND EXTRACT(YEAR
              FROM TO_TIMESTAMP(review.year || '-' || review.month, 'YYYY-MM')) = 2021;",,"EXECUTION ERROR: (psycopg2.errors.InvalidDatetimeFormat) invalid value ""Ja"" for ""MM""
DETAIL:  Value must be an integer.

[SQL: SELECT COUNT(*)
FROM review
JOIN users ON review.user_id = users.user_id
WHERE users.name = 'Sarah Williams'
  AND EXTRACT(MONTH
              FROM TO_TIMESTAMP(review.year || '-' || review.month, 'YYYY-MM')) = 4
  AND EXTRACT(YEAR
              FROM TO_TIMESTAMP(review.year || '-' || review.month, 'YYYY-MM')) = 2021;]
(Background on this error at: https://sqlalche.me/e/20/9h9h)",0,0,0,1,0,4.53,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
How many reviews were posted for each business id in the year 2021?,"SELECT review.business_id, COUNT(*) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.business_id ORDER BY review_count DESC NULLS LAST;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT business_id,
       COUNT(*) AS review_count
FROM review
WHERE EXTRACT(YEAR
              FROM timestamp) = 2021
GROUP BY business_id;",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""timestamp"" does not exist
LINE 5:               FROM timestamp) = 2021
                           ^

[SQL: SELECT business_id,
       COUNT(*) AS review_count
FROM review
WHERE EXTRACT(YEAR
              FROM timestamp) = 2021
GROUP BY business_id;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.84,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the average rating of businesses in the city of San Francisco?,"SELECT AVG(sf.average_rating) AS sf_average_rating FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) ILIKE '%san francisco%' GROUP BY business.business_id) AS sf;",yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
The rating of businesses in a city refers to the average rating of the businesses in that city.
I.e., you must compute the average rating of each business before computing the average rating of businesses in the city.

",postgres,"SELECT AVG(rating) AS average_rating
FROM review
JOIN business ON review.business_id = business.business_id
WHERE city = 'San Francisco';",,INCORRECT RESULTS,0,0,0,0,0,3.81,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of reviews posted in the year 2021 for businesses in the category ""Cafe""?",SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND category.category_name ILIKE '%Cafe%';,yelp,instruct,"
Follow the instructions below to generate the query:
Filter strings of users, city, address, business.name using ILIKE with wildcards.
Filter strings of state using exact upper case matches.
Assume the rating of a business to be its average rating, and compute it before computing other aggregates on it.

",postgres,"SELECT COUNT(*)
FROM review
JOIN category ON review.business_id = category.business_id
WHERE EXTRACT(YEAR
              FROM review.date) = 2021
  AND category.category_name = 'Cafe';",,"EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column review.date does not exist
LINE 5:               FROM review.date) = 2021
                           ^

[SQL: SELECT COUNT(*)
FROM review
JOIN category ON review.business_id = category.business_id
WHERE EXTRACT(YEAR
              FROM review.date) = 2021
  AND category.category_name = 'Cafe';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,3.98,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How many reviews were posted in each month of the year 2021, ordered by the month?","SELECT review.month, COUNT(review.rid) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.month ORDER BY TO_DATE(review.month, 'Month') NULLS LAST;",yelp,order_by,,postgres,"SELECT MONTH,
       COUNT(*) AS review_count
FROM review
WHERE YEAR = 2021
GROUP BY MONTH
ORDER BY MONTH;",,INCORRECT RESULTS,0,0,0,0,0,3.77,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.,"SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%New York%' GROUP BY business.name, business.business_id ORDER BY average_rating DESC NULLS LAST;",yelp,order_by,,postgres,"SELECT b.name,
       AVG(r.rating) AS avg_rating
FROM business b
JOIN review r ON b.business_id = r.business_id
WHERE b.state = 'NY'
GROUP BY b.name
ORDER BY avg_rating DESC;",,,0,1,0,0,0,4.05,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What are the names of the businesses in the database, ordered alphabetically?",SELECT business.name FROM business ORDER BY business.name ASC NULLS LAST;,yelp,order_by,,postgres,"SELECT name
FROM business
ORDER BY name ASC;",,,0,1,0,0,0,3.50,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What are the top 3 businesses in terms of review count?,"SELECT {business.name, business.business_id, business.bid}, business.review_count FROM business ORDER BY business.review_count DESC NULLS LAST LIMIT 3;",yelp,order_by,,postgres,"SELECT name,
       review_count
FROM business
ORDER BY review_count DESC
LIMIT 3;",,,0,1,0,0,0,3.65,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the latitude and longitude of the business with the highest rating?,"SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY AVG(review.rating) DESC LIMIT 1;",yelp,order_by,,postgres,"SELECT b.latitude,
       b.longitude
FROM business AS b
JOIN
  (SELECT business_id,
          MAX(rating) AS max_rating
   FROM review) AS r ON b.business_id = r.business_id
WHERE r.max_rating =
    (SELECT MAX(rating)
     FROM review);",,"EXECUTION ERROR: (psycopg2.errors.GroupingError) column ""review.business_id"" must appear in the GROUP BY clause or be used in an aggregate function
LINE 5:   (SELECT business_id,
                  ^

[SQL: SELECT b.latitude,
       b.longitude
FROM business AS b
JOIN
  (SELECT business_id,
          MAX(rating) AS max_rating
   FROM review) AS r ON b.business_id = r.business_id
WHERE r.max_rating =
    (SELECT MAX(rating)
     FROM review);]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,4.21,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?","SELECT {category.category_name, category.id}, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY {} ORDER BY ratio DESC NULLS LAST;",yelp,ratio,,postgres,"SELECT c.category_name,
       COUNT(DISTINCT CASE
                          WHEN r.rating > 3 THEN r.business_id
                      END) AS positive_reviews,
       COUNT(DISTINCT CASE
                          WHEN r.rating < 3 THEN r.business_id
                      END) AS negative_reviews,
       (COUNT(DISTINCT CASE
                           WHEN r.rating > 3 THEN r.business_id
                       END)::FLOAT / NULLIF(COUNT(DISTINCT CASE
                                                               WHEN r.rating < 3 THEN r.business_id
                                                           END), 0)) AS ratio
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name
ORDER BY ratio DESC;",,INCORRECT RESULTS,0,0,0,0,0,6.86,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of businesses in the state of California to businesses in the state of New York?,"SELECT CAST(COUNT(CASE WHEN business.state = 'CA' THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN business.state = 'NY' THEN 1 END), 0) AS ratio FROM business;",yelp,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE state = 'CA')::FLOAT) / COUNT(*) AS ratio_ca_to_total,
       COUNT(*) FILTER (
                        WHERE state = 'NY')::FLOAT / COUNT(*) AS ratio_ny_to_total
FROM business;",,INCORRECT RESULTS,0,0,0,0,0,4.13,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the ratio of check-ins on weekends to check-ins on weekdays for the business named ""Mark’s Bistro""?","SELECT CAST(SUM(CASE WHEN checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN checkin.day NOT IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END), 0) AS ratio FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name ILIKE '%Mark’s Bistro%';",yelp,ratio,,postgres,"WITH weekend_checkins AS
  (SELECT SUM(COUNT) AS total_weekend_checkins
   FROM checkin
   WHERE DAY IN ('Saturday',
                 'Sunday')
     AND business_id = 'Mark’s Bistro'),
     weekday_checkins AS
  (SELECT SUM(COUNT) AS total_weekday_checkins
   FROM checkin
   WHERE DAY NOT IN ('Saturday',
                     'Sunday')
     AND business_id = 'Mark’s Bistro')
SELECT (total_weekend_checkins / NULLIF(total_weekday_checkins, 0))::numeric(5, 2) AS ratio_of_weekend_to_weekday_checkins
FROM weekend_checkins,
     weekday_checkins;",,INCORRECT RESULTS,0,0,0,0,0,7.32,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of open businesses to closed businesses in the city of San Francisco?,"SELECT CAST(SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM business WHERE LOWER(business.city) ILIKE '%san francisco%';",yelp,ratio,,postgres,"SELECT (COUNT(*) FILTER (
                         WHERE is_open = 1))::FLOAT / COUNT(*) AS ratio_of_open_businesses
FROM business
WHERE city = 'San Francisco';",,INCORRECT RESULTS,0,0,0,0,0,3.96,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the ratio of the number of businesses in each state to the total number of businesses in the database?,"SELECT business.state, COUNT(business.business_id) / NULLIF(CAST((SELECT COUNT(*) FROM business) AS FLOAT), 0) AS ratio FROM business GROUP BY business.state;",yelp,ratio,,postgres,"SELECT b.state,
       COUNT(b.bid) AS business_count_in_state,

  (SELECT COUNT(*)
   FROM business) AS total_businesses,
       CAST(COUNT(b.bid) AS FLOAT) /
  (SELECT COUNT(*)
   FROM business) AS ratio
FROM business b
GROUP BY b.state;",,,0,1,0,0,0,5.27,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What are the top 2 categories of businesses with the highest average rating?,"SELECT {category.category_name, category.id} FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY {} ORDER BY AVG(business_rating.average_rating) DESC NULLS LAST LIMIT 2;",yelp,table_join,,postgres,"SELECT c.category_name,
       AVG(r.rating) AS avg_rating
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name
ORDER BY avg_rating DESC
LIMIT 2;",,,0,1,0,0,0,4.23,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of check-ins for each business in the state of California?,"SELECT {business.business_id, business.name, business.bid}, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_checkins DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT b.business_id,
       COUNT(c.cid) AS total_checkins
FROM business b
JOIN checkin c ON b.business_id = c.business_id
WHERE b.state = 'CA'
GROUP BY b.business_id;",,INCORRECT RESULTS,0,0,0,0,0,4.15,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
What is the total number of reviews for each business category?,"SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT c.category_name,
       COUNT(r.rid) AS total_reviews
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
GROUP BY c.category_name;",,,0,1,0,0,0,4.07,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"What is the total number of reviews for each category in the state of ""California""?","SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT c.category_name,
       COUNT(r.rid) AS total_reviews
FROM review r
JOIN business b ON r.business_id = b.business_id
JOIN category c ON b.business_id = c.business_id
WHERE b.state = 'CA'
GROUP BY c.category_name;",,,0,1,0,0,0,4.18,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
"Which users have posted reviews for businesses located in the neighbourhood of ""Downtown"" and how many reviews have they posted?","SELECT {users.name, users.user_id}, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE neighbourhood.neighbourhood_name ILIKE '%Downtown%' GROUP BY {} ORDER BY review_count DESC NULLS LAST;",yelp,table_join,,postgres,"SELECT u.user_id,
       COUNT(r.rid) AS review_count
FROM users u
JOIN review r ON u.user_id = r.user_id
JOIN business b ON r.business_id = b.business_id
JOIN neighbourhood n ON b.business_id = n.business_id
WHERE n.neighbourhood_name = 'Downtown'
GROUP BY u.user_id;",,,0,1,0,0,0,4.43,n/a,,,,"Use the following table aliases when referencing tables in the query:
-- tip AS t
-- users AS u
-- review AS r
-- checkin AS c
-- business AS b
-- category AS ca
-- neighbourhood AS n
",,,,,,,,False,n/a
